<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>STAR</title>
  <icon>https://www.gravatar.com/avatar/3bc5e602b2d4c7fffe79258e2ac6952e</icon>
  <subtitle>blog</subtitle>
  <link href="http://stardust14.com/atom.xml" rel="self"/>
  
  <link href="http://stardust14.com/"/>
  <updated>2021-06-15T02:33:45.831Z</updated>
  <id>http://stardust14.com/</id>
  
  <author>
    <name>stardust</name>
    <email>邮箱</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>F4学习记录</title>
    <link href="http://stardust14.com/2021/06/15/F4%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://stardust14.com/2021/06/15/F4%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-15T00:59:10.000Z</published>
    <updated>2021-06-15T02:33:45.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>阿波罗STM32开发板底板引脚</h1><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210615090214.png" alt=""></p><blockquote><p>JTAG调试，需要占用5个IO端口；SWD则只需要2个IO端口</p><p>KEY_UP 是高电平有效，而 KEY0、KEY1 和 KEY2 是低电平有效</p></blockquote><h2 id="核心板资源图"><a class="header-anchor" href="#核心板资源图">¶</a>核心板资源图</h2><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210615090543.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;阿波罗STM32开发板底板引脚&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210615090214.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JTAG调试，需要占用5个IO端口；SWD则只需要2个IO端口&lt;/p&gt;
&lt;p&gt;KEY_UP 是高电平有效，而 KEY0、KEY1 和 KEY2 是低电平有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;核心板资源图&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#核心板资源图&quot;&gt;¶&lt;/a&gt;核心板资源图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210615090543.png&quot; alt&gt;&lt;/p&gt;
</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="STM32" scheme="http://stardust14.com/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>雷达</title>
    <link href="http://stardust14.com/2021/05/13/%E9%9B%B7%E8%BE%BE/"/>
    <id>http://stardust14.com/2021/05/13/%E9%9B%B7%E8%BE%BE/</id>
    <published>2021-05-13T06:54:10.000Z</published>
    <updated>2021-05-21T09:53:31.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>理论积累</h1><p>奈奎斯特采样定理讨论的是频谱分布在(0,fH)上的基带信号的采样问题，但是，对于雷达接收机，接收信号大多为调制的射频信号，射频信号的频率上限远高于基带信号的频率上限，但是分布在有限的(fL,fH)范围内。虽然可以按高于最高频率的2倍进行奈奎斯特采样。</p><p>但是，很快就会发现当最高频率远远大于信号带宽B时，如果按照奈奎斯特采样率来采样，则其采样率会非常高，但是其信号带宽并不一定很宽，现实中的A/D难以实现的。这时，低通采样定理已经不能满足实际中的使用要求，从而催生了带通采样的应用。</p><ul><li>带通采样定理：</li></ul><p>设一个频率信号x(t)的频带限制在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>f</mi><mi>L</mi></msub><mo separator="true">,</mo><msub><mi>f</mi><mi>H</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(f_L,f_H)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>内</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210513201147.png" alt=""></p><p>由于带限信号频谱具有轴对称性，故只需对一边的信号进行分析即可。如上图所示，进行采样时以采样频率fs为间隔对信号频谱进行搬移，不失真条件为搬移后的频谱在原频谱区域不发生混叠。</p><p>第一次搬移时不混叠条件：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>f</mi><mi>H</mi></msub><mo>+</mo><msub><mi>f</mi><mi>S</mi></msub><mo>≥</mo><mo>−</mo><msub><mi>f</mi><mi>L</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>f</mi><mi>L</mi></msub><mo>+</mo><msub><mi>f</mi><mi>S</mi></msub><mo>≤</mo><msub><mi>f</mi><mi>L</mi></msub><mo>−</mo><msub><mi>f</mi><mi>S</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}-f_H+f_S\geq -f_L\\ -f_L+f_S \leq f_L-f_S\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>连理求得</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>L</mi></msub><mo>−</mo><msub><mi>f</mi><mi>H</mi></msub><mo>≤</mo><msub><mi>f</mi><mi>S</mi></msub><mo>≤</mo><msub><mi>f</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">f_L-f_H \leq f_S \leq f_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>此后对频谱进行搬移时，在两个最邻近右侧原频谱的移位频谱处发生不混叠的边界条件，即设第m次搬移频谱在原频谱左侧，第m+1次搬移频谱在原频谱右侧，得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>f</mi><mi>H</mi></msub><mo>+</mo><mi>m</mi><msub><mi>f</mi><mi>S</mi></msub><mo>≤</mo><mo>−</mo><msub><mi>f</mi><mi>L</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>f</mi><mi>H</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msub><mi>f</mi><mi>S</mi></msub><mo>≥</mo><msub><mi>f</mi><mi>H</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}-f_H+mf_S\leq -f_L\\ -f_H+(m+1)f_S \geq f_H \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>连理求得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><msub><mi>f</mi><mi>H</mi></msub></mrow><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>≤</mo><msub><mi>f</mi><mi>S</mi></msub><mo>≤</mo><mfrac><mrow><mn>2</mn><msub><mi>f</mi><mi>L</mi></msub></mrow><mi>m</mi></mfrac><mspace width="1em"/><mspace width="1em"/><mi>m</mi><mo>≤</mo><mfrac><msub><mi>f</mi><mi>L</mi></msub><mrow><msub><mi>f</mi><mi>H</mi></msub><mo>−</mo><msub><mi>f</mi><mi>L</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{2f_H}{m+1} \leq f_S \leq \frac{2f_L}{m}    \quad \quad m \leq \frac{f_L}{f_H-f_L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通常情况下我们需要fs的带通采样最小值，此时由2fH/(m+1)≤ 2fL/m可知m≤[ fL/(fH-fL) ]，[ ]为向下取整符号。</p><blockquote><p><strong>带通采样的限制条件</strong></p><p>带通采样定理使用的前提条件是：只允许在其中一个频带上存在信号，而不允许在不同的频带同时存在信号，否则将会引起信号混叠。</p></blockquote><p>#############</p><p>阵列输出的绝对值与来波方向之间的关系称为<strong>天线的方向图</strong></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;理论积累&lt;/h1&gt;
&lt;p&gt;奈奎斯特采样定理讨论的是频谱分布在(0,fH)上的基带信号的采样问题，但是，对于雷达接收机，接收信号大多为调制的射频信号，射频信号的频率上限远高于基带信号的频率上限，但是分布在有限的(fL,fH)范围内。虽然可以按高于最高频率的2倍进行奈奎斯特采样。&lt;/p&gt;
&lt;p&gt;但是，很快就会发现当最高频率远远大于信号带宽B时，如果按照奈奎斯特采样率来采样，则其采样率会非常高，但是其信号带宽并不一定很宽，现实中的A/D难以实现的。这时，低通采样定理已经不能满足实际中的使用要求，从而催生了带通采样的应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带通采样定理：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设一个频率信号x(t)的频带限制在&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;(f_L,f_H)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.08125em;&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;内&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210513201147.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;由于带限信号频谱具有轴对称性，故只需对一边的信号进行分析即可。如上图所示，进行采样时以采样频率fs为间隔对信号频谱进行搬移，不失真条件为搬移后的频谱在原频谱区域不发生混叠。&lt;/p&gt;
&lt;p&gt;第一次搬移时不混叠条件：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo fence=&quot;true&quot;&gt;{&lt;/mo&gt;&lt;mtable rowspacing=&quot;0.3599999999999999em&quot; columnalign=&quot;left left&quot; columnspacing=&quot;1em&quot;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{cases}-f_H+f_S\geq -f_L\\ -f_L+f_S \leq f_L-f_S\end{cases}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:3.0000299999999998em;vertical-align:-1.25003em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot; style=&quot;top:0em;&quot;&gt;&lt;span class=&quot;delimsizing size4&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.69em;&quot;&gt;&lt;span style=&quot;top:-3.69em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.008em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.08125em;&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≥&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-2.25em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.008em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.19em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="雷达" scheme="http://stardust14.com/tags/%E9%9B%B7%E8%BE%BE/"/>
    
  </entry>
  
  <entry>
    <title>butterfly主题美化</title>
    <link href="http://stardust14.com/2021/04/08/butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <id>http://stardust14.com/2021/04/08/butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</id>
    <published>2021-04-08T00:52:42.000Z</published>
    <updated>2021-04-08T03:04:44.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>butterfly主题美化记录</h1><h2 id="社交图标"><a class="header-anchor" href="#社交图标">¶</a>社交图标</h2><p>在<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>，找到自己想要的图标，看中那个就加入购物车</p><p>加购完毕之后点击右上角的购物车，添加至项目，选择其中一种快捷方式登录，项目名称随便填</p><p>然后在我的项目里选择 <code>Font class</code>，点击查看在线链接并在浏览器中打开此链接，最后另存为本地<strong>主题文件夹</strong>下的<code>source\css</code>中。</p><p>然后在主题配置文件（_config.yml）里，inject引用图标css文件</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210408090314.png" alt=""></p><p>然后继续在配置文件中找到social配置项</p><p>格式为：iconfont class名：链接||名称</p><p>其中</p><ul><li><p>iconfont：是固定的</p></li><li><p>class 名：可在刚刚的阿里巴巴矢量图标库生成的 css 文件里找到</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210408090734.png" alt=""></p></li><li><p>链接：点击图标之后跳转的链接</p></li><li><p>名称：对应你图标的含义，例如：QQ、Github</p></li></ul><p>自定义图标的颜色：</p><p>打开下载到本地的css文件，换身衣裳</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210408091858.png" alt=""></p><p>其他图标同样的做法</p><h2 id="电子时钟"><a class="header-anchor" href="#电子时钟">¶</a>电子时钟</h2><blockquote><p>有错误，未解决</p></blockquote><h3 id="插件安装"><a class="header-anchor" href="#插件安装">¶</a>插件安装</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm i hexo-electric-clock --save</span><br><span class="line"></span><br><span class="line"><span class="section"># 或者</span></span><br><span class="line"></span><br><span class="line">cnpm i hexo-electric-clock --save</span><br></pre></td></tr></table></figure><h3 id="添加博客根目录-config配置项"><a class="header-anchor" href="#添加博客根目录-config配置项">¶</a>添加博客根目录_config配置项</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">electric<span class="emphasis">_clock:</span></span><br><span class="line"><span class="emphasis">  priority: 5</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  enable_</span>page: all</span><br><span class="line">  layout:</span><br><span class="line"><span class="code">    type: class</span></span><br><span class="line"><span class="code">    name: sticky_layout</span></span><br><span class="line"><span class="code">    index: 0</span></span><br><span class="line"><span class="code">  temple_html: &#x27;&lt;div class=&quot;card-widget card-clock&quot;&gt;&lt;div class=&quot;card-glass&quot;&gt;&lt;div class=&quot;card-background&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div id=&quot;hexo_electric_clock&quot;&gt;&lt;img id=&quot;card-clock-loading&quot; src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot; style=&quot;height: 120px; width: 100%;&quot; data-ll-status=&quot;loading&quot; class=&quot;entered loading&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="enable"><a class="header-anchor" href="#enable">¶</a>enable</h3><p>**参数：**true/false<br>**含义：**是否开启插件</p><h3 id="enable-page"><a class="header-anchor" href="#enable-page">¶</a>enable_page</h3><p>**参数：**all<br>**含义：**路由地址，all 代表全局开启。如 / 代表主页。</p><h3 id="priority"><a class="header-anchor" href="#priority">¶</a>priority</h3><p>**参数：**1<br>**含义：**插件的叠放顺序，数字越大，叠放约靠前。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">electric<span class="emphasis">_clock:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  priority: 5 # 这里是参数</span></span><br></pre></td></tr></table></figure><h3 id="layout"><a class="header-anchor" href="#layout">¶</a>layout</h3><p>**参数：**type; （class&amp;id）<br>**参数：**name;<br>**参数：**index；（数字）<br>**含义：**如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;我是墙&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recent-posts&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="comment">&lt;!-- id=&gt;</span></span>type  recent-posts=&gt;name    --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;我是画框&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;div desc=&quot;我是纸&quot;&gt;</span></span><br><span class="line"><span class="code">      &lt;!--这里通过js挂载electric_clock，也就是画画--&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="temple-html"><a class="header-anchor" href="#temple-html">¶</a>temple_html</h3><p>**参数：**html 模板字段<br>**含义：**包含挂载容器</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget card-clock&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="comment">&lt;!-- 挂载容器 --&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-glass&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;div class=&quot;card-background&quot;&gt;</span></span><br><span class="line"><span class="code">      &lt;div class=&quot;card-content&quot;&gt;</span></span><br><span class="line"><span class="code">        &lt;div id=&quot;hexo_electric_clock&quot;&gt;</span></span><br><span class="line"><span class="code">          &lt;img</span></span><br><span class="line"><span class="code">            id=&quot;card-clock-loading&quot;</span></span><br><span class="line"><span class="code">            src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot;</span></span><br><span class="line"><span class="code">            style=&quot;height: 120px; width: 100%;&quot;</span></span><br><span class="line"><span class="code">            data-ll-status=&quot;loading&quot;</span></span><br><span class="line"><span class="code">            class=&quot;entered loading&quot;</span></span><br><span class="line"><span class="code">          /&gt;</span></span><br><span class="line"><span class="code">        &lt;/div&gt;</span></span><br><span class="line"><span class="code">      &lt;/div&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="历史今日"><a class="header-anchor" href="#历史今日">¶</a>历史今日</h2><h3 id="安装插件"><a class="header-anchor" href="#安装插件">¶</a>安装插件</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm i hexo-history-calendar --save</span><br><span class="line"></span><br><span class="line"><span class="section"># 或者</span></span><br><span class="line"></span><br><span class="line">cnpm i hexo-history-calendar --save</span><br></pre></td></tr></table></figure><h3 id="博客根目录-config-配置项-："><a class="header-anchor" href="#博客根目录-config-配置项-：">¶</a>博客根目录_config 配置项 ：</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">YAML</span><br><span class="line">复制成功history<span class="emphasis">_calendar:</span></span><br><span class="line"><span class="emphasis">  priority: 4</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  enable_</span>page: all</span><br><span class="line">  layout:</span><br><span class="line"><span class="code">    type: class</span></span><br><span class="line"><span class="code">    name: sticky_layout</span></span><br><span class="line"><span class="code">    index: 0</span></span><br><span class="line"><span class="code">  temple_html: &#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="enable-v2"><a class="header-anchor" href="#enable-v2">¶</a>enable</h3><p>**参数：**true/false<br>**含义：**是否开启插件</p><h3 id="enable-page-v2"><a class="header-anchor" href="#enable-page-v2">¶</a>enable_page</h3><p>**参数：**all<br>**含义：**路由地址，all 代表全局开启。如 / 代表主页。</p><h3 id="priority-v2"><a class="header-anchor" href="#priority-v2">¶</a>priority</h3><p>**参数：**1<br>**含义：**插件的叠放顺序，数字越大，叠放约靠前。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">YAML</span><br><span class="line">history<span class="emphasis">_calendar:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  priority: 4 # 这里是参数</span></span><br></pre></td></tr></table></figure><h3 id="layout-v2"><a class="header-anchor" href="#layout-v2">¶</a>layout</h3><p>**参数：**type; （class&amp;id）<br>**参数：**name;<br>**参数：**index；（数字）<br>**含义：**如果说 history_calendar 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;我是墙&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recent-posts&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="comment">&lt;!-- id=&gt;</span></span>type  recent-posts=&gt;name    --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;我是画框&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;div desc=&quot;我是纸&quot;&gt;</span></span><br><span class="line"><span class="code">      &lt;!--这里通过js挂载history_calendar，也就是画画--&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="temple-html-v2"><a class="header-anchor" href="#temple-html-v2">¶</a>temple_html</h3><p>**参数：**html 模板字段<br>**含义：**包含挂载容器</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">XML</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget card-history&quot;</span>&gt;</span></span> <span class="xml"><span class="comment">&lt;!-- 挂载容器 --&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;div class=&quot;item-headline&quot;&gt;</span></span><br><span class="line"><span class="code">      &lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">      &lt;span&gt;那年今日&lt;/span&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt; &lt;!-- 挂载器 --&gt;</span></span><br><span class="line"><span class="code">    &lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;</span></span><br><span class="line"><span class="code">          &lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h1>参考来自</h1><a class="btn-beautify button--animated block" href="https://blog.imzjw.cn/posts/b74f504f/"   title="点此跳转"><i class="far fa-hand-point-right fa-fw"></i><span>点此跳转</span></a><a class="btn-beautify button--animated block" href="https://zfe.space/post/hexo-electric-clock.html"   title="点此跳转"><i class="far fa-hand-point-right fa-fw"></i><span>点此跳转</span></a><a class="btn-beautify button--animated block" href="https://zfe.space/post/hexo-history-calendar.html"   title="点此跳转"><i class="far fa-hand-point-right fa-fw"></i><span>点此跳转</span></a>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;butterfly主题美化记录&lt;/h1&gt;
&lt;h2 id=&quot;社交图标&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#社交图标&quot;&gt;¶&lt;/a&gt;社交图标&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.iconfont.cn/&quot;&gt;阿里巴巴矢量图标库&lt;/a&gt;，找到自己想要的图标，看中那个就加入购物车&lt;/p&gt;
&lt;p&gt;加购完毕之后点击右上角的购物车，添加至项目，选择其中一种快捷方式登录，项目名称随便填&lt;/p&gt;
&lt;p&gt;然后在我的项目里选择 &lt;code&gt;Font class&lt;/code&gt;，点击查看在线链接并在浏览器中打开此链接，最后另存为本地&lt;strong&gt;主题文件夹&lt;/strong&gt;下的&lt;code&gt;source\css&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;然后在主题配置文件（_config.yml）里，inject引用图标css文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210408090314.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;然后继续在配置文件中找到social配置项&lt;/p&gt;
&lt;p&gt;格式为：iconfont class名：链接||名称&lt;/p&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="随笔" scheme="http://stardust14.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>分享&amp;记录</title>
    <link href="http://stardust14.com/2021/04/07/%E5%88%86%E4%BA%AB-%E8%AE%B0%E5%BD%95/"/>
    <id>http://stardust14.com/2021/04/07/%E5%88%86%E4%BA%AB-%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-07T08:39:32.000Z</published>
    <updated>2021-04-07T09:29:03.186Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7066236b71bd093e2c9f53bf82622c0e9bd218274369bab2b32498af42cebc66">31242a41c922984c3c7e6ed39d2c978a39cd93922d549058b144463d7a1519272fa19dce3629f278aaed84c96a5c85cfb21d90190581ad32f40bbabf9b62b7250d325eea2bf076e2cdbf55e3c24285bf6e8b911be2da55e80e31eb116cedd161373c576f9c7eaa34b0c22d52333648cbf1b2b32bce14fc44950b046203047fc8965e48c16a0577d7647ad1aa56ad7a4484d547b335e841275628ebe6cebe760b9fd61250d56736073b6ecd28ad45846bba3f5259cc41984812e7d4a99811c18466a3d31dc1150a203670051b3b07265a6a81fde20fe261ddd6b07f9001256de791c796602283c7045ce9c585d9165b9bb33c144c782ecc9a705562505efbb8f1e77a8555cd0468f569fb23a2579cf7476dd2194d4d78b619b79d8c07b1f9c2175635095ac4bc51805ba7e820143398c9263cdef1a2746ecac1bc72bc7520025e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOPS, these decrypted content may changed, but you can still have a look.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;7066236b71bd093e2c9f53bf82622c0e9bd218274369bab2b32498af42cebc66&quot;&gt;31242a41c922984c3c7e6ed39d2c978a39cd93922d549058b144463d7a1519272fa19dce3629f278aaed84c96a5c85cfb21d90190581ad32f40bbabf9b62b7250d325eea2bf076e2cdbf55e3c24285bf6e8b911be2da55e80e31eb116cedd161373c576f9c7eaa34b0c22d52333648cbf1b2b32bce14fc44950b046203047fc8965e48c16a0577d7647ad1aa56ad7a4484d547b335e841275628ebe6cebe760b9fd61250d56736073b6ecd28ad45846bba3f5259cc41984812e7d4a99811c18466a3d31dc1150a203670051b3b07265a6a81fde20fe261ddd6b07f9001256de791c796602283c7045ce9c585d9165b9bb33c144c782ecc9a705562505efbb8f1e77a8555cd0468f569fb23a2579cf7476dd2194d4d78b619b79d8c07b1f9c2175635095ac4bc51805ba7e820143398c9263cdef1a2746ecac1bc72bc7520025e&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-xray&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-xray&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-xray&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-xray&quot;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
      &lt;svg class=&quot;hbe hbe-graphic hbe-graphic-xray&quot; width=&quot;300%&quot; height=&quot;100%&quot; viewBox=&quot;0 0 1200 60&quot; preserveAspectRatio=&quot;none&quot;&gt;
        &lt;path d=&quot;M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0&quot;/&gt;
        &lt;path d=&quot;M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0&quot;/&gt;
      &lt;/svg&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="随笔" scheme="http://stardust14.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>批注记录</title>
    <link href="http://stardust14.com/2021/04/07/%E6%89%B9%E6%B3%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://stardust14.com/2021/04/07/%E6%89%B9%E6%B3%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-07T08:23:11.000Z</published>
    <updated>2021-04-08T10:01:04.320Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2fcf70f93106af4f44a6b4a9317f1bf81351f4e94bb6f1323459216d14f02c18">22064b17c03cb0c0e58c99349b6889d0c7e9d327de57f2d214b057f3875d6b37b9b20ab3b449f9d3b0ba6ffe12bb71d82eff8171349bc71e3a2c9718b358eacc07c1e2d0dcdcc94bb927d4bdef70eb39fd8e7de731fdf8f27d06339a84133e4a974b5fae5fee1809df024fdfbb238fba030fdd8003e2826f0a33da9ce588a76e8e6bc91b4049cb9065bb5b9840402572bd86834c2d0c361fdb4259dd56633b9d286b14b14b74d50d4ca10de4c2e54f118835e2ea5a28de2ac78c4f57666f83faa6cf49198dbd3f86312e8ae6475e1ad55bc0f991fa504124763e450733221c2a781fb4c5fbae0d7123703d7ac9a38542095b3da435e03cc3247b4eff26b05bc0b9e2a2c706e61562c7bb934180842f9b6dc301690938c4f21c78468483f3e95d8b5dcc7048e9b21da20cd49dde4a8cd683cfc91feffd222c011316f66497312669c395d166bbc4e9518b0008cf6b92975c76b75ea7645421c9d7e156f6d824d2c0892d2b3835cb34e29b6164ac5b171e91b073be40a5f07d833b0ba2047deb5c5681bf1fb48fb4af8bb0e2493e2b3b3e98279dbcdb3cb4aeb62164bf28ae94eb18e587b9ae3d7340b674b5f9e1f77e5e60c56c06cfa36d7460e8e19b4156cc0b35de9e2506da358011c8d20166305cbedbaa6a5a43e35dd4f1120bf05c3a51149693768289c76395859688f7c40ac480bee9427637213b8611f31b86f53e56d25b0247028467efd7a299c21016038df477e1219595d90fcfdc57fba758f96301f5146be17f7f14a48229757225def14d3c30eb76c32c626a63606bad9c98bda3e69c6268be1f5954e80690f082bf9027805bc03d4096deeb9ccb9cb48b2c6db5e42ae71d320fae1a5ed921463cd37936f0cd0225ca9124108d0abb447665cff099be802002607c1db5c7608155344f315d28759b32b514948d47a45574124d9b3e6574ad48e371cec8cec9a50fe7d2376d7bb18ed6604f5da90b43818367f002f26aef4d7bbdfc84f1dc0957a9f5ed72809c5642a90b5823f3f98e8842cd1c800e9b2147bba8ccf0cd51d8473a2d4d2d24f53dcf6cb5cfb6749f5d0683d3ad3db3d179878a4b60b02ef9184de71532847e6ed2747ed50c01f0ab899b938f64b98c09a0dad54d087533805dc3eb56b5fcf1bc41f1416e0d1ac664dd22764c7e222a590fd133459ad9566ba24a997e0fe2d1b9948fee107708e334353a08b1bb39c62357fa125768f0f8946f86b93a14feb91a334e0517a4c086c7171c03c3fd9287a4971411042a380d562a88163c0aab3d7496559144df81f103e0f1028598cdc7632dde89026b29d6e6763cf5386ea826f7ae0212d2f0c72720929b60b88d59e10bf3f58a7e0544a1f87786018230fa970b072e05f32c014b06a3886f2f8af1443d921285384ebd6b8eab3e0505a39f309afef9c7f2e2d2a7a0727483e195c4b3dbb3609c0793b497647c21b4015c71eecf2e802e2b13e40c0d008f547c79d327028eab87299957fa33075fd43ffe2461ddc83982c4c8000aa50f5e36649d147aaebc9cd91c0f8d18577a08fd8e8b65a2f5a017454efdec16f6cfea82e59ae3e08d2bb550606ba5e632aaa828ce85b3ec25a6bfcb87e484743d5d7faf354e676e8ef4f658766e13848b2b337d0b4ee60490302e0f45ba4364762313e27ddeac613a36865942f94e7eb1d0303be635165332bceb8c6227c7075b825d80cd8653e502d54213bd8f2a5b0fe6d0d718b2d25a299ea8ca868f26d5647af9080cb5eb8bc1f6d3b2363b452fdfa5cee1a31d03d6a2cfa36a0e7806da9043630257cb159a2a36b6cfc67c1af4baf7e2d802193e883890ac38e14209dad36a5cba95696e635d4d1d5b08d94343d8f54de79f67932f16914214594230b1ef79b6f6f0abf9853d97df149480f1f9b32087eeda3df0181431201c82e597ff5d7554874b7a87f1f171053046e7b5f438a23c4705a999bccffedf1643f35a351fcdea90fe1fb6c15a277cf7a8c852e028bbc94a201ac62ea61cbed40107fdf8a4e33010f4c56f44f8779a3a7743a585bf632bf53ac21d2f5a7b9c3380f08685157e1392d48c31f373057d6f02b8ca66924aeca4f1f1649bbccf0c1e65317c3e7889d00209ffd2052d75f400f7ea67d307c7382e5e0726dc1b1a69f35d1c430aefe96b09d9e387</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOPS, these decrypted content may changed, but you can still have a look.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;2fcf70f93106af4f44a6b4a9317f1bf81351f4e94bb6f1323459216d14f02c18&quot;&gt;22064b17c03cb0c0e58c99349b6889d0c7e9d327de57f2d214b057f3875d6b37b9b20ab3b449f9d3b0ba6ffe12bb71d82eff8171349bc71e3a2c9718b358eacc07c1e2d0dcdcc94bb927d4bdef70eb39fd8e7de731fdf8f27d06339a84133e4a974b5fae5fee1809df024fdfbb238fba030fdd8003e2826f0a33da9ce588a76e8e6bc91b4049cb9065bb5b9840402572bd86834c2d0c361fdb4259dd56633b9d286b14b14b74d50d4ca10de4c2e54f118835e2ea5a28de2ac78c4f57666f83faa6cf49198dbd3f86312e8ae6475e1ad55bc0f991fa504124763e450733221c2a781fb4c5fbae0d7123703d7ac9a38542095b3da435e03cc3247b4eff26b05bc0b9e2a2c706e61562c7bb934180842f9b6dc301690938c4f21c78468483f3e95d8b5dcc7048e9b21da20cd49dde4a8cd683cfc91feffd222c011316f66497312669c395d166bbc4e9518b0008cf6b92975c76b75ea7645421c9d7e156f6d824d2c0892d2b3835cb34e29b6164ac5b171e91b073be40a5f07d833b0ba2047deb5c5681bf1fb48fb4af8bb0e2493e2b3b3e98279dbcdb3cb4aeb62164bf28ae94eb18e587b9ae3d7340b674b5f9e1f77e5e60c56c06cfa36d7460e8e19b4156cc0b35de9e2506da358011c8d20166305cbedbaa6a5a43e35dd4f1120bf05c3a51149693768289c76395859688f7c40ac480bee9427637213b8611f31b86f53e56d25b0247028467efd7a299c21016038df477e1219595d90fcfdc57fba758f96301f5146be17f7f14a48229757225def14d3c30eb76c32c626a63606bad9c98bda3e69c6268be1f5954e80690f082bf9027805bc03d4096deeb9ccb9cb48b2c6db5e42ae71d320fae1a5ed921463cd37936f0cd0225ca9124108d0abb447665cff099be802002607c1db5c7608155344f315d28759b32b514948d47a45574124d9b3e6574ad48e371cec8cec9a50fe7d2376d7bb18ed6604f5da90b43818367f002f26aef4d7bbdfc84f1dc0957a9f5ed72809c5642a90b5823f3f98e8842cd1c800e9b2147bba8ccf0cd51d8473a2d4d2d24f53dcf6cb5cfb6749f5d0683d3ad3db3d179878a4b60b02ef9184de71532847e6ed2747ed50c01f0ab899b938f64b98c09a0dad54d087533805dc3eb56b5fcf1bc41f1416e0d1ac664dd22764c7e222a590fd133459ad9566ba24a997e0fe2d1b9948fee107708e334353a08b1bb39c62357fa125768f0f8946f86b93a14feb91a334e0517a4c086c7171c03c3fd9287a4971411042a380d562a88163c0aab3d7496559144df81f103e0f1028598cdc7632dde89026b29d6e6763cf5386ea826f7ae0212d2f0c72720929b60b88d59e10bf3f58a7e0544a1f87786018230fa970b072e05f32c014b06a3886f2f8af1443d921285384ebd6b8eab3e0505a39f309afef9c7f2e2d2a7a0727483e195c4b3dbb3609c0793b497647c21b4015c71eecf2e802e2b13e40c0d008f547c79d327028eab87299957fa33075fd43ffe2461ddc83982c4c8000aa50f5e36649d147aaebc9cd91c0f8d18577a08fd8e8b65a2f5a017454efdec16f6cfea82e59ae3e08d2bb550606ba5e632aaa828ce85b3ec25a6bfcb87e484743d5d7faf354e676e8ef4f658766e13848b2b337d0b4ee60490302e0f45ba4364762313e27ddeac613a36865942f94e7eb1d0303be635165332bceb8c6227c7075b825d80cd8653e502d54213bd8f2a5b0fe6d0d718b2d25a299ea8ca868f26d5647af9080cb5eb8bc1f6d3b2363b452fdfa5cee1a31d03d6a2cfa36a0e7806da9043630257cb159a2a36b6cfc67c1af4baf7e2d802193e883890ac38e14209dad36a5cba95696e635d4d1d5b08d94343d8f54de79f67932f16914214594230b1ef79b6f6f0abf9853d97df149480f1f9b32087eeda3df0181431201c82e597ff5d7554874b7a87f1f171053046e7b5f438a23c4705a999bccffedf1643f35a351fcdea90fe1fb6c15a277cf7a8c852e028bbc94a201ac62ea61cbed40107fdf8a4e33010f4c56f44f8779a3a7743a585bf632bf53ac21d2f5a7b9c3380f08685157e1392d48c31f373057d6f02b8ca66924aeca4f1f1649bbccf0c1e65317c3e7889d00209ffd2052d75f400f7ea67d307c7382e5e0726dc1b1a69f35d1c430aefe96b09d9e387&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-xray&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-xray&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-xray&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-xray&quot;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
      &lt;svg class=&quot;hbe hbe-graphic hbe-graphic-xray&quot; width=&quot;300%&quot; height=&quot;100%&quot; viewBox=&quot;0 0 1200 60&quot; preserveAspectRatio=&quot;none&quot;&gt;
        &lt;path d=&quot;M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0&quot;/&gt;
        &lt;path d=&quot;M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0&quot;/&gt;
      &lt;/svg&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://stardust14.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://stardust14.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>MUSIC算法</title>
    <link href="http://stardust14.com/2021/03/15/MUSIC%E7%AE%97%E6%B3%95/"/>
    <id>http://stardust14.com/2021/03/15/MUSIC%E7%AE%97%E6%B3%95/</id>
    <published>2021-03-15T03:22:31.000Z</published>
    <updated>2021-05-31T02:13:12.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>MUSIC算法</h1><div class="note warning flat"><p>以下部分是基于线阵阵列！！！还有许多不完善的地方，待续···</p></div><p>假设入射到天线阵列的近似为远场窄带信号，它们分别来自<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub><mo separator="true">,</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><msub><mi>θ</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">\theta_1,\theta_2,···,\theta_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>共K个方向，则有</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>s</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>v</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x(n)=As(n)+v(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><blockquote><p>x(n)是天线阵各阵元的接收数据向量，M*1</p><p>A是阵列的方向矩阵，M*K</p><p>s(n)为空间信号向量,K*1</p><p>v(n)是白噪声向量，M*1</p></blockquote><p>接收信号向量的空间相关矩阵可表示为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>X</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mi>X</mi><mo stretchy="false">(</mo><mi>n</mi><msup><mo stretchy="false">)</mo><mi>H</mi></msup><mo stretchy="false">]</mo><mo>=</mo><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo>+</mo><msup><mi>σ</mi><mn>2</mn></msup><mi>I</mi></mrow><annotation encoding="application/x-tex">R=E[X(n)X(n)^H]=AR_sA^H+\sigma^2I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.991331em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span></p><blockquote><p>I是单位矩阵</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><msub><mi>w</mi><mn>0</mn></msub><mi>τ</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mn>2</mn><mi>π</mi><mi>f</mi><mi>τ</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mn>2</mn><mi>π</mi><mfrac><mi>c</mi><mi>λ</mi></mfrac><msub><mi>x</mi><mi>k</mi></msub><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>i</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">A=e^{-jw_0\tau}=e^{-j2 \pi f\tau}=e^{-j2\pi \frac{c}{\lambda}x_ksin{\theta_i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>是波程差（距离差)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi><mo>=</mo><mfrac><mi>c</mi><mi>λ</mi></mfrac></mrow><annotation encoding="application/x-tex">\tau=\frac{c}{\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，c是光速，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>为波长，x_k是位置信息（以原点为坐标），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mo>=</mo><mfrac><mi>c</mi><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">\lambda=\frac{c}{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><blockquote><p>为何要进行协方差矩阵处理？</p><p>雷达接收到的信号是累加的！！（二维FFT）</p><p>任何方阵都可以求特征值和特征向量。矩阵可以对角化，那么非零特征值的个数就等于矩阵的秩。</p></blockquote><p>由于实际中采集的接收数据矩阵是有限长的，需要对有限的采样数据的协方差矩阵进行最大似然估计</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">^</mo></mover><mo>=</mo><mfrac><mn>1</mn><mi>L</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>L</mi></msubsup><mi>X</mi><msup><mi>X</mi><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">\widehat{R}=\frac{1}{L}\sum_{i=1}^{L}XX^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.92333em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92333em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.326231em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>L代表矩阵长度</p></blockquote><p>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">AR_sA^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.991331em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span>进行特征值的分解，设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mn>1</mn></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">\widetilde{\lambda}_1,\widetilde{\lambda}_2,\cdots,\widetilde{\lambda}_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.14888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为特征值；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">u_1,u_2,\cdots,u_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是对应正交归一化特征向量。</p><p>通常M&gt;K，假设矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">AR_sA^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.991331em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span>的所有非零特征值设为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mn>1</mn></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>K</mi></msub><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">\widetilde{\lambda}_1,\widetilde{\lambda}_2,\cdots,\widetilde{\lambda}_K\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.14888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；剩余的所有特征值设为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mrow><mi>K</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>M</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\widetilde{\lambda}_{K+1},\widetilde{\lambda}_{K+2},\cdots,\widetilde{\lambda}_M=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.162771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo stretchy="false">)</mo><msub><mi>u</mi><mi>i</mi></msub><mo>=</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>K</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo stretchy="false">)</mo><msub><mi>u</mi><mi>i</mi></msub><mo>=</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow><mo separator="true">,</mo><mi>K</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>M</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases} (AR_sA^H)u_i=\widetilde{\lambda}_iu_i,i=1,2,,\cdots,K\\ (AR_sA^H)u_i=\widetilde{\lambda}_iu_i,i={K+1},K+2,,\cdots,M \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>对上式同时右乘<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>u</mi><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">u^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span>，有</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo stretchy="false">)</mo><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">(AR_sA^H)u_i{u_i}^H=\widetilde{\lambda}_iu_i{u_i}^H,i=1,2,,\cdots,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></p><p>对于i取所有可能的值并且相加，可得</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo stretchy="false">)</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></msubsup><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></msubsup><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">(AR_sA^H)\sum_{i=1}^Mu_i{u_i}^H=\sum_{i=1}^M\widetilde{\lambda}_iu_i{u_i}^H,i=1,2,,\cdots,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">u_1,u_2,\cdots,u_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是对应正交归一化矩阵，即有</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></msubsup><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^Mu_i{u_i}^H=I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span></p><p>即有</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>R</mi><mi>s</mi></msub><msup><mi>A</mi><mi>H</mi></msup><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></msubsup><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></msubsup><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">AR_sA^H=\sum_{i=1}^M\widetilde{\lambda}_iu_i{u_i}^H=\sum_{i=1}^K\widetilde{\lambda}_iu_i{u_i}^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.991331em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></p><p>所以，协方差矩阵（自相关矩阵）R可表示为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>+</mo><msubsup><mi>σ</mi><mi>v</mi><mn>2</mn></msubsup><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><mo stretchy="false">(</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><mo>+</mo><msubsup><mi>σ</mi><mi>v</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>+</mo><msubsup><mi>σ</mi><mi>v</mi><mn>2</mn></msubsup><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>K</mi><mo>+</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>λ</mi><mi>i</mi></msub><msub><mi>u</mi><mi>i</mi></msub><msup><msub><mi>u</mi><mi>i</mi></msub><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">R=\sum_{i=1}^K\widetilde{\lambda}_iu_i{u_i}^H+\sigma_v^2\sum_{i=1}^Mu_i{u_i}^H=\sum_{i=1}^K(\widetilde{\lambda}_i+\sigma_v^2)u_i{u_i}^H+\sigma_v^2\sum_{i=K+1}^Mu_i{u_i}^H=\sum_{i=1}^M{\lambda}_iu_i{u_i}^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1810030000000005em;vertical-align:-1.352667em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.352667em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>式中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub><mo>=</mo><msub><mover accent="true"><mi>λ</mi><mo stretchy="true">~</mo></mover><mi>i</mi></msub><mo>+</mo><msubsup><mi>σ</mi><mi>v</mi><mn>2</mn></msubsup><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">{\lambda}_i=\widetilde{\lambda}_i+\sigma_v^2,i=1,2,\cdots,K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1044399999999999em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>σ</mi><mi>v</mi><mn>2</mn></msubsup><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mi>K</mi><mo>+</mo><mn>1</mn><mi mathvariant="normal">，</mi><mi>K</mi><mo>+</mo><mi mathvariant="normal">，</mi><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">{\lambda}_i=\sigma_v^2,i=K+1，K+，\cdots,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></p></blockquote><blockquote><p>经标准化的样本数据的协方差矩阵就是原始样本数据的样本矩阵</p><p>标准化是指正态化，即将原始数据处理成均值为0，方差为1的标准数据。</p></blockquote><blockquote><p>R的M个特征值中与信号有关的仅有K个，分别是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>λ</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_1,{\lambda}_2,\cdots,{\lambda}_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,其余的M-K个特征值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_{K+1},{\lambda}_{K+2},\cdots,{\lambda}_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>只与噪声有关。</p></blockquote><p>信号子空间用符号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">E_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>所表示，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>λ</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_1,{\lambda}_2,\cdots,{\lambda}_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应的特征向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">u_1,u_2,\cdots,u_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>生成的子空间，即</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub><mo>=</mo><mi>s</mi><mi>p</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">E_s=span</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">u_1,u_2,\cdots,u_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}</p><blockquote><p>信号子空间的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>λ</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>K</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_1,{\lambda}_2,\cdots,{\lambda}_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示的是大特征值，噪声子空间的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_{K+1},{\lambda}_{K+2},\cdots,{\lambda}_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示的是小特征值。</p></blockquote><p>噪声子空间用符号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">E_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>所表示，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>λ</mi><mrow><mi>K</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>λ</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">{\lambda}_{K+1},{\lambda}_{K+2},\cdots,{\lambda}_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应的特征向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">u_{K+1},\cdots,u_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>生成的子空间，即</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>N</mi></msub><mo>=</mo><mi>s</mi><mi>p</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">E_N=span</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>K</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>u</mi><mrow><mi>K</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">u_{K+1},u_{K+2},\cdots,u_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}</p><p><font color='red'><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">E_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>既与信号有关，也与噪声有关；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">E_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>仅与噪声有关。</font></p><p>定义矩阵</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>u</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>u</mi><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>M</mi></msub><mo stretchy="false">]</mo><mo>∈</mo><msup><mi>C</mi><mrow><mi>M</mi><mo>×</mo><mi>M</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">G=[u_{k+1},u_{k+2},\cdots,u_M]\in C^{M \times M-k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>G矩阵相当于噪声子空间构成的矩阵。</p><p>为什么要用噪声子空间作为G？</p><p>导向矢量和噪声子空间正交</p></blockquote><p>由于A是列满秩矩阵，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">R_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是满秩矩阵，所以有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>H</mi></msup><mi>G</mi><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mo>⇓</mo><mspace linebreak="newline"></mspace><msup><mi>G</mi><mi>H</mi></msup><mi>A</mi><mo>=</mo><msup><mi>G</mi><mi>H</mi></msup><mo stretchy="false">[</mo><mi>a</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mspace width="1em"/><mi>a</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mspace width="1em"/><mo>⋯</mo><mspace width="1em"/><mi>a</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mo>⇓</mo><mspace linebreak="newline"></mspace><msup><mi>G</mi><mi>H</mi></msup><mi>a</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mspace width="1em"/><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>K</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">A^HG=0     \\      \Downarrow \\    G^HA=G^H[a(\theta_1)\quad a(\theta_2) \quad \cdots \quad a(\theta_k)]=0\\    \Downarrow \\    G^Ha(\theta_k)=0, \quad k=1,2,\cdots,K.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">.</span></span></span></span></span></p><blockquote><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a(\theta_k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是阵列导向向量。</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>R</mi><mo>^</mo></mover><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><msup><mi>x</mi><mi>H</mi></msup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{R}=\frac{1}{N}\sum_{n=1}^N x(n)x^H(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0954490000000003em;vertical-align:-1.267113em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>可得到MUSIC谱估计为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>M</mi><mi>U</mi><mi>S</mi><mi>I</mi><mi>C</mi></mrow></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msup><mi>a</mi><mi>H</mi></msup><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><mi>H</mi></msup><mi>a</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mspace width="1em"/><mi>θ</mi><mo>∈</mo><mo stretchy="false">(</mo><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo separator="true">,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_{MUSIC}(\theta)=\frac{1}{a^H(\theta) \hat{G} \hat{G}^H a(\theta)} ,\quad \theta \in (-\frac{\pi}{2},\frac{\pi}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40821em;vertical-align:-1.08677em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.16323em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.767331em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">G</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">G</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.767331em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.08677em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">G</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span></span></span></span>是由自相关矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>R</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span></span></span></span>的特征值分解而得到。</p></blockquote><blockquote><p><font color='red'>在空间谱域求取谱函数最大值，其谱峰对应的角度即是来波方向角的估计值。</font></p></blockquote><div class='tip warning'>    <p>线阵的信号参数搜索范围为[-90°，90°]<p>    <p>面阵的信号参数搜索范围为[-180°，180°]<p></div><p>由于实际中要估计信号源的个数，因此估计的越准确误差越小，所以估计信号源的算法也很重要。</p><div class='tip warning'><p>信号源估计算法还未理解透彻，待续....<p></div><p><font color='blue'>AIC准则估计信号源个数的算法为</font></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>I</mi><mi>C</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>2</mn><mi>l</mi><mi>n</mi><mo stretchy="false">[</mo><mo stretchy="false">(</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mi>M</mi></munderover><msubsup><mi>λ</mi><mi>i</mi><mfrac><mn>1</mn><mrow><mi>M</mi><mo>−</mo><mi>k</mi></mrow></mfrac></msubsup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mrow><mi>M</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>λ</mi><mi>i</mi></msub><msup><mo stretchy="false">]</mo><mrow><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mi>N</mi></mrow></msup><mo>+</mo><mn>2</mn><mi>k</mi><mo stretchy="false">(</mo><mn>2</mn><mi>M</mi><mo>−</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">AIC(k)=-2ln[(\prod_{i=k+1}^{M} \lambda_{i}^{\frac{1}{M-k}})/(\frac{1}{M-k})\sum_{i=k+1}^{M} \lambda_i]^{(M-k)N}+2k(2M-K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1887800000000004em;vertical-align:-1.360444em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.360444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.218285em;"><span style="top:-2.7231360000000002em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.6272650000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.40352142857142853em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.360444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span></span></p><p>信号源个数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mspace width="1em"/><mspace width="1em"/><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>A</mi><mi>I</mi><mi>C</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\quad \quad \quad \hat{K}=min\{AIC(k),k=0,1,\cdots M-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span></p><p><font color='blue'>MDL准则估计算法可表示为</font></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>D</mi><mi>L</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>l</mi><mi>n</mi><mo stretchy="false">[</mo><mo stretchy="false">(</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mi>M</mi></munderover><msubsup><mi>λ</mi><mi>i</mi><mfrac><mn>1</mn><mrow><mi>M</mi><mo>−</mo><mi>k</mi></mrow></mfrac></msubsup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mrow><mi>M</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>λ</mi><mi>i</mi></msub><msup><mo stretchy="false">]</mo><mrow><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mi>N</mi></mrow></msup><mo>+</mo><mfrac><mi>k</mi><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>2</mn><mi>M</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mi>l</mi><mi>n</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">MDL(k)=-ln[(\prod_{i=k+1}^M \lambda_{i}^{\frac{1}{M-k}})/(\frac{1}{M-k})\sum_{i=k+1}^M \lambda_i]^{(M-k)N} +\frac{k}{2}(2M-k)lnN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1887800000000004em;vertical-align:-1.360444em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.360444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.218285em;"><span style="top:-2.7231360000000002em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.6272650000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.40352142857142853em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.360444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>信号源个数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mspace width="1em"/><mspace width="1em"/><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>M</mi><mi>D</mi><mi>L</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\quad \quad \quad \hat{K}=min \{MDL(k),k=0,1,\cdots,M-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span></p><h1>MATLAB仿真</h1><ol><li>采用阵元间隔为半个波长的5阵元均匀线阵，1个远场窄带信号从21°的方向入射到阵列，信号是归一化频率为0.1的纯载波，中频信号的信噪比为12dB（本小节的信噪比均指中频信号的信噪比），天线阵的采样快拍数是100。</li></ol><div class='tip warning'><p>下面这个程序，有些地方多余，需要进一步的改进<p></div><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%仿真黄永兢的仿真数据结果图2-4</span></span><br><span class="line"><span class="comment">%music算法部分，候补上MVDR算法</span></span><br><span class="line">clear all;clc;</span><br><span class="line">derad = <span class="built_in">pi</span>/<span class="number">180</span>;<span class="comment">%角度转换弧度</span></span><br><span class="line">N = <span class="number">5</span>;<span class="comment">%阵元个数</span></span><br><span class="line">M = <span class="number">1</span>;<span class="comment">%信源数目</span></span><br><span class="line">theta = [<span class="number">21</span>];<span class="comment">%待估计的角度</span></span><br><span class="line">snr = <span class="number">12</span>;<span class="comment">%信噪比</span></span><br><span class="line">K = <span class="number">100</span>;<span class="comment">%快拍数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%%阵元间隔为半个波长的5阵元均匀线阵</span></span><br><span class="line"><span class="comment">%syms q;%设波长为q</span></span><br><span class="line">q = <span class="number">0.5</span>;</span><br><span class="line">d = <span class="number">0</span>:q:(N<span class="number">-1</span>)*q;<span class="comment">%设置步长</span></span><br><span class="line">A=<span class="built_in">exp</span>(<span class="number">-1</span><span class="built_in">i</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d.&#x27;*<span class="built_in">sin</span>(theta*derad));<span class="comment">%方向矢量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%%%构建信号模型</span></span><br><span class="line"><span class="comment">%实际上还是基础的公式</span></span><br><span class="line"><span class="comment">%X = A*S+noise;</span></span><br><span class="line">S = <span class="built_in">randn</span>(M,K);<span class="comment">%信源信号   100快拍数划分信号</span></span><br><span class="line">X = A*S;</span><br><span class="line">X1 = awgn(X,snr,<span class="string">&#x27;measured&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%计算协方差矩阵</span></span><br><span class="line">Rxx = X1*X1&#x27;/K;</span><br><span class="line"><span class="comment">%&quot;.&#x27;&quot;是转置，&quot;&#x27;&quot;是共轭转置</span></span><br><span class="line"><span class="comment">%特征值分解</span></span><br><span class="line">[EV,D] = eig(Rxx);<span class="comment">%特征值分解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%eig函数的用法</span></span><br><span class="line"><span class="comment">%求出的特征值会自动升序。</span></span><br><span class="line"><span class="comment">%[V,D] = eig(A)</span></span><br><span class="line"><span class="comment">%其中的V是A的特征向量，D是特征值(对角阵)</span></span><br><span class="line"></span><br><span class="line">EVA = <span class="built_in">diag</span>(D)&#x27;;<span class="comment">%取对角线的数据并共轭转置</span></span><br><span class="line">[EVA,I] = <span class="built_in">sort</span>(EVA);</span><br><span class="line"><span class="comment">%sort函数可以按从小到大排列数，默认是列排序</span></span><br><span class="line"><span class="comment">%EVA表示输出的值（按从小到大）</span></span><br><span class="line"><span class="comment">%I表示输出排序后值原来的位置，记忆特征值原来的位置，为下一步做准备</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%这一步的作用是把特征向量按照从大到小进行排列，I的作用就是是变换后的特征向量的顺序和上一步特征值的顺序保持一致，一一对应。</span></span><br><span class="line"><span class="comment">%由于fliplr括号里面特征向量是按照从小到大的顺序，所以再通过fliplr函数进行翻转，使之变成特征值大的元素对应的特征向量按照从小到大的原则排序。</span></span><br><span class="line"><span class="comment">%处理完之后EV里的特征向量其实就变成了前面是信号子空间，后面是噪声子空间里的向量。</span></span><br><span class="line">EV = <span class="built_in">fliplr</span>(EV(:,I));<span class="comment">%对应特征矢量排序，特征向量根据特征值排列</span></span><br><span class="line"><span class="comment">%fliplr函数作用是翻转矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%遍历每个角落，计算空间谱</span></span><br><span class="line"><span class="keyword">for</span> iang = <span class="number">1</span>:<span class="number">361</span><span class="comment">%360°全覆盖测角</span></span><br><span class="line">    <span class="built_in">angle</span>(iang)=(iang<span class="number">-181</span>)/<span class="number">2</span>;</span><br><span class="line">    phim=derad*<span class="built_in">angle</span>(iang);</span><br><span class="line">    a=<span class="built_in">exp</span>(<span class="number">-1</span><span class="built_in">i</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d*<span class="built_in">sin</span>(phim)).&#x27;;</span><br><span class="line">    En=EV(:,M+<span class="number">1</span>:N);     <span class="comment">%取矩阵的第M+1到N列组成噪声子空间</span></span><br><span class="line">    Pmusic(iang)=<span class="number">1</span>/(a&#x27;*En*En&#x27;*a);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Pmusic=<span class="built_in">abs</span>(Pmusic);<span class="comment">%提取模值</span></span><br><span class="line">Pmmax=<span class="built_in">max</span>(Pmusic);<span class="comment">%求出最大值</span></span><br><span class="line">Pmusic=<span class="number">10</span>*<span class="built_in">log10</span>(Pmusic/Pmmax);      <span class="comment">%归一化的处理</span></span><br><span class="line">h=<span class="built_in">plot</span>(<span class="built_in">angle</span>,Pmusic);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;MUSIC&#x27;</span>)</span><br><span class="line">set(h,<span class="string">&#x27;Linewidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;入射角/(degree)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;空间谱/(dB)&#x27;</span>);</span><br><span class="line">set(gca,<span class="string">&#x27;XTick&#x27;</span>,[<span class="number">-100</span>:<span class="number">20</span>:<span class="number">100</span>]);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210320104613.png" alt=""></p><div class='tip success'><p>改进的程序<p></div><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%music算法的改进</span></span><br><span class="line">clear all;clc;</span><br><span class="line">derad=<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">N = <span class="number">5</span>;</span><br><span class="line">M = <span class="number">1</span>;</span><br><span class="line">theta = [<span class="number">21</span>];<span class="comment">%待测角度</span></span><br><span class="line">snr = <span class="number">12</span>;</span><br><span class="line">K = <span class="number">100</span>;<span class="comment">%快拍数</span></span><br><span class="line">dd = <span class="number">0.5</span>;</span><br><span class="line">d = <span class="number">0</span>:dd:(N<span class="number">-1</span>)*dd;<span class="comment">%步长</span></span><br><span class="line">A=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d.&#x27;*<span class="built_in">sin</span>(theta*derad));<span class="comment">%方向矢量</span></span><br><span class="line"></span><br><span class="line">S = <span class="built_in">randn</span>(M,K);</span><br><span class="line">X = A * S;</span><br><span class="line">Xn = awgn(X,snr,<span class="string">&#x27;measured&#x27;</span>);<span class="comment">%构成的信号</span></span><br><span class="line"></span><br><span class="line">Rxx = Xn*Xn&#x27;/K;</span><br><span class="line">[EV,D] = eig(Rxx);<span class="comment">%特征值分解，并且按照从小到大排序</span></span><br><span class="line"></span><br><span class="line">EV = <span class="built_in">fliplr</span>(EV);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iange = <span class="number">1</span>:<span class="number">361</span>;</span><br><span class="line">    <span class="built_in">angle</span>(iange) = (iange<span class="number">-181</span>)/<span class="number">2</span>;</span><br><span class="line">    phim = derad*<span class="built_in">angle</span>(iange);</span><br><span class="line">    a = <span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d*<span class="built_in">sin</span>(phim)).&#x27;;<span class="comment">%保证是列向量</span></span><br><span class="line">    G = EV(:,M+<span class="number">1</span>:N);</span><br><span class="line">    P_music(iange) = <span class="number">1</span>/(a&#x27;*G*G&#x27;*a);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">P_music = <span class="built_in">abs</span>(P_music);<span class="comment">%提取模值</span></span><br><span class="line">Pm_max = <span class="built_in">max</span>(P_music);</span><br><span class="line">P_music = <span class="number">10</span>*<span class="built_in">log10</span>(P_music/Pm_max);</span><br><span class="line">h = <span class="built_in">plot</span>(<span class="built_in">angle</span>,P_music);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;MUSIC&#x27;</span>);</span><br><span class="line">set(h,<span class="string">&#x27;Linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;入射角/(degree)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;空间谱/(dB)&#x27;</span>);</span><br><span class="line">set(gca,<span class="string">&#x27;XTick&#x27;</span>,[<span class="number">-100</span>:<span class="number">20</span>:<span class="number">100</span>]);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210322110314.png" alt=""></p><p>不同阵元数对MUSIC算法的影响</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%阵元数不同的情况下</span></span><br><span class="line"></span><br><span class="line">clear all;clc</span><br><span class="line">derad = <span class="built_in">pi</span> / <span class="number">180</span>;<span class="comment">%弧度转换</span></span><br><span class="line">N = [<span class="number">5</span> <span class="number">10</span> <span class="number">20</span>];<span class="comment">%阵元个数</span></span><br><span class="line">M = <span class="number">3</span>;<span class="comment">%信源数目</span></span><br><span class="line">doa = [<span class="number">-30</span> <span class="number">0</span> <span class="number">60</span>]*derad;<span class="comment">%待测角度</span></span><br><span class="line">snr = <span class="number">10</span>;<span class="comment">%信噪比</span></span><br><span class="line">K = <span class="number">100</span>;<span class="comment">%快拍数</span></span><br><span class="line">dd = <span class="number">0.5</span>;<span class="comment">%阵元间隔（假设值）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(N)</span><br><span class="line">    d = <span class="number">0</span>:dd:(<span class="built_in">max</span>(N)<span class="number">-1</span>)*dd;</span><br><span class="line">    <span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">length</span>(doa)</span><br><span class="line">        A(:,ii)=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d.&#x27;*<span class="built_in">sin</span>(doa(ii)));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    S = <span class="built_in">randn</span>(M,K);</span><br><span class="line">    X = A(<span class="number">1</span>:N(<span class="built_in">i</span>),:) * S;</span><br><span class="line">    Xn = awgn(X,snr,<span class="string">&#x27;measured&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    Rxx = Xn*Xn&#x27;/K;</span><br><span class="line">    [EV,D] = eig(Rxx);</span><br><span class="line">    </span><br><span class="line">    EV  = <span class="built_in">fliplr</span>(EV);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> iangle= <span class="number">1</span>:<span class="number">361</span></span><br><span class="line">        <span class="built_in">angle</span>(iangle) = (iangle<span class="number">-181</span>)/<span class="number">2</span>;</span><br><span class="line">        phim = derad*<span class="built_in">angle</span>(iangle);</span><br><span class="line">        a = <span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d(<span class="number">1</span>:N(<span class="built_in">i</span>))*<span class="built_in">sin</span>(phim)).&#x27;;</span><br><span class="line">        En = EV(:,M+<span class="number">1</span>:N(<span class="built_in">i</span>));</span><br><span class="line">        pmusic(<span class="built_in">i</span>,iangle)=<span class="number">1</span>/(a&#x27;*En*En&#x27;*a);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    pmusic=<span class="built_in">abs</span>(pmusic);</span><br><span class="line">    pmmax = <span class="built_in">max</span>(pmusic,[],<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> i3 = <span class="number">1</span>:<span class="number">1</span>:<span class="built_in">size</span>(pmusic)</span><br><span class="line">   sp(i3,:) = pmusic(i3,:)./pmmax(i3); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Pmusic = <span class="number">10</span>*<span class="built_in">log10</span>(sp);</span><br><span class="line"><span class="built_in">plot</span>(<span class="built_in">angle</span>,Pmusic,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;阵元数N = 5&#x27;</span>,<span class="string">&#x27;阵元数N = 10&#x27;</span>,<span class="string">&#x27;阵元数N = 20&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;仿真实验2：不同阵元数下MUSIC算法性能比较&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;入射角度/degree&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;归一化空间谱/dB&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210531101205.png" alt=""></p><p>不同信噪比下对MUSIC算法的影响</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%信噪比不同的比较</span></span><br><span class="line">clear all;clc</span><br><span class="line">N = <span class="number">10</span>;<span class="comment">%阵元数</span></span><br><span class="line">derad = <span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">M = <span class="number">3</span>;<span class="comment">%信源数目</span></span><br><span class="line">doa = [<span class="number">-30</span> <span class="number">20</span> <span class="number">60</span>]/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">snr = [<span class="number">5</span> <span class="number">10</span> <span class="number">20</span>];</span><br><span class="line">dd = <span class="number">0.5</span>;</span><br><span class="line">K = <span class="number">100</span>;<span class="comment">%快拍数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(snr)</span><br><span class="line">    d = <span class="number">0</span>:dd:(N<span class="number">-1</span>)*dd;<span class="comment">%间距</span></span><br><span class="line">    <span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">length</span>(doa)</span><br><span class="line">        A(:,ii) = <span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d.&#x27;*<span class="built_in">sin</span>(doa(ii)));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line"><span class="comment">%     S = sqrt();</span></span><br><span class="line">    snr1 = snr(<span class="built_in">i</span>);</span><br><span class="line">    S = <span class="built_in">randn</span>(M,K);</span><br><span class="line">    X = A*S;</span><br><span class="line">    Xn = awgn(X,snr1,<span class="string">&#x27;measured&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    Rxx = Xn*Xn&#x27;/K;</span><br><span class="line">    [EV,D] = eig(Rxx);</span><br><span class="line">    </span><br><span class="line">    EV  = <span class="built_in">fliplr</span>(EV);</span><br><span class="line">    </span><br><span class="line"><span class="comment">%     theta = -90:0.1:90;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> iangle= <span class="number">1</span>:<span class="number">361</span></span><br><span class="line">        <span class="built_in">angle</span>(iangle) = (iangle<span class="number">-181</span>)/<span class="number">2</span>;</span><br><span class="line">        phim = derad*<span class="built_in">angle</span>(iangle);</span><br><span class="line"><span class="comment">%         a=exp(-j*2*pi*d*sin(pi*theta(i3)/180)).&#x27;;</span></span><br><span class="line">        a = <span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*d*<span class="built_in">sin</span>(phim)).&#x27;;</span><br><span class="line">        En = EV(:,M+<span class="number">1</span>:N);</span><br><span class="line">        pmusic(<span class="built_in">i</span>,iangle)=<span class="number">1</span>/(a&#x27;*En*En&#x27;*a);</span><br><span class="line"><span class="comment">%         Pmusic(iange) = 1/(a&#x27;*En*En&#x27;*a);</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">%     pmusic = 10*log(pmusic/max(pmusic));</span></span><br><span class="line"><span class="comment">%     Pmusic(ii,:) = pmusic;</span></span><br><span class="line"><span class="comment">%     pmusic = 10*log10(pmusic/pmmax);</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    pmusic=<span class="built_in">abs</span>(pmusic);</span><br><span class="line">    pmmax = <span class="built_in">max</span>(pmusic,[],<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> i3 = <span class="number">1</span>:<span class="number">1</span>:<span class="built_in">size</span>(pmusic)</span><br><span class="line">   sp(i3,:) = pmusic(i3,:)./pmmax(i3); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Pmusic = <span class="number">10</span>*<span class="built_in">log10</span>(sp);</span><br><span class="line"><span class="built_in">plot</span>(<span class="built_in">angle</span>,Pmusic,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">% plot(theta,Pmusic(1,:),theta,Pmusic(2,:),theta,Pmusic(3,:),&#x27;LineWidth&#x27;,2); </span></span><br><span class="line"><span class="comment">% axis([-100 100 -110 10]);</span></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;SNR = 5&#x27;</span>,<span class="string">&#x27;SNR = 10&#x27;</span>,<span class="string">&#x27;SNR = 20&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;NorthWest&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;仿真实验1：不同信噪比下MUSIC算法性能比较&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;入射角度/degree&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;归一化空间谱/dB&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210531101302.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210315114937.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210316095024.jpg" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;MUSIC算法&lt;/h1&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;以下部分是基于线阵阵列！！！还有许多不完善的地方，待续···&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;假设入射到天线阵列的近似为远场窄带信号，它们分别来自&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mo separator=&quot;true&quot;&gt;⋅&lt;/mo&gt;&lt;mo separator=&quot;true&quot;&gt;⋅&lt;/mo&gt;&lt;mo separator=&quot;true&quot;&gt;⋅&lt;/mo&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\theta_1,\theta_2,···,\theta_K&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;θ&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;θ&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;⋅&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;⋅&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;⋅&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;θ&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.32833099999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.07153em;&quot;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;共K个方向，则有&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x(n)=As(n)+v(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x(n)是天线阵各阵元的接收数据向量，M*1&lt;/p&gt;
&lt;p&gt;A是阵列的方向矩阵，M*K&lt;/p&gt;
&lt;p&gt;s(n)为空间信号向量,K*1&lt;/p&gt;
&lt;p&gt;v(n)是白噪声向量，M*1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接收信号向量的空间相关矩阵可表示为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/msup&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R=E[X(n)X(n)^H]=AR_sA^H+\sigma^2I&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.0913309999999998em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.05764em;&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07847em;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07847em;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8413309999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.08125em;&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.991331em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.151392em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8413309999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.08125em;&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;σ&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07847em;&quot;&gt;I&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I是单位矩阵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;τ&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;τ&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mfrac&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;/mfrac&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A=e^{-jw_0\tau}=e^{-j2 \pi f\tau}=e^{-j2\pi \frac{c}{\lambda}x_ksin{\theta_i}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.824664em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.824664em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.02691em;&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.31731428571428577em;&quot;&gt;&lt;span style=&quot;top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.143em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.1132em;&quot;&gt;τ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8491079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8491079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.03588em;&quot;&gt;π&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.1132em;&quot;&gt;τ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.849108em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.849108em;&quot;&gt;&lt;span style=&quot;top:-3.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.03588em;&quot;&gt;π&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mopen nulldelimiter sizing reset-size3 size6&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.6915428571428572em;&quot;&gt;&lt;span style=&quot;top:-2.656em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;λ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.2255000000000003em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line mtight&quot; style=&quot;border-bottom-width:0.049em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.384em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.344em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter sizing reset-size3 size6&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.3448em;&quot;&gt;&lt;span style=&quot;top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15122857142857138em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.02778em;&quot;&gt;θ&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.3280857142857143em;&quot;&gt;&lt;span style=&quot;top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.143em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://stardust14.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://stardust14.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>DSP</title>
    <link href="http://stardust14.com/2021/03/08/DSP/"/>
    <id>http://stardust14.com/2021/03/08/DSP/</id>
    <published>2021-03-08T03:18:45.000Z</published>
    <updated>2021-04-15T09:01:39.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>DSP入门</h1><blockquote><p>本次DSP是数字信号处理器</p></blockquote><p>DSP——数据分析处理</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210308114041.png" alt=""></p><p>数字信号处理器的特点</p><ul><li>丰富的外部接口+DMA</li><li>哈佛+多总线结构</li><li>实时中断系统</li><li>硬件乘法器</li><li>丰富的并行机制</li><li>灵活的寻址方式</li></ul><p>信号处理的核心算法：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mi>h</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(n)=\sum_{i=0}^{N-1}x(n-i)h(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1060050000000006em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>DSP C6748</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;DSP入门&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本次DSP是数字信号处理器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DSP——数据分析处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20210308114041.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;数字信号处理器的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丰富的外部接口+DMA&lt;/li&gt;
&lt;li&gt;哈佛+多总线结构&lt;/li&gt;
&lt;li&gt;实时中断系统&lt;/li&gt;
&lt;li&gt;硬件乘法器&lt;/li&gt;
&lt;li&gt;丰富的并行机制&lt;/li&gt;
&lt;li&gt;灵活的寻址方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号处理的核心算法：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/munderover&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y(n)=\sum_{i=0}^{N-1}x(n-i)h(i)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:3.1060050000000006em;vertical-align:-1.277669em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mop op-limits&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.8283360000000004em;&quot;&gt;&lt;span style=&quot;top:-1.872331em;margin-left:0em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.05em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mrel mtight&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.050005em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.05em;&quot;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mop op-symbol large-op&quot;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-4.300005em;margin-left:0em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3.05em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mbin mtight&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.277669em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DSP C6748&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="dsp" scheme="http://stardust14.com/categories/dsp/"/>
    
    
    <category term="dsp" scheme="http://stardust14.com/tags/dsp/"/>
    
  </entry>
  
  <entry>
    <title>4D毫米波雷达</title>
    <link href="http://stardust14.com/2021/02/26/4D%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE/"/>
    <id>http://stardust14.com/2021/02/26/4D%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE/</id>
    <published>2021-02-26T12:53:33.000Z</published>
    <updated>2021-02-26T14:59:39.885Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>随着知识的积累再填充，更新待续~~</p></blockquote><h1>毫米波和4D毫米波</h1><p>毫米波：</p><ol><li>工作在毫米波波段（millimeter wave ）探测的雷达。工作频段一般为30GHz ~ 300 GHz， 波长 1~10mm，介于微波和厘米波之间，兼具有微波雷达和光电雷达的一些优点；</li><li>毫米波雷达相比厘米波雷达具有体积小、易集成和空间分辨率高的特点。</li><li>车载毫米波雷达的工作频率为一般为 24GHz 和77GHz ；</li></ol><p>4D毫米波雷达通过物理或虚拟软件增加毫米波雷达发射&amp;接收通道的个数，可在很大程度上提高毫米波雷达的感知角度、感知距离、进而弥补毫米波雷达无法有效感知纵向距离的问题，从而提供与激光雷达相当的点云密度信号。</p><p>4D毫米波雷达可在恶劣的天气条件下提供更大的范围，视野，感知力和承受能力。但是目前还未能量产；主要是用于弥补传统的毫米波雷达测量误差范围大、无法识别静止物体的缺点。</p><p><strong>传统毫米波雷达（Current Radars）：<strong>探测角度小，且呈现出锥状的波束，使得其测量误差相对较大，且</strong>难以探测静止的物体</strong>。</p><p>**4D毫米波雷达（4D Imaging Radar）：**探测角度相对较大，且测量误差相对较小。由于增加了“探测物体高度”第四个指标，<strong>能够实现测量静止物体的功能</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;随着知识的积累再填充，更新待续~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;毫米波和4D毫米波&lt;/h1&gt;
&lt;p&gt;毫米波：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工作在毫米波波段（millimeter wave ）探测的雷达。工作频段一般为30GHz ~ 300 GHz， 波长 1~10mm，介于微波和厘米波之间，兼具有微波雷达和光电雷达的一些优点；&lt;/li&gt;
&lt;li&gt;毫米波雷达相比厘米波雷达具有体积小、易集成和空间分辨率高的特点。&lt;/li&gt;
&lt;li&gt;车载毫米波雷达的工作频率为一般为 24GHz 和77GHz ；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4D毫米波雷达通过物理或虚拟软件增加毫米波雷达发射&amp;amp;接收通道的个数，可在很大程度上提高毫米波雷达的感知角度、感知距离、进而弥补毫米波雷达无法有效感知纵向距离的问题，从而提供与激光雷达相当的点云密度信号。&lt;/p&gt;
&lt;p&gt;4D毫米波雷达可在恶劣的天气条件下提供更大的范围，视野，感知力和承受能力。但是目前还未能量产；主要是用于弥补传统的毫米波雷达测量误差范围大、无法识别静止物体的缺点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传统毫米波雷达（Current Radars）：&lt;strong&gt;探测角度小，且呈现出锥状的波束，使得其测量误差相对较大，且&lt;/strong&gt;难以探测静止的物体&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;**4D毫米波雷达（4D Imaging Radar）：**探测角度相对较大，且测量误差相对较小。由于增加了“探测物体高度”第四个指标，&lt;strong&gt;能够实现测量静止物体的功能&lt;/strong&gt;。&lt;/p&gt;
</summary>
    
    
    
    <category term="科普" scheme="http://stardust14.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="毫米波雷达" scheme="http://stardust14.com/tags/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE/"/>
    
  </entry>
  
  <entry>
    <title>阵列信号</title>
    <link href="http://stardust14.com/2021/02/16/%E9%98%B5%E5%88%97%E4%BF%A1%E5%8F%B7/"/>
    <id>http://stardust14.com/2021/02/16/%E9%98%B5%E5%88%97%E4%BF%A1%E5%8F%B7/</id>
    <published>2021-02-16T03:54:30.000Z</published>
    <updated>2021-03-05T03:50:00.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>协方差：一般用来刻画两个随机变量的相似程度。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;p&gt;协方差：一般用来刻画两个随机变量的相似程度。&lt;/p&gt;
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DSP杂烩</title>
    <link href="http://stardust14.com/2020/12/04/DSP%E6%9D%82%E7%83%A9/"/>
    <id>http://stardust14.com/2020/12/04/DSP%E6%9D%82%E7%83%A9/</id>
    <published>2020-12-04T01:49:07.000Z</published>
    <updated>2020-12-06T07:33:34.808Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>随手记</h1><p>一些知识和疑问</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201204095119.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201204100437.png" alt=""></p><blockquote><p>有一个疑问：之间的衔接关系！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201205171135.png" alt="image-20201205171133171"></p><h1>傅里叶变换的理解</h1><p>把一个信号的全部信息全部提取出来，在频率上说：w（频率）就表示的位置，振幅表示的强度，而相位则是表示的是信息的反转与否（波的位置）。</p><p>用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">⋅</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">⋅</mo><mi>t</mi><mo>+</mo><mi>ϕ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A·cos(w·t+\phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span></span></span></span>在时域上，w与时间建立起了联系，相位的改变就是在时间轴上的平移。所以，在频域上的相位就是</p><p>换个角度（域）看问题！！！！</p><p>若一个信号可以分解成正弦函数或着指数形式的组合，那么叠加的函数的相位可能会不同，在同一频率w下的幅度和相位一一对应。那么可以用这三个基本的信息，获取到全部的信息。（有待加深…）</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;随手记&lt;/h1&gt;
&lt;p&gt;一些知识和疑问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201204095119.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201204100437.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个疑问：之间的衔接关系！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201205171135.png&quot; alt=&quot;image-20201205171133171&quot;&gt;&lt;/p&gt;
&lt;h1&gt;傅里叶变换的理解&lt;/h1&gt;
&lt;p&gt;把一个信号的全部信息全部提取出来，在频率上说：w（频率）就表示的位置，振幅表示的强度，而相位则是表示的是信息的反转与否（波的位置）。&lt;/p&gt;
&lt;p&gt;用&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;⋅&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;⋅&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A·cos(w·t+\phi)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;⋅&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02691em;&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;⋅&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;ϕ&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;在时域上，w与时间建立起了联系，相位的改变就是在时间轴上的平移。所以，在频域上的相位就是&lt;/p&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="dsp" scheme="http://stardust14.com/tags/dsp/"/>
    
  </entry>
  
  <entry>
    <title>Quartus记录</title>
    <link href="http://stardust14.com/2020/11/30/Quartus%E8%AE%B0%E5%BD%95/"/>
    <id>http://stardust14.com/2020/11/30/Quartus%E8%AE%B0%E5%BD%95/</id>
    <published>2020-11-30T11:42:57.000Z</published>
    <updated>2020-12-21T11:08:55.246Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>基础知识</h1><ol><li>模块语句及其表达方式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130195313.png" alt=""></p><p>任一可综合的最基本的模块都必须以关键词module开头。</p><ul><li>模块名最好根据相应电路的功能来确定。如4位二进制计数器用counter4b。</li><li>模块端口列表中须列出此模块的所有输入、输出或双向端口名，端口名间用逗号分开，括号外加分号。</li><li>endmodule是模块结束语句关键词，旁边不加任何标点符号。对模块端口及其功能的描述语句都 必须放在模块语句module_endmodule之间。</li></ul><ol start="2"><li>端口语句、端口信号名和端口模式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130195425.png" alt=""></p><ul><li><p>输入端口：input</p></li><li><p>输出端口：output</p></li><li><p>双向端口：inout</p></li></ul><ol start="3"><li>逻辑操作符</li></ol><p>Verilog的逻辑操作符大部分与C语言一致，比如：</p><p>逻辑按位与： &amp;</p><p>逻辑按位或： |</p><p>逻辑按位异或：^</p><p>逻辑按位取非：~</p><p>但Verilog也有自己的扩展，比如</p><p>逻辑按位 与非 ~&amp;</p><p>逻辑按位 或非 ~|</p><p>逻辑按位 同或 ~^</p><p>这里“按位”的意思，是可以对多位逻辑信号按位进行逻辑运算</p><ol start="4"><li>连续赋值语句</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130195603.png" alt=""></p><ul><li><p>assign引导的赋值负责描述模块内部的逻辑功能和电路结构。</p></li><li><p>assign引导的赋值语句属于并行赋值语句，无论有多少行语句，都是同时执行的，与语句的前后次序无关。</p></li><li><p>当等式右端的驱动表达式（赋值源）中任一信号发生变化时，此表达式即被重新计算一遍。</p></li></ul><p>（1）当等号右侧的驱动表达式中的任一信号发生变化时，此表达式即被计算一边，并将获得的数据立即赋给等号左侧的变量名标示的目标变量。<br>（2）当一个模块中有多个assign语句时，这些语句为并行，同一目标变量名下是不允许有多个不同赋值表达式。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130210254.png" alt=""></p><div class="note info flat"><p>注意：</p><ul><li><p>加入[延时]，表示经过指定延时后再赋值，</p></li><li><p>但这个延时值在综合器中是被忽略的，不参与综合。</p></li><li><p>只对仿真器有效</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130200506.png" alt=""></p></li><li><p>第二句当右侧表达式中的A或B中任一变量发生变化后，即刻算出变化后的值，但需要等待6个时间单 元之后才将运算结果赋值给左侧的目标变量R1。这个延时称为惯性延时。</p></li><li><p>时间单元的大小则由上一语句的关键词“`timescale”在编译时指定。此句表示，仿真的基本时间单元 是10ns，仿真时间的精度是100ps。</p></li><li><p>在这个时间划分单元下，语句“assign #6 R1 = A &amp; B”在执行后，一旦计算出A &amp; B的值，还要再等待6 个时间单元，也就是60ns后才将此值赋给R1。</p></li><li><p>需要注意的是，在timescale前的符号是反单引号（`），而不是单引号（‘）。在标准键盘区最左上方</p></li></ul><p><font color='red'>程序名和该程序的模块名必须一致！！！</font></p></div><ol start="5"><li>reg型变量定义</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130203641.png" alt=""></p><p>（1）reg: 寄存器型变量；</p><p>（2）在过程语句always@引导的顺序语句中, 被赋值信号规定必须是reg型变量；<br>（3）输入或双向口信号不能定义为reg型。</p><ol start="6"><li>过程语句</li></ol><p>Verilog中有两类能引导顺序语句的过程语句，always在可综合语句 中最为常用，另一类过程语句是initial语句。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130203738.png" alt=""></p><p>当敏感信息列表里发生变化时，就会向下执行</p><ol start="7"><li>块语句begin _end</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130204059.png" alt=""></p><ul><li><p>块语句begin end仅限于在always引导的过程语句结构中使用，只相当于一个括号。</p></li><li><p>以上方括号中的“：块名”可以省略</p></li></ul><ol start="8"><li>case条件语句</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130204059.png" alt=""></p><blockquote><p>实际就是case判断</p></blockquote><ol start="9"><li>Verilog的四种逻辑状态</li></ol><p>Verilog有四种基本数值：</p><p>（1）0：含义有四个，即二进制数0、低电平、逻辑0，事件为伪的判断结果。</p><p>（2）1：含义也有四个，即二进制数1、高电平、逻辑1、事件为真的判断结果。</p><p>（3）z或Z。高阻态，或高阻值。</p><p>（4）x或X。不确定，或未知的逻辑状态。x与z大小写都不分。<br>高阻值还可以用问号“？”来表示，但问号“？”还有别的含义和用处，即代 表“不关心”的意思。因此可以用问号“？”替代一些位值，以表示在逻辑关系中对这些位不在乎是什么值。</p><ol start="10"><li>并位操作运算符</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130204711.png" alt=""></p><ol start="11"><li>Verilog的数字表达形式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130204754.png" alt=""></p><p>（1）B：二进制， O：八进制，H：十六进制，D：十进制</p><p>（2）不分大小写，如：2’b10, 4’hA等</p><p>（3）sb定义有符号二进制数：8’sb10111011，最高位1是符号。</p><ol start="12"><li>按位逻辑操作符</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130205909.png" alt=""></p><p>如果两个操作数位矢具有不同长度，综合器将自动根据最长位的操作数的位数， 把较短的数据按<strong>左端</strong>补0对齐的规则进行运算操作。</p><ol start="13"><li>等式操作符</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130205744.png" alt=""></p><ul><li>Verilog中任何变量有4个状态：0；1；z (高阻态)；x (不确定或未知状态)</li><li>==：如果其中有x或z, 就判定为假；<code>===：</code>将x或z都当成确定的值进行比较。</li></ul><ol start="14"><li>wire定义网线型变量</li></ol><p>（1）如果assign语句中需要有端口以外的信号或连接线性质的变量（由于 端口都已默认为网线型变量），则必须用网线型变量定义语句事先给出显式<br>定义。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201090859.png" alt=""></p><p>（2）用wire定义的网线型变量可在任何类型的表达式或赋值语句（包括连续赋值和过程赋值语句）中用作输入信号，也可以在连续赋值语句或实体元件例化中用作输出信号。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201090843.png" alt=""></p><ol start="15"><li>if条件语句</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130211339.png" alt=""></p><ol start="16"><li>过程赋值语句</li></ol><ul><li>阻塞式赋值：如y=b; 一旦执行完当前的赋值语句，赋值目标变量 y即刻获得来自等号右侧表达式的计算值。如果在一个块语句中 含有多条阻塞赋值语句，而当执行到其中某条赋值语句时，其他语句被禁止执行，这时其他语句如同被阻塞了一样。</li><li>非阻塞式赋值：如y&lt;=b;在执行当前语句时，对于块中的其他语句的执行情况一律不加限制。</li></ul><ol start="17"><li>数据类型表示方式</li></ol><ul><li>SEL[1:0]:二进制矢量位</li><li><ul><li>（SEL==2），数据类型不匹配，但Verilog综合器会自动使其匹配，将其中的 整数2变换成与SEL[1:0]同类型的二进制数2’b10。。</li></ul></li><li><ul><li>当所赋的值大于变量已定义的矢量位可能的值，综合器会首先将赋 值符号右侧的数据折算成二进制数，然后根据被赋值变量所定义的 位数，<strong>向左</strong>截去多余的数位（相当于截去高位）</li></ul></li><li><ul><li>比如Y[1:0], 当赋值Y&lt;=9时，（9=4’b1001）,编译后，Y得到赋值为2’b01。</li></ul></li></ul><ol start="18"><li>元件例化</li></ol><p>元件例化：引入一种连接关系，将预先设计好的设计模块定义为一 个元件，然后利用特定的语句将此元件与当前的设计实体中指定端口相连接，从而为当前设计实体引进一个新的、低一级的设计层次。</p><p>用法：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201090746.png" alt=""></p><ul><li>&lt;模块元件名&gt;，它具有唯一性。如果是用 Verilog描述的模块，则是模块名，也即元件名；</li><li>&lt;例化元件名&gt;：在具体电路上模块被调用后放 在不同的位置或担任不同的任务又必须有对应的名称。</li></ul><p>端口名关联法：括号中的信号名是外部端口名，括号外 带点的信号名是待连接的元件自己的端口名。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201092134.png" alt=""></p><p>位置关联法：关联表述的信号位置十分重要，注意端口 顺序，不能放错。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201092208.png" alt=""></p><ol start="19"><li>算术运算操作符</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201093147.png" alt=""></p><p>所有算数运算都是按无符号操作数进行的，如果是减法运算，输出 的结果是补码。对于乘法，若为无符号数，可直接用乘法算符 （*）；若为有符号数乘，则需将操作数和输出结果用signed定义为有符号数，乘法结果为补码。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201095056.png" alt=""></p><ol start="20"><li>参数定义关键词parameter和localparam</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201100507.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201100528.png" alt=""></p><p>localparam的功能和用法与parameter类似，它是一个局部参数 定义关键词，但无法通过外部程序的数据传递来改变localparam定义的常量。</p><ol start="21"><li>整数型寄存器类型定义</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201100912.png" alt=""></p><p>reg类型必须明确定义其位数。但integer类型的定义不必特指 位数，因为它们都默认为32位宽的二进制寄存器类型。</p><ol start="22"><li>for语句</li></ol><p>（1）本次循环开始前根据“循环初始值设置表达式”计算获得循 环次数初始值。<br>（2）在本次循环开始前根据“循环控制条件表达式”计算所得的 数据判断是否满足继续循环的条件，如果“循环控制条件表达式” 为真，则继续执行“循环体语句结构”中的语句，否则即刻跳出循环。<br>（3）在本次循环结束时，根据“循环控制变量增值表达式”计算<br>出循环控制变量的数值，然后跳到以上步骤（2）。</p><ol start="23"><li>移位操作符</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206155605.png" alt=""></p><p>右移或左移，移出腾空的位用0填补。</p><p>有符号数左右移，右移一律将符号位，即最高位填补移出的位。左移操 作同普通左移&lt;&lt;。</p><ol start="24"><li>repeat语句用法</li></ol><ul><li>“循环次数表达式”可以是数值确定的整数、变量或定义了 常数的参数标识符等。</li><li>repeat语句的循环次数是在进入此语句执行以前就已决定的，无需循环次数控制增量表达式及其计算。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206160554.png" alt=""></p><ol start="25"><li>while语句</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206162407.png" alt=""></p><p>（1）首先根据“循环控制条件表达式”的计算所得判断是否 满足继续循环的条件，如果为真，执行一遍“循环体语句结 构”中的所有语句；若为伪，即不满足循环表达式的条件， 结束循环。<br>（2）对于此种循环语句，必须在“循环体语句结构”中包含类似for语句的“循环控制变量增值表达式”。</p><ol start="26"><li>parameter的参数传递功能</li></ol><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206162806.png" alt=""></p><p>从顶层传递到底层</p><ol start="27"><li>异步清零和同步清零的区别</li></ol><p><font color='red'>异步：</font>在任意时刻，只要rst有效，D触发器输出立刻清零，与时钟clk状态无关。<br><font color='red'>同步：</font>指的是与时钟同步，某个控制信号（比如清零信号）只有当时钟信号有效时才起作用。而当时钟信号没有到来时，该控制信号不起作用。</p><p>异步时序电路的Verilog表述特点</p><p>没有单一主控时钟的时序电路，或系统中所有的时序部件不随某个主控时钟同步接受时钟信号达到状态同步变化的电路都属于异步时序电路。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207142137.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> AMOD(CLK,D,Q,A);</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">input</span> A,D,CLK;</span><br><span class="line"><span class="keyword">reg</span> Q,Q1;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">Q1=~(A|Q);</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> Q1)</span><br><span class="line">Q=D;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>时钟过程表述的特点和规律</li></ul><p>（1）如果将某信号A定义为边沿敏感时钟信 号，则必须在敏感信号列表中给出对应的表述， 如posedge A或negedge A; 但在always过程结构中不能再出现信号A了。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207142831.png" alt=""></p><p>（2）若将某信号B定义为对应于时钟的电平敏感的异步控制信号（或仅仅是 异步输入信号），则除了在敏感信号表中给出对应的表述外，如posedge B或 negedge B，在always过程结构中必须明示信号B的逻辑行为，如上面例中的 RST。特别注意这种表述的不一致性，即表述上必须是边沿敏感信号，如negedge RST, 但电路性能上是电平敏感的。</p><p>(3）若将某信号定义为对应于时钟的同步控制信号 （或仅仅是同步输入信号），则绝不可以以任何形式出<br>现在敏感信号表中，如下面例子中的RST。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207142909.png" alt=""></p><p>（4）敏感信号列表中不允许出现混合信号。敏感 信号表一旦含有posedge或negedge的边沿敏感信号<br>后, 所有其他普通变量都不能放在敏感信号表中了</p><p>以下形式是错误的：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207143100.png" alt=""></p><blockquote><p>CLK是边沿敏感型的，RST是电平敏感型的</p></blockquote><p>（5）若定义某变量为异步低电平敏感信号，则在 if条件语句中应该对敏感信号表中的信号有匹配的<br>表述，以下三种表述方式都是正确的：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207143217.png" alt=""></p><p>（6）不允许在敏感信号表中定义除了异步时序控 制信号以外的信号。在下面的例子中，如果试图使<br>用以下的表述是错误的。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207143241.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207143302.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201207143315.png" alt=""></p><h1>结合案例总结</h1><ul><li>4选1多路选择器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130203038.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130205502.png" alt=""></p><ul><li>设计16选1选择器</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux16_1( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] sel, </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] D, </span><br><span class="line">    <span class="keyword">output</span> Y</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> Y = D[sel];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>8位加法器设计</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201092635.png" alt=""></p><ul><li>BCD码加法器设计</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201201095156.png" alt=""></p><ul><li>设计n位乘加器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206164647.png" alt=""></p><ul><li><p>设计24位无符号数乘法器<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206164620.png" alt=""></p></li><li><p>基本D触发器</p></li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF1(CLK,D,Q);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input Port(s)</span></span><br><span class="line"><span class="keyword">input</span> D,CLK;</span><br><span class="line"><span class="comment">// Output Port(s)</span></span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)<span class="comment">//posedge:CLK时钟上升沿敏感。</span></span><br><span class="line">Q&lt;=D;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>关键词posedge：posedge CLK时钟上升沿敏感。</p><p>相对应的，还有negedge CLK时钟下降沿敏感。</p><ul><li>含异步复位和时钟使能的D触发器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206172635.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206210343.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF2(CLK,D,Q,RST,EN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> CLK,D,RST,EN;</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> RST)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">if</span> (!RST)<span class="comment">//若RST等于零时，Q清零</span></span><br><span class="line">Q&lt;=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(EN)<span class="comment">//EN=1时，Q=D</span></span><br><span class="line">Q&lt;=D;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>含同步复位控制的D触发器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206211132.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206211149.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF3(CLK,D,Q,RST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> CLK,D,RST;</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">if</span> (RST==<span class="number">1</span>)<span class="comment">//同步的</span></span><br><span class="line">Q=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(RST==<span class="number">0</span>)</span><br><span class="line">Q=D;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF1(CLK,D,Q,RST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> CLK,D,RST;</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">reg</span> Q,Q1;<span class="comment">//注意定义了Q1信号</span></span><br><span class="line"><span class="keyword">always</span> @(RST)<span class="comment">//纯组合过程</span></span><br><span class="line"><span class="keyword">if</span> (RST==<span class="number">1</span>)</span><br><span class="line">Q1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Q1=D;</span><br><span class="line">        <span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">            Q&lt;=Q1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF2(<span class="keyword">input</span> CLK,<span class="keyword">input</span> D,<span class="keyword">output</span> <span class="keyword">reg</span> Q,<span class="keyword">input</span> RST);</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">Q&lt;=RST?<span class="number">1&#x27;b0</span>:D;<span class="comment">//当RST=1的时候，Q=0,否则Q=D</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>根据RTL图写程序，同步清零</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206213925.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF1(D,EN,CLK,RST,Q1,Q2);</span><br><span class="line"><span class="keyword">input</span> D,EN,CLK,RST;</span><br><span class="line"><span class="keyword">output</span> Q1,Q2;</span><br><span class="line"><span class="keyword">reg</span> Q2;</span><br><span class="line"><span class="keyword">wire</span> Q10;</span><br><span class="line"><span class="keyword">assign</span> Q10=D&amp;EN;</span><br><span class="line"><span class="keyword">assign</span> Q1=(~Q10)|RST;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK <span class="keyword">or</span> <span class="keyword">negedge</span> RST)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!RST)</span><br><span class="line">Q2&lt;=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(EN)<span class="comment">//EN是同步的</span></span><br><span class="line">Q2&lt;=D;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206214029.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF2(b,rst_n,a,clk,cout,q);</span><br><span class="line"><span class="keyword">input</span> b,rst_n,a,clk;</span><br><span class="line"><span class="keyword">output</span> cout,q;</span><br><span class="line"><span class="keyword">reg</span> q;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(!rst_n)<span class="comment">//若rst_n=0时，q=0</span></span><br><span class="line">q&lt;=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q&lt;=a;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> cout=a^b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>基本锁存器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206215617.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206215630.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> LATCH1(CLK,D,Q);</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">input</span> CLK,D;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line"><span class="keyword">always</span> @(D <span class="keyword">or</span> CLK)</span><br><span class="line"><span class="keyword">if</span>(CLK)</span><br><span class="line">Q&lt;=D;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206220000.png" alt=""></p><blockquote><p>当CLK为高电平时，输出Q才随D输入的数据而改变;<br>而当CLK为低电平时将保存其在高电平时锁入的数据。这就意味着需要引入存储元件于设计模块中。</p></blockquote><ul><li>含清0控制的锁存器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206220148.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206221617.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201206221629.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> LATCH2(CLK,D,Q,RST);</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">input</span> CLK,D,RST;</span><br><span class="line"><span class="keyword">assign</span> Q=(!RST)?<span class="number">0</span>:(CLK?D:Q);<span class="comment">//当RST=0的时候，Q=0;否则再判断CLK，当CLK=1的时候，Q=D，否则Q=Q，即保持不变</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> LATCH2(CLK,D,Q,RST);</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">input</span> CLK,D,RST;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line"><span class="keyword">always</span> @(D <span class="keyword">or</span> CLK <span class="keyword">or</span> RST)</span><br><span class="line">    <span class="keyword">if</span>(!RST)<span class="comment">//RST=0时，Q=0</span></span><br><span class="line">        Q&lt;=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(CLK)</span><br><span class="line">    Q&lt;=D;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>简单加法计数器</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> CNT4(clk,q);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input Port(s)</span></span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output Port(s)</span></span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] q;</span><br><span class="line"><span class="comment">// Additional Module Item(s)</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] q1;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span>)</span><br><span class="line">q1&lt;=q1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">assign</span> q=q1;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> CNT4(clk,q);</span><br><span class="line"><span class="comment">// Input Port(s)</span></span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"><span class="comment">// Output Port(s)</span></span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] q;</span><br><span class="line"><span class="comment">// Additional Module Item(s)</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] q;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span>)</span><br><span class="line">q&lt;=q1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208093504.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208093514.png" alt=""></p><ul><li>实用加法计数器设计</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208093524.png" alt=""></p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> shift(load,rst,clk,en,data,cout,dout);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input Port(s)</span></span><br><span class="line"><span class="keyword">input</span> load,rst,clk,en;<span class="comment">//数据加载控制信号，复位，时钟，时钟使能</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] data;<span class="comment">//4位并行加载数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output Port(s)</span></span><br><span class="line"><span class="keyword">output</span> cout;<span class="comment">//计数进位输出</span></span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>]dout;<span class="comment">//4位计数输出</span></span><br><span class="line"><span class="keyword">reg</span> cout;</span><br><span class="line"><span class="keyword">reg</span> q1;</span><br><span class="line"><span class="keyword">assign</span> dout=q1;<span class="comment">//将内部寄存器的计数结果输出至dout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Additional Module Item(s)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst)<span class="comment">//rst=0时，对内部寄存器单元异步清零</span></span><br><span class="line">q1&lt;=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(en)<span class="comment">//同步时能en=1，则允许加载或计数</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!load)<span class="comment">//当load=0，向内部寄存器加载数据</span></span><br><span class="line">q1&lt;=data;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q1&lt;<span class="number">9</span>)<span class="comment">//当q1小于9时，允许累加</span></span><br><span class="line">q1&lt;=q1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">q1&lt;=<span class="number">4&#x27;b0000</span>;<span class="comment">//否则将一个时钟后清零返回初值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(q1)<span class="comment">//组合过程</span></span><br><span class="line"><span class="keyword">if</span>(q1==<span class="number">4&#x27;h9</span>)</span><br><span class="line">cout=<span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">cout=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208093754.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208093837.png" alt=""></p><ul><li>计数器的清零和置数端的设计</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201208094104.png" alt=""></p><ul><li>二选一多路器</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> led_test(a,b,key_in,led_out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> a,b;<span class="comment">//输入端口a和输出端口b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> key_in;<span class="comment">//按键输入，实现输入输出通道的选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> led_out;<span class="comment">//led控制端口</span></span><br><span class="line"><span class="comment">//当key_in==0:led_out=a</span></span><br><span class="line"><span class="keyword">assign</span> led_out = (key_in == <span class="number">0</span>)? a:b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> led_test_tb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//激励信号定义，对应连接到待测模块的输入端口</span></span><br><span class="line"><span class="keyword">reg</span> signal_a;</span><br><span class="line"><span class="keyword">reg</span> signal_b;</span><br><span class="line"><span class="keyword">reg</span> signal_c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//待检测信号定义，对应连接到待测模块的输出端口</span></span><br><span class="line"><span class="keyword">wire</span> led;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例化待测试模块</span></span><br><span class="line">led_test led_test0(</span><br><span class="line"><span class="variable">.a</span>(signal_a),</span><br><span class="line"><span class="variable">.b</span>(signal_b),</span><br><span class="line"><span class="variable">.key_in</span>(signal_c),</span><br><span class="line"><span class="variable">.led_out</span>(led)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//产生激励</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">signal_a= <span class="number">0</span>;signal_b=<span class="number">0</span>;signal_c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">0</span>;signal_b=<span class="number">0</span>;signal_c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">0</span>;signal_b=<span class="number">1</span>;signal_c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">0</span>;signal_b=<span class="number">1</span>;signal_c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">1</span>;signal_b=<span class="number">0</span>;signal_c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">1</span>;signal_b=<span class="number">0</span>;signal_c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">1</span>;signal_b=<span class="number">1</span>;signal_c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">signal_a= <span class="number">1</span>;signal_b=<span class="number">1</span>;signal_c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">200</span>;</span><br><span class="line"><span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>模拟仿真结果：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201211161311.png" alt=""></p><ul><li>3-8译码器</li></ul><blockquote><p><font color='red'>凡是在always块中赋值的信号，在定义的时候，必须将其定义成reg类型！！！</font></p></blockquote><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> my_8(a,b,c,out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> a,b,c;<span class="comment">//输入端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>]out;<span class="comment">//定义一个多位位宽的信号，高位在前，8位宽</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(a,b,c)<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span>(&#123;a,b,c&#125;)<span class="comment">//拼接成三位</span></span><br><span class="line"><span class="number">3&#x27;b000</span>:out = <span class="number">8&#x27;b0000_0001</span>;<span class="comment">//“_”这是占位符，不做什么作用，便于区分</span></span><br><span class="line"><span class="number">3&#x27;b001</span>:out = <span class="number">8&#x27;b0000_0010</span>;</span><br><span class="line"><span class="number">3&#x27;b010</span>:out = <span class="number">8&#x27;b0000_0100</span>;</span><br><span class="line"><span class="number">3&#x27;b011</span>:out = <span class="number">8&#x27;b0000_1000</span>;</span><br><span class="line"><span class="number">3&#x27;b100</span>:out = <span class="number">8&#x27;b0001_0000</span>;</span><br><span class="line"><span class="number">3&#x27;b101</span>:out = <span class="number">8&#x27;b0010_0000</span>;</span><br><span class="line"><span class="number">3&#x27;b110</span>:out = <span class="number">8&#x27;b0100_0000</span>;</span><br><span class="line"><span class="number">3&#x27;b111</span>:out = <span class="number">8&#x27;b1000_0000</span>;</span><br><span class="line"><span class="comment">//default:out = 8&#x27;b1000_0000;//与上一句语句的作用一样，除以上情况以外的情况</span></span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> my_8_tb();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> a;</span><br><span class="line"><span class="keyword">reg</span> b;</span><br><span class="line"><span class="keyword">reg</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line"></span><br><span class="line">my_8 U1(</span><br><span class="line"><span class="variable">.a</span>(a),</span><br><span class="line"><span class="variable">.b</span>(b),</span><br><span class="line"><span class="variable">.c</span>(c),</span><br><span class="line"><span class="variable">.out</span>(out)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">0</span>;b=<span class="number">0</span>;c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">0</span>;b=<span class="number">0</span>;c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">0</span>;b=<span class="number">1</span>;c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">0</span>;b=<span class="number">1</span>;c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">1</span>;b=<span class="number">0</span>;c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">1</span>;b=<span class="number">0</span>;c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">1</span>;b=<span class="number">1</span>;c=<span class="number">0</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line">a=<span class="number">1</span>;b=<span class="number">1</span>;c=<span class="number">1</span>;</span><br><span class="line">#<span class="number">200</span>; </span><br><span class="line"><span class="built_in">$stop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201213114140.png" alt=""></p><ul><li>状态机</li></ul><p>序列检测器</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> List(clk,rst,data,out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> clk,rst;<span class="comment">//默认50M，低电平复位</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>]data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span></span><br><span class="line">CHECK_H = <span class="number">5&#x27;b0_0001</span>,</span><br><span class="line">CHECK_e = <span class="number">5&#x27;b0_0010</span>,</span><br><span class="line">CHECK_la = <span class="number">5&#x27;b0_0100</span>,</span><br><span class="line">CHECK_lb = <span class="number">5&#x27;b0_1000</span>,</span><br><span class="line">CHECK_o = <span class="number">5&#x27;b1_0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">4</span>:<span class="number">0</span>]state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst)</span><br><span class="line"><span class="keyword">if</span>(!rst)<span class="keyword">begin</span></span><br><span class="line">out &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(state)</span><br><span class="line">CHECK_H:</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&quot;H&quot;</span>)</span><br><span class="line">state &lt;= CHECK_e;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line">CHECK_e:</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&quot;e&quot;</span>)</span><br><span class="line">state &lt;= CHECK_la;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line">CHECK_la:</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&quot;l&quot;</span>)</span><br><span class="line">state &lt;= CHECK_lb;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line">CHECK_lb:</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&quot;l&quot;</span>)</span><br><span class="line">state &lt;= CHECK_o;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line">CHECK_o:</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&quot;o&quot;</span>)<span class="keyword">begin</span></span><br><span class="line">out &lt;= ~ out;</span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= CHECK_H;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin</span></span><br><span class="line"><span class="comment">//state &lt;= CHECK_H;</span></span><br><span class="line"><span class="comment">//if(data == &quot;o&quot;)</span></span><br><span class="line"><span class="comment">//out &lt;= ~ out;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//out &lt;= out;</span></span><br><span class="line"><span class="keyword">default</span>: state &lt;= CHECK_H;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:%5Cblog%5Cpicture%5CPicGo%5Ccopypicture%5Cimage-20201213150623372.png" alt="image-20201213150623372"></p><h1>自己编写（改编）</h1><ul><li>四位移位寄存器</li></ul><p>不带有异步清零，属于串行输入并行输出</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF1(din,clk,q);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">input</span> din;</span><br><span class="line"> <span class="keyword">input</span> clk;</span><br><span class="line"> <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] q=<span class="number">4&#x27;b0000</span>;</span><br><span class="line"> <span class="keyword">reg</span> q3=<span class="number">1&#x27;b0</span>,q2=<span class="number">1&#x27;b0</span>,q1=<span class="number">1&#x27;b0</span>,q0=<span class="number">1&#x27;b0</span>;</span><br><span class="line"> <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"> <span class="keyword">begin</span> </span><br><span class="line">  q3&lt;=q2;</span><br><span class="line">  q2&lt;=q1;</span><br><span class="line">  q1&lt;=q0;</span><br><span class="line">  q0&lt;=din;</span><br><span class="line">  q=&#123;q3,q2,q1,q0&#125;;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> t1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> din;</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] q;</span><br><span class="line"></span><br><span class="line">DFF1 U1(<span class="variable">.clk</span>(clk),<span class="variable">.din</span>(din),<span class="variable">.q</span>(q));</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span></span><br><span class="line"> #<span class="number">10</span> clk=~clk;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"> clk = <span class="number">1&#x27;b0</span>;</span><br><span class="line"> din = <span class="number">1&#x27;b1</span>;<span class="comment">//第一个移进的数</span></span><br><span class="line">   #<span class="number">15</span> din = <span class="number">1&#x27;b0</span>;<span class="comment">//第二个移进的数</span></span><br><span class="line">   #<span class="number">20</span> din = <span class="number">1&#x27;b1</span>;<span class="comment">//第三个</span></span><br><span class="line">   #<span class="number">20</span> din = <span class="number">1&#x27;b0</span>;<span class="comment">//第四个</span></span><br><span class="line">   #<span class="number">20</span> din = <span class="number">1&#x27;b1</span>;<span class="comment">//第五个</span></span><br><span class="line">   #<span class="number">20</span> din = <span class="number">1&#x27;b0</span>;   <span class="comment">//第六个  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201209214417.png" alt="image-20201209214407163"></p><ul><li>dds</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">module</span> control (</span><br><span class="line">                 clk, <span class="comment">//外部输入时钟</span></span><br><span class="line"></span><br><span class="line">                 rst_n,<span class="comment">//系统复位</span></span><br><span class="line"></span><br><span class="line">                 addr<span class="comment">//有效地址</span></span><br><span class="line"></span><br><span class="line">              );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//模块输入</span></span><br><span class="line">      <span class="keyword">input</span> clk;<span class="comment">//外部输入时钟</span></span><br><span class="line">      <span class="keyword">input</span> rst_n;<span class="comment">//系统复位</span></span><br><span class="line">      <span class="comment">//模块输出</span></span><br><span class="line">      <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] addr;<span class="comment">//有效地址</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (!rst_n) <span class="comment">//复位的时候，addr清零</span></span><br><span class="line">                  addr &lt;= <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">                 <span class="keyword">if</span> (addr &lt; <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">                     addr &lt;= addr + <span class="number">1</span>;<span class="comment">//地址在0~255之间循环</span></span><br><span class="line"></span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                    addr &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> dds (</span><br><span class="line">              clk, <span class="comment">//外部输入时钟</span></span><br><span class="line">             rst_n,<span class="comment">//系统复位</span></span><br><span class="line">             num <span class="comment">//波形数据输出</span></span><br><span class="line">         );</span><br><span class="line">      <span class="comment">//系统输入</span></span><br><span class="line">      <span class="keyword">input</span> clk;<span class="comment">//外部输入时钟</span></span><br><span class="line">      <span class="keyword">input</span> rst_n;<span class="comment">//系统复位</span></span><br><span class="line">      <span class="comment">//系统输出</span></span><br><span class="line">      <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] num;<span class="comment">//波形数据输出</span></span><br><span class="line">      <span class="comment">//定义中间连线</span></span><br><span class="line">      <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] addr;<span class="comment">//有效地址</span></span><br><span class="line">      <span class="comment">//实例化control</span></span><br><span class="line">      control control (</span><br><span class="line">                  <span class="variable">.clk</span>(clk), <span class="comment">//外部输入时钟</span></span><br><span class="line">                 <span class="variable">.rst_n</span>(rst_n), <span class="comment">//系统复位</span></span><br><span class="line">                  <span class="variable">.addr</span>(addr)<span class="comment">//有效地址</span></span><br><span class="line">              );</span><br><span class="line">      <span class="comment">//调用ip核</span></span><br><span class="line"></span><br><span class="line">      rom rom_inst (</span><br><span class="line">                  <span class="variable">.address</span> ( addr ),</span><br><span class="line">                  <span class="variable">.clock</span> ( clk ),</span><br><span class="line">                  <span class="variable">.q</span> ( num )</span><br><span class="line">              );</span><br><span class="line">  <span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ps //定义时间单位和精度</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">module</span> dds_tb;</span><br><span class="line"> <span class="comment">//系统输入</span></span><br><span class="line"> <span class="keyword">reg</span> clk;<span class="comment">//外部输入时钟</span></span><br><span class="line"> <span class="keyword">reg</span> rst_n;<span class="comment">//系统复位</span></span><br><span class="line"> <span class="comment">//系统输出</span></span><br><span class="line"> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] num;<span class="comment">//波形数据输出</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"> clk = <span class="number">1</span>;</span><br><span class="line"> rst_n = <span class="number">0</span>;</span><br><span class="line"> # <span class="number">200</span><span class="variable">.1</span></span><br><span class="line"> rst_n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">always</span> # <span class="number">10</span> clk = ~clk;<span class="comment">//50M的时钟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> dds dds (</span><br><span class="line"></span><br><span class="line"> <span class="variable">.clk</span>(clk), <span class="comment">//外部输入时钟</span></span><br><span class="line"></span><br><span class="line"> <span class="variable">.rst_n</span>(rst_n), <span class="comment">//系统复位</span></span><br><span class="line"></span><br><span class="line"> <span class="variable">.num</span>(num)<span class="comment">//波形数据输出</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>图像改成无符号数仿真，194.5kHz</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201221180549.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;基础知识&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;模块语句及其表达方式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130195313.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;任一可综合的最基本的模块都必须以关键词module开头。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块名最好根据相应电路的功能来确定。如4位二进制计数器用counter4b。&lt;/li&gt;
&lt;li&gt;模块端口列表中须列出此模块的所有输入、输出或双向端口名，端口名间用逗号分开，括号外加分号。&lt;/li&gt;
&lt;li&gt;endmodule是模块结束语句关键词，旁边不加任何标点符号。对模块端口及其功能的描述语句都 必须放在模块语句module_endmodule之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;端口语句、端口信号名和端口模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201130195425.png&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入端口：input&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出端口：output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双向端口：inout&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;逻辑操作符&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="quartus" scheme="http://stardust14.com/tags/quartus/"/>
    
  </entry>
  
  <entry>
    <title>CentOs6.5下升级Firefox</title>
    <link href="http://stardust14.com/2020/11/28/CentOs6-5%E4%B8%8B%E5%8D%87%E7%BA%A7Firefox/"/>
    <id>http://stardust14.com/2020/11/28/CentOs6-5%E4%B8%8B%E5%8D%87%E7%BA%A7Firefox/</id>
    <published>2020-11-28T11:08:12.000Z</published>
    <updated>2020-11-30T11:45:36.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class='tip error'><p>无效<p></div><p><s>1.下载最新安装文件</s></p><p><s>在firefox的官网里下载最新的linux版安装文件Firefox-latest-x86_64.tar.bz2(我下载的是64bit版)，然后解压。</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[star@localhost 下载]# tar -xjvf Firefox-latest-x86_64.tar.bz2 </span><br></pre></td></tr></table></figure><blockquote><p><s>解压要在主用户，不要在最高管理员（root）权限下进行</s></p></blockquote><p><s>2.卸载旧版</s></p><p><s>系统默认安装的旧版 firefox ，通常位于 /usr/lib 目录下，我们把旧版卸载。</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[star@localhost 下载]# whereis firefox</span><br><span class="line">firefox: /usr/bin/firefox /usr/lib/firefox /usr/lib64/firefox /usr/share/man/man1/firefox.1.gz</span><br></pre></td></tr></table></figure><p><s>删除程序目录</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost 下载]# sudo rm -rf /usr/lib/firefox</span><br></pre></td></tr></table></figure><p><s>删除启动脚本</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost 下载]# sudo rm -f /usr/bin/firefox</span><br></pre></td></tr></table></figure><blockquote><p><s>有无sudo都可</s></p></blockquote><p><s>3.安装新版</s></p><p><s>将解压的firefox 目录移动到 /usr/lib 目录下</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost 下载]# mv firefox /usr/lib</span><br></pre></td></tr></table></figure><p><s>进入 /usr/bin 目录，删除其下的 firefox 脚本</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# rm firefox</span><br></pre></td></tr></table></figure><p><s>创建一个软链接，指向/usr/lib/firefox/firefox</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ln -s /usr/lib/firefox/firefox /usr/bin/firefox</span><br></pre></td></tr></table></figure><p><s>修改左上角的firefox 浏览器图标属性里的程序启动路径，在 “命令”字段的文本框中，输入</s></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib/firefox/firefox %u</span><br></pre></td></tr></table></figure><p><s><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201128192425.png" alt="image-20201128192359442"></s></p><p><s>参考网上的解决方案：</s></p><p><a href="https://blog.yayuanzi.com/8754.html">https://blog.yayuanzi.com/8754.html</a></p><p><a href="https://blog.csdn.net/weixin_34289744/article/details/92890618">https://blog.csdn.net/weixin_34289744/article/details/92890618</a></p><div class='tip error'><p>无效<p></div><h1>解决</h1><div class="note success flat"><p>成功</p></div><p>卸载旧版后，在终端输入<code>yum -y install firefox</code>再把之前的设置修改回来即可。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;div class=&quot;tip error&quot;&gt;&lt;p&gt;无效&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;s&gt;1.下载最新安装文件&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;在firefox的官网里下载最新的linux版安装文件Firefox-latest-x86_64.tar.bz2(我下载的是64bit版)，然后解压。&lt;/s&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[star@localhost 下载]# tar -xjvf Firefox-latest-x86_64.tar.bz2 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;s&gt;解压要在主用户，不要在最高管理员（root）权限下进行&lt;/s&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;s&gt;2.卸载旧版&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;系统默认安装的旧版 firefox ，通常位于 /usr/lib 目录下，我们把旧版卸载。&lt;/s&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[star@localhost 下载]# whereis firefox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firefox: /usr/bin/firefox /usr/lib/firefox /usr/lib64/firefox /usr/share/man/man1/firefox.1.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;s&gt;删除程序目录&lt;/s&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="记录&amp;烂笔头" scheme="http://stardust14.com/categories/%E8%AE%B0%E5%BD%95-%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="CentOS6.5" scheme="http://stardust14.com/tags/CentOS6-5/"/>
    
  </entry>
  
  <entry>
    <title>Linux简单知识</title>
    <link href="http://stardust14.com/2020/10/31/Linux%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86/"/>
    <id>http://stardust14.com/2020/10/31/Linux%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86/</id>
    <published>2020-10-31T08:26:03.000Z</published>
    <updated>2020-11-22T03:43:20.316Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>简单命令</h1><h2 id="常用系统工作命令"><a class="header-anchor" href="#常用系统工作命令">¶</a>常用系统工作命令</h2><ol><li>echo命令</li></ol><p>用于在终端输出字符串或变量提取后的值，格式为&quot;echo[字符串|$变量]&quot;</p><blockquote><p>相当于打印字符串/提取变量的值</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hello@hello Desktop]$ echo $SHELL</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>date命令</li></ol><p>用于显示及设置系统的时间或日期，格式为&quot;<code>date[选项][+指定的格式]</code>&quot;</p><p>只需在强大的date命令中输入以“+”号开头的参数，即可按照指定格式来输出系统的时间或日期，这样在日常工作时便可以把备份数据的命令与指定格式输出的时间信息结合到一起。</p><p>​date命令中的参数及作用</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>%S</td><td>秒（00～59）</td></tr><tr><td>%M</td><td>分钟（00～59）</td></tr><tr><td>%H</td><td>小时（00～23）</td></tr><tr><td>%I</td><td>小时（00～12）</td></tr><tr><td>%m</td><td>月份（1~12）</td></tr><tr><td>%p</td><td>显示出AM或PM</td></tr><tr><td>%a</td><td>缩写的工作日名称（例如：Sun）</td></tr><tr><td>%A</td><td>完整的工作日名称（例如：Sunday）</td></tr><tr><td>%b</td><td>缩写的月份名称（例如：Jan）</td></tr><tr><td>%B</td><td>完整的月份名称（例如：January）</td></tr><tr><td>%q</td><td>季度（1~4）</td></tr><tr><td>%y</td><td>简写年份（例如：20）</td></tr><tr><td>%Y</td><td>完整年份（例如：2020）</td></tr><tr><td>%d</td><td>本月中的第几天</td></tr><tr><td>%j</td><td>今年中的第几天</td></tr><tr><td>%n</td><td>换行符（相当于按下回车键）</td></tr><tr><td>%t</td><td>跳格（相当于按下Tab键）</td></tr></tbody></table><ol start="3"><li>reboot命令</li></ol><p>reboot命令用于重启系统，其格式为reboot。需要root管理员权限</p><ol start="4"><li>poweroff命令</li></ol><p>用于关闭系统，其格式为poweroff，默认root管理员权限。</p><ol start="5"><li>wget命令</li></ol><p>用于在终端下载网络文件，格式为&quot;wget[参数]下载地址&quot;。</p><p>​wget命令的参数以及命令</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>后台下载模式</td></tr><tr><td>-P</td><td>下载到指定目录</td></tr><tr><td>-t</td><td>最大尝试次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table><div class='tip error'><p>error：出现错误<p></div><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201112210230.png" alt="image-20201112210227444"></p><p>解决:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate  https://www.linuxprobe.com/docs/LinuxProbe.pdf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201112210519.png" alt="image-20201112210518064"></p><ol start="6"><li>ps命令</li></ol><p>ps命令用于查看系统中的进程状态，格式为“ps [参数]”。</p><p>ps命令的参数以及作用</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有进程（包括其他用户的进程）</td></tr><tr><td>-u</td><td>用户以及其他详细信息</td></tr><tr><td>-x</td><td>显示没有控制终端的进程</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">R（运行）：进程正在运行或在运行队列中等待。</span><br><span class="line">S（中断）：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该状态。</span><br><span class="line">D（不可中断）：进程不响应系统异步信号，即便用kill命令也不能将其中断。</span><br><span class="line">Z（僵死）：进程已经终止，但进程描述符依然存在, 直到父进程调用wait4()系统函数后将进程释放。</span><br><span class="line">T（停止）：进程收到停止信号后停止运行。</span><br></pre></td></tr></table></figure><ol start="7"><li>top命令</li></ol><p>top命令用于动态地监视进程活动与系统负载等信息，其格式为top。</p><p>top命令相当强大，能够动态地查看系统运维状态，完全将它看作Linux中的“强化版的Windows任务管理器”。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201112212251.png" alt="image-20201112212250825"></p><ol start="8"><li>pidof命令</li></ol><p>pidof命令用于查询某个指定服务进程的PID值，格式为“pidof [参数] [服务名称]”。</p><p>每个进程的进程号码值（PID）是唯一的，因此可以通过PID来区分不同的进程。例如，可以使用如下命令来查询本机上sshd服务程序的PID：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hello@hello Desktop]$ pidof sshd</span><br><span class="line">2037</span><br></pre></td></tr></table></figure><ol start="9"><li>kill命令</li></ol><p>kill命令用于终止某个指定PID的服务进程，格式为“kill [参数] [进程PID]”。</p><p>接下来，我们使用kill命令把上面用pidof命令查询到的PID所代表的进程终止掉，其命令如下所示。这种操作的效果等同于强制停止sshd服务。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hello@hello Desktop]$ kill 2037</span><br></pre></td></tr></table></figure><ol start="10"><li>killall命令</li></ol><p>killall命令用于终止某个指定名称的服务所对应的全部进程，格式为：“killall [参数] [服务名称]”。</p><h2 id="系统状态检测命令"><a class="header-anchor" href="#系统状态检测命令">¶</a>系统状态检测命令</h2><ol><li>ifconfig命令</li></ol><p>ifconfig命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]”。</p><h1>基本命令</h1><p>通用语法格式：# <font color='red'>指令名称 [选项] [操作的目标]</font></p><h2 id="简单命令"><a class="header-anchor" href="#简单命令">¶</a>简单命令</h2><h3 id="ls指令"><a class="header-anchor" href="#ls指令">¶</a>ls指令</h3><p>语法1：<strong>#ls [路径]</strong></p><p>表示列出指定路径下的文件夹和文件的名字，如果路径没有指定则列出当前路径下的（list）</p><p>例如：在root用户的家目录中输入ls命令，则会看到以下的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201122112536.jpg" alt="img"></p><p>要求列出/home的文档的名称。</p><p>#ls /home</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201122112648.png" alt="image-20201122112647863"></p><p>语法2：<strong>#ls -l [路径]</strong></p><p>表示<strong>以列表的形式</strong>列出指定路径下的文件夹和文件的名字</p><p>例如：使用ls –l的命令列出当前用户家目录中的文件夹和文件信息</p><p>语法3：**#ls -la [**<strong>路径]</strong></p><p>表示<strong>以列表的形式</strong>列出指定路径下的文件夹和文件名（<strong>包含隐藏文件</strong>**,all**）</p><p>例如：在当前用户的家目录中输入ls –la命令可以查看全部的文件夹和文件名，并且包含了隐藏文件（<font color='red'>特点是以“<strong>.</strong>”开头的名字</font>）</p><h3 id="clear指令"><a class="header-anchor" href="#clear指令">¶</a>clear指令</h3><p>表示的含义：清空当前屏幕中全部的命令（<strong>其实质是没有清空，只不过是顶到上面去了</strong>）</p><p><strong>语法：#clear</strong></p><p><strong>等效于快捷键：ctrl + L</strong></p><h3 id="su指令"><a class="header-anchor" href="#su指令">¶</a>su指令</h3><p>作用：切换用户（switch user）。</p><p>语法：<strong>#su</strong> <strong>需要切换到的用户名（用户名可以不写，则表示切换到root用户）</strong></p><p>例如：</p><p>1、从root用户切换到admin用户。</p><p>2、从admin用户切换到root用户。</p><p>#su root</p><p>等价于：</p><p>#su</p><blockquote><p>密码输错有两种方式：1，根据提示重新输入；2，按住backspace（删除键）三秒</p></blockquote><p>通过上述两个命令的操作发现一个结论：</p><p><strong>当切换到的用户权限如果比当前用户的权限低，可以直接切换，不需要密码；反之，如果从低往高切换则要求输入被切换到的账户对应的密码。</strong></p><h3 id="cd指令"><a class="header-anchor" href="#cd指令">¶</a>cd指令</h3><p>作用：切换目录（change directory）。</p><p><strong>语法：#cd</strong> <strong>需要切换到的路径（路径可以是相对路径，也可以是绝对路径）</strong></p><p><strong>路径可以写也可以不写，不写则表示切换到当前用户的家目录。</strong></p><p>例如：</p><p>1、从root用户家目录中切换到admin用户的家目录中</p><blockquote><p><strong>提示：在切换路径或者后期打开一个文件的时候可以多建议使用tab键（可以自动补全命令路径）。</strong></p></blockquote><p>2、切换用户切换到admin用户，然后从admin用户的家目录使用cd切换到root的家目录</p><p>#su admin</p><p>#cd /root</p><p>结论： <strong>低级用户没有权限访问高级用户相关的资源</strong>。</p><p><strong>关于路径：</strong></p><p>路径分为相对路径和绝对路径。</p><p>相对路径是相对当前路径的一种表现形式。</p><p>特点：只要不是以“/”开头的就是相对路径。</p><p>绝对路径是直接从“根”开始的一种路径形式。</p><p>特点：以“/”开头的路径称之为绝对路径。</p><p>案例：从root用户家目录中切换到admin用户的家目录中，要求以相对路径形式书写。</p><p>#cd …/home/admin</p><p>分析：</p><p>​     当前路径：**/**root</p><p>​     目标路径：**/**home/admin</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;简单命令&lt;/h1&gt;
&lt;h2 id=&quot;常用系统工作命令&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#常用系统工作命令&quot;&gt;¶&lt;/a&gt;常用系统工作命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;echo命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于在终端输出字符串或变量提取后的值，格式为&amp;quot;echo[字符串|$变量]&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相当于打印字符串/提取变量的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[hello@hello Desktop]$ echo $SHELL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;date命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于显示及设置系统的时间或日期，格式为&amp;quot;&lt;code&gt;date[选项][+指定的格式]&lt;/code&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;只需在强大的date命令中输入以“+”号开头的参数，即可按照指定格式来输出系统的时间或日期，这样在日常工作时便可以把备份数据的命令与指定格式输出的时间信息结合到一起。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://stardust14.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://stardust14.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://stardust14.com/2020/10/20/python%E7%88%AC%E8%99%AB/"/>
    <id>http://stardust14.com/2020/10/20/python%E7%88%AC%E8%99%AB/</id>
    <published>2020-10-20T08:29:35.000Z</published>
    <updated>2020-10-27T08:04:47.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>预备知识</h1><h2 id="正则法则"><a class="header-anchor" href="#正则法则">¶</a>正则法则</h2><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>\d</code></td><td style="text-align:center">代表任意数字，就是阿拉伯数字 0-9 这些玩意。</td></tr><tr><td style="text-align:center"><code>\D</code></td><td style="text-align:center">大写的就是和小写的唱反调，\d 你代表的是任意数字是吧？那么我 \D 就代表不是数字的。</td></tr><tr><td style="text-align:center"><code>\w</code></td><td style="text-align:center">代表字母，数字，下划线。也就是 a-z、A-Z、0-9、_。</td></tr><tr><td style="text-align:center"><code>\W</code></td><td style="text-align:center">跟 \w 唱反调，代表不是字母，不是数字，不是下划线的。</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">代表一个换行。</td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">代表一个回车。</td></tr><tr><td style="text-align:center"><code>\f</code></td><td style="text-align:center">代表换页。</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">代表一个 Tab 。</td></tr><tr><td style="text-align:center"><code>\s</code></td><td style="text-align:center">代表所有的空白字符，也就是上面这个：\n、\r、\t、\f。</td></tr><tr><td style="text-align:center"><code>\S</code></td><td style="text-align:center">跟 \s 唱反调，代表所有不是空白的字符。</td></tr><tr><td style="text-align:center"><code>\A</code></td><td style="text-align:center">代表字符串的开始。</td></tr><tr><td style="text-align:center"><code>\Z</code></td><td style="text-align:center">代表字符串的结束。</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:center">匹配字符串开始的位置。</td></tr><tr><td style="text-align:center"><code>$</code></td><td style="text-align:center">匹配字符创结束的位置。</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:center">代表所有的单个字符，除了 \n \r</td></tr><tr><td style="text-align:center"><code>[...]</code></td><td style="text-align:center">代表在 [] 范围内的字符，比如 [a-z] 就代表 a到z的字母</td></tr><tr><td style="text-align:center"><code>[^...]</code></td><td style="text-align:center">跟 […] 唱反调，代表不在 [] 范围内的字符</td></tr><tr><td style="text-align:center"><code>&#123;n&#125;</code></td><td style="text-align:center">匹配在 {n} 前面的东西，比如: o{2} 不能匹配 Bob 中的 o ，但是能匹配 food 中的两个o。</td></tr><tr><td style="text-align:center"><code>&#123;n,m&#125;</code></td><td style="text-align:center">匹配在 {n,m} 前面的东西，比如：o{1,3} 将匹配“fooooood”中的前三个o。</td></tr><tr><td style="text-align:center"><code>&#123;n，&#125;</code></td><td style="text-align:center">匹配在 {n,} 前面的东西，比如：o{2,} 不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">和 {0,} 一个样，匹配 * 前面的 0 次或多次。 比如 zo* 能匹配“z”、“zo”以及“zoo”。</td></tr><tr><td style="text-align:center"><code>+</code></td><td style="text-align:center">和{1，} 一个样，匹配 + 前面 1 次或多次。 比如 zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。</td></tr><tr><td style="text-align:center"><code>？</code></td><td style="text-align:center">和{0,1} 一个样，匹配 ？前面 0 次或 1 次。</td></tr><tr><td style="text-align:center"><code>a|b</code></td><td style="text-align:center">匹配 a 或者 b。</td></tr><tr><td style="text-align:center"><code>（）</code></td><td style="text-align:center">匹配括号里面的内容。</td></tr></tbody></table><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#贪婪匹配</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;hello,world.xiaoshuaib has 100 bananas&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;^he.*(\d+)\s.*s$&#x27;</span>,content)</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果是0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#非贪婪匹配，多了个？</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;hello,world.xiaoshuaib has 100 bananas&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;^he.*?(\d+)\s.*s$&#x27;</span>,content)</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果是100</span></span><br></pre></td></tr></table></figure><blockquote><p>所谓贪婪匹配就是第一段代码一个数一个数都要去匹配</p><p>而非贪婪是直接把 100 给匹配出来了</p></blockquote><blockquote><p><code>.\*？</code>:表示的就是匹配任意字符</p><p>.*？的 . 代表所有的单个字符，除了 \n \r</p></blockquote><p>字符串有换行:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;hello,world.xiaoshuaib </span></span><br><span class="line"><span class="string">has 100 bananas&#x27;&#x27;&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;^he.*?(\d+)\s.*s$&#x27;</span>,content,re.S)</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#直接用 re.S </span></span><br></pre></td></tr></table></figure><p><strong>re.search</strong>:直接去扫描字符串,然后把匹配成功的<strong>第一个</strong>结果的返回</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;hello,world.xiaoshuaib </span></span><br><span class="line"><span class="string">has 100 bananas&#x27;&#x27;&#x27;</span></span><br><span class="line">res=re.search(<span class="string">&#x27;he.*?(\d+)\s.*s&#x27;</span>,content,re.S)</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>re.findall</strong>:轻松的获取所有匹配的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#又在结尾多了个？</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;&#x27;&#x27;&#x27;</span></span><br><span class="line">res=re.findall(<span class="string">&#x27;he.*?(\d+)\s.*?s&#x27;</span>,content,re.S)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>re.sub</strong>：替换字符/数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;&#x27;&#x27;&#x27;</span></span><br><span class="line">content=re.sub(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;250&#x27;</span>,content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure><p><strong>re.compile</strong>：主要就是把我们的匹配符封装一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;</span></span><br><span class="line"><span class="string">hello,world.xiaoshuaib has 100 bananas;&#x27;&#x27;&#x27;</span></span><br><span class="line">pattern=re.compile(<span class="string">&#x27;he.*?(\d+)\s.*?s&#x27;</span>,re.S)</span><br><span class="line">res=re.findall(pattern,content)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>当当网爬虫：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_dandan</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code==<span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_result</span>(<span class="params">html</span>):</span></span><br><span class="line">    pattern=re.compile(<span class="string">&#x27;&lt;li&gt;.*?list_num.*?(\d+).&lt;/div&gt;.*?&lt;img src&quot;(.*?)&quot;.*?class=&quot;name&quot;.*?title=&quot;(.*?)&quot;&gt;.*?class=&quot;star&quot;&gt;.*?class=&quot;tuijian&quot;&gt;(.*?)&lt;/span&gt;.?class=&quot;publisher_info&quot;&gt;.*?target=&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;.*?class=&quot;biaosheng&quot;&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;&lt;/div&gt;.?&lt;p&gt;&lt;span\sclass=&quot;price_n&quot;&gt;￥(.*?)&lt;/span&gt;.*?&lt;/li&gt;&#x27;</span>,re.S)</span><br><span class="line">    items=re.finditer(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;range&#x27;</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">&#x27;iamge&#x27;</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">&#x27;recommend&#x27;</span>:item[<span class="number">3</span>],</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>:item[<span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;times&#x27;</span>:item[<span class="number">5</span>],</span><br><span class="line">            <span class="string">&#x27;price&#x27;</span>:item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_item_to_file</span>(<span class="params">item</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;开始写入数据====&gt;&#x27;</span>+str(item))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;book.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(item,ensure_ascii=<span class="literal">False</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">page</span>):</span></span><br><span class="line">    url=<span class="string">&#x27;http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1-1&#x27;</span>+str(page)</span><br><span class="line">    html=request_dandan(url)</span><br><span class="line">    items=parse_result(html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        write_item_to_file(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">        main(i)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a class="header-anchor" href="#BeautifulSoup">¶</a>BeautifulSoup</h2><p>BeautifulSoup4将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为四种:</p><ul><li>Tag</li><li>NavigableString</li><li>BeautifulSoup</li><li>comment</li></ul><ol><li>Tag</li></ol><p>标签及其内容，拿到她所找到的第一个内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&quot;https://www.douban.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># data=bytes(urllib.parse.urlencode(&#123;&#x27;name&#x27;:&#x27;eric&#x27;&#125;),encoding=&quot;utf-8&quot;)</span></span><br><span class="line">req=urllib.request.Request(url=url,headers=headers)</span><br><span class="line">reponse=urllib.request.urlopen(req)</span><br><span class="line">bs=BeautifulSoup(reponse,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(bs.a)<span class="comment">#拿到找到第一个标签的全部信息</span></span><br></pre></td></tr></table></figure><ol start="2"><li>NavigableString</li></ol><p>标签里面的内容（字符串）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(bs.title.string)<span class="comment">#拿到标签里的内容</span></span><br><span class="line">print(bs.a.attrs)  <span class="comment">#快速拿到一个标签里所有的属性，并返回一个字典</span></span><br></pre></td></tr></table></figure><ol start="3"><li>BeautifulSoup</li></ol><p>表示整个文档</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(bs)</span><br></pre></td></tr></table></figure><ol start="4"><li>comment</li></ol><p>是一个特殊的NavigableString，输出的内容不包含注释符号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(bs.title.string))</span><br></pre></td></tr></table></figure><h2 id="selenium"><a class="header-anchor" href="#selenium">¶</a>selenium</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver=webdriver.Chrome()<span class="comment">#创建了一个 Chrome 驱动</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">#使用 get 方法打开百度</span></span><br><span class="line"></span><br><span class="line">input=driver.find_element_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)<span class="comment">#id 定位也就是百度的搜索框所在的标签位置</span></span><br><span class="line">input.send_keys(<span class="string">&quot;hexo博客&quot;</span>)<span class="comment">#写入我们要搜索的内容</span></span><br><span class="line"></span><br><span class="line">button=driver.find_element_by_css_selector(<span class="string">&#x27;#su&#x27;</span>)<span class="comment">#相当于点击百度的百度一下按钮</span></span><br><span class="line">button.click()<span class="comment">#模拟点击一次鼠标</span></span><br></pre></td></tr></table></figure><p>当我们要在页面中获取一个元素的时候</p><p>可以使用这些方法</p><ul><li>find_element_by_id</li><li>find_element_by_name</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li><li>find_element_by_css_selector</li></ul><p>想要在页面获取多个元素呢</p><p>就可以这样</p><ul><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li></ul><h2 id="一些函数"><a class="header-anchor" href="#一些函数">¶</a>一些函数</h2><h3 id="class"><a class="header-anchor" href="#class">¶</a>class</h3><p>调用被封装的内容时，有两种情况：</p><ul><li>通过对象直接调用</li><li>通过self间接调用</li></ul><p>直接调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj1 = Foo(<span class="string">&#x27;chengd&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># obj1.detail()  # Python默认会将obj1传给self参数，即：obj1.detail(obj1)，所以，此时方法内部的 self ＝ obj1，即：self.name 是 chengd ；self.age 是 18</span></span><br><span class="line">print(obj1.name)</span><br><span class="line">print(obj1.age)</span><br></pre></td></tr></table></figure><p>间接调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(self.name)</span><br><span class="line">    print(self.age)</span><br><span class="line">  </span><br><span class="line">obj1 = Foo(<span class="string">&#x27;chengd&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">obj1.detail()  <span class="comment"># Python默认会将obj1传给self参数，即：obj1.detail(obj1)，所以，此时方法内部的 self ＝ obj1，即：self.name 是 chengd ；self.age 是 18</span></span><br><span class="line">  </span><br><span class="line">obj2 = Foo(<span class="string">&#x27;python&#x27;</span>, <span class="number">99</span>)</span><br><span class="line">obj2.detail()  <span class="comment"># Python默认会将obj2传给self参数，即：obj1.detail(obj2)，所以，此时方法内部的 self ＝ obj2，即：self.name 是 python ； self.age 是 99x</span></span><br></pre></td></tr></table></figure><h3 id="open"><a class="header-anchor" href="#open">¶</a>open</h3><p>open(path, ‘-模式-‘,encoding=’UTF-8’)<br>即open(路径+文件名, 读写模式, 编码)</p><p>读写模式：<br>r ：只读<br>r+ : 读写<br>w ： 新建（会对原有文件进行覆盖）<br>a ： 追加<br>b ： 二进制文件</p><p>常用的模式有：<br>“a” 以“追加”模式打开， (从 EOF 开始, 必要时创建新文件)<br>“a+” 以”读写”模式打开<br>“ab” 以”二进制 追加”模式打开<br>“ab+” 以”二进制 读写”模式打开</p><p>“w” 以”写”的方式打开<br>“w+” 以“读写”模式打开<br>“wb” 以“二进制 写”模式打开<br>“wb+” 以“二进制 读写”模式打开</p><p>“r+” 以”读写”模式打开<br>“rb” 以”二进制 读”模式打开<br>“rb+” 以”二进制 读写”模式打开</p><p>f.write(“hello\n”) #如果要写入字符串以外的数据,先将他转换为字符串.</p><h3 id="with函数"><a class="header-anchor" href="#with函数">¶</a>with函数</h3><p>工作原理</p><p><strong>紧跟with后面的语句会被求值，返回对象的__enter__()方法被调用，这个方法的返回值将被赋值给as关键字后面的变量，当with后面的代码块全部被执行完之后，将调用前面返回对象的__exit__()方法。</strong></p><blockquote><p><strong><em>enter</em>_()方法在语句体（with语句包裹起来的代码块）执行之前进入运行，<strong>exit</strong>()方法在语句体执行完毕退出后运行。</strong></p></blockquote><h3 id="write函数"><a class="header-anchor" href="#write函数">¶</a>write函数</h3><p>用于向文件中写入指定字符串。</p><h3 id="sys-stdout-write"><a class="header-anchor" href="#sys-stdout-write">¶</a>sys.stdout.write</h3><p>sys.stdout.write(&quot; “）的本质是print(” “, end=”&quot;)</p><h1>实例</h1><h2 id="豆瓣爬虫"><a class="header-anchor" href="#豆瓣爬虫">¶</a>豆瓣爬虫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error</span><br><span class="line"><span class="keyword">import</span> _sqlite3</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl=<span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    <span class="comment">#1.爬取网页</span></span><br><span class="line">    datalist=getDate(baseurl)</span><br><span class="line">    savepath=<span class="string">&quot;.\\豆瓣电影Top250.xls&quot;</span></span><br><span class="line">    <span class="comment"># 3.保存数据</span></span><br><span class="line">    saveDate(datalist,savepath)</span><br><span class="line">    <span class="comment"># askURL(baseurl)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#影片详情的规则</span></span><br><span class="line">findLink=re.compile(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)       <span class="comment">#创建正则表达式对象，表示规则（字符串的模式）</span></span><br><span class="line"><span class="comment">#影片片名</span></span><br><span class="line">findTitle=re.compile(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#影片的图片</span></span><br><span class="line">findImg=re.compile(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment">#影片评分</span></span><br><span class="line">findRating=re.compile(<span class="string">r&#x27;&lt;span.*property.*&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#影片评价人数</span></span><br><span class="line">findPeople=re.compile(<span class="string">r&#x27;&lt;span&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#找到概况</span></span><br><span class="line">findInq=re.compile(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#找到影片的相关内容</span></span><br><span class="line">findBd=re.compile(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDate</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    datalist=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):       <span class="comment">#调用获取页面信息的函数，10次</span></span><br><span class="line">        url=baseurl+str(i*<span class="number">25</span>)</span><br><span class="line">        html=askURL(url)        <span class="comment">#保存获取到的网页源码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.逐一解析网页</span></span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;item&quot;</span>):</span><br><span class="line">            <span class="comment"># print(item)#测试查看电影item全部信息</span></span><br><span class="line">            data=[]<span class="comment">#保存一部电影的全部信息</span></span><br><span class="line">            item=str(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">#获取到影片详情的链接</span></span><br><span class="line">            link=re.findall(findLink,item)[<span class="number">0</span>]   <span class="comment">#用re用来通过正则表达式查找指定的字符串</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            <span class="comment"># print(link)</span></span><br><span class="line">            title=re.findall(findTitle,item)     <span class="comment">#影片名字</span></span><br><span class="line">            <span class="keyword">if</span>(len(title)==<span class="number">2</span>):</span><br><span class="line">                ctitle=title[<span class="number">0</span>]     <span class="comment">#添加中国名</span></span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle=title[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="comment">#去掉无关的符号</span></span><br><span class="line">                data.append(otitle) <span class="comment">#添加外国名</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(title[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)        <span class="comment">#外国名留空</span></span><br><span class="line">            <span class="comment"># print(title)</span></span><br><span class="line">            img=re.findall(findImg,item)[<span class="number">0</span>]     <span class="comment">#影片图片</span></span><br><span class="line">            data.append(img)</span><br><span class="line">            <span class="comment"># print(img)</span></span><br><span class="line">            rate=re.findall(findRating,item)[<span class="number">0</span>]     <span class="comment">#评价分数</span></span><br><span class="line">            data.append(rate)</span><br><span class="line">            <span class="comment"># print(rate)</span></span><br><span class="line">            people=re.findall(findPeople,item)[<span class="number">0</span>]      <span class="comment">#评价人数</span></span><br><span class="line">            data.append(people)</span><br><span class="line">            <span class="comment"># print(people)</span></span><br><span class="line">            inp=re.findall(findInq,item)     <span class="comment">#评价概述</span></span><br><span class="line">            <span class="keyword">if</span> len(inp)!=<span class="number">0</span>:</span><br><span class="line">                inp=inp[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>,<span class="string">&quot;&quot;</span>)  <span class="comment">#去掉句号</span></span><br><span class="line">                data.append(inp)            <span class="comment">#添加注释</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)            <span class="comment">#留空</span></span><br><span class="line">            <span class="comment"># print(inp)</span></span><br><span class="line">            bd=re.findall(findBd,item)[<span class="number">0</span>]       <span class="comment">#影片相关内容</span></span><br><span class="line">            bd=re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>,<span class="string">&quot; &quot;</span>,bd)   <span class="comment">#去掉br</span></span><br><span class="line">            bd=re.sub(<span class="string">&#x27;/&#x27;</span>,<span class="string">&quot; &quot;</span>,bd)       <span class="comment">#替换</span></span><br><span class="line">            data.append(bd.strip())     <span class="comment">#去掉前后的空格</span></span><br><span class="line">            <span class="comment"># print(bd)</span></span><br><span class="line">            datalist.append(data)      <span class="comment">#把处理好的一部电影信息放入datalist</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(datalist)</span></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    head=&#123;<span class="comment">#模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url,headers=head)</span><br><span class="line">    html=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=urllib.request.urlopen(request)</span><br><span class="line">        html=response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">&quot;code&quot;</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            print(e.reason)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveDate</span>(<span class="params">datalist,savepath</span>):</span></span><br><span class="line">    book=xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>)<span class="comment">#创建workbook对象</span></span><br><span class="line">    sheet=book.add_sheet(<span class="string">&quot;豆瓣电影TOP250&quot;</span>,cell_overwrite_ok=<span class="literal">True</span>)<span class="comment">#创建工作表格</span></span><br><span class="line">    col=(<span class="string">&quot;电影详情链接&quot;</span>,<span class="string">&quot;电影中文名字&quot;</span>,<span class="string">&quot;电影外国名&quot;</span>,<span class="string">&quot;电影图片链接&quot;</span>,<span class="string">&quot;电影评分&quot;</span>,<span class="string">&quot;电影评分人数&quot;</span>,<span class="string">&quot;电影概述&quot;</span>,<span class="string">&quot;电影相关内容&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])<span class="comment">#列名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">        print(<span class="string">&quot;第%d条&quot;</span>%(i+<span class="number">1</span>))</span><br><span class="line">        data=datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])</span><br><span class="line">    book.save(savepath)     <span class="comment">#保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="当当网"><a class="header-anchor" href="#当当网">¶</a>当当网</h2><p>获取什么信息：</p><ul><li>书名</li><li>作者</li><li>封面链接</li><li>价格</li><li>出版日期</li><li>评价人数</li><li>五星好评的次数</li></ul><div class='tip error'><p>error:部分出现乱码，还未解决，应该是生僻字<p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl=<span class="string">&quot;http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1-&quot;</span></span><br><span class="line">    datalist = getDate(baseurl)</span><br><span class="line">    savepath=<span class="string">&quot;.\\当当网.xls&quot;</span></span><br><span class="line">    saveDate(datalist,savepath)</span><br><span class="line"><span class="comment">#书名</span></span><br><span class="line">findBook=re.compile(<span class="string">r&#x27;class=&quot;name&quot;.*?title=&quot;(.*?)&quot;&gt;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line">findAuthor=re.compile(<span class="string">r&#x27;&lt;a href.*?key=(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment"># #封面链接</span></span><br><span class="line">findLink=re.compile(<span class="string">r&#x27;.*?&quot; src=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line"><span class="comment"># #非会员价格</span></span><br><span class="line">findPrice1=re.compile(<span class="string">r&#x27;&lt;span class=&quot;price_r&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#会员价格</span></span><br><span class="line">findPrice2=re.compile(<span class="string">r&#x27;&lt;span class=&quot;price_n&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment">#电子书价格</span></span><br><span class="line">findPrice3=re.compile(<span class="string">r&#x27;&lt;p class=&quot;price_e&quot;&gt;.*&quot;price_n&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment"># #出版日期</span></span><br><span class="line">findDate=re.compile(<span class="string">r&#x27;.*?_info&quot;&gt;&lt;span&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># # 评价人数</span></span><br><span class="line">findPeople=re.compile(<span class="string">r&#x27;&quot;star&quot;&gt;.*?&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># #五星好评次数</span></span><br><span class="line">findStar=re.compile(<span class="string">r&#x27;&quot;biaosheng&quot;&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 出版社</span></span><br><span class="line">findPrint=re.compile(<span class="string">r&#x27;&quot;publisher_info&quot;&gt;.*?&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDate</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    datalist=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">        url=baseurl+str(i)</span><br><span class="line">        html = askURL(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="comment"># print(soup)</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;ul&#x27;</span>,class_=<span class="string">&quot;bang_list&quot;</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> item.find_all(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line"></span><br><span class="line">                data=[]</span><br><span class="line">                item=str(i)</span><br><span class="line">                <span class="comment"># print(item)</span></span><br><span class="line"></span><br><span class="line">                book=re.findall(findBook,item)[<span class="number">0</span>]   <span class="comment">#书名</span></span><br><span class="line">                <span class="comment"># print(book)</span></span><br><span class="line">                data.append(book)</span><br><span class="line">                author=re.findall(findAuthor,item)[<span class="number">0</span>]   <span class="comment">#作者</span></span><br><span class="line">                <span class="comment"># print(author)</span></span><br><span class="line">                data.append(author)</span><br><span class="line">                img=re.findall(findLink,item)[<span class="number">0</span>]        <span class="comment">#图片链接</span></span><br><span class="line">                <span class="comment"># print(img)</span></span><br><span class="line">                data.append(img)</span><br><span class="line">                price=re.findall(findPrice1,item)[<span class="number">0</span>]        <span class="comment">#非会员书籍价格</span></span><br><span class="line">                data.append(price)</span><br><span class="line">                vipPrice=re.findall(findPrice2,item)[<span class="number">0</span>]     <span class="comment">#会员书籍价格</span></span><br><span class="line">                <span class="comment"># print(vipPrice)</span></span><br><span class="line">                data.append(vipPrice)</span><br><span class="line">                EbookPrice = re.findall(findPrice3, item)</span><br><span class="line">                <span class="comment"># print(price)</span></span><br><span class="line">                <span class="keyword">if</span> (len(EbookPrice) == <span class="number">1</span>):</span><br><span class="line">                    Eprice = EbookPrice[<span class="number">0</span>]</span><br><span class="line">                    data.append(Eprice)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># data.append(price)</span></span><br><span class="line">                    data.append(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="comment"># print(data)</span></span><br><span class="line">                date=re.findall(findDate,item)[<span class="number">0</span>]       <span class="comment">#出版日期</span></span><br><span class="line">                data.append(date)</span><br><span class="line">                <span class="comment"># print(date)</span></span><br><span class="line">                people=re.findall(findPeople,item)[<span class="number">0</span>]      <span class="comment">#评价人数</span></span><br><span class="line">                <span class="comment"># print(people)</span></span><br><span class="line">                data.append(people)</span><br><span class="line">                star=re.findall(findStar,item)[<span class="number">0</span>]   <span class="comment">#五星好评数</span></span><br><span class="line">                <span class="comment"># print(star)</span></span><br><span class="line">                data.append(star)</span><br><span class="line">                Print=re.findall(findPrint,item)[<span class="number">0</span>]     <span class="comment">#出版社</span></span><br><span class="line">                <span class="comment"># print(Print)</span></span><br><span class="line">                data.append(Print)</span><br><span class="line">                datalist.append(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    head=&#123;<span class="comment">#模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url,headers=head)</span><br><span class="line">    html=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=urllib.request.urlopen(request)</span><br><span class="line">        html=response.read()<span class="comment">#.decode(&quot;gb2312&quot;)</span></span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">&quot;code&quot;</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            print(e.reason)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveDate</span>(<span class="params">datalist,savepath</span>):</span></span><br><span class="line">    book=xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line">    sheet=book.add_sheet(<span class="string">&quot;当当网书籍&quot;</span>,cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">    col=(<span class="string">&quot;书名&quot;</span>,<span class="string">&quot;作者&quot;</span>,<span class="string">&quot;封面链接&quot;</span>,<span class="string">&quot;非会员价格&quot;</span>,<span class="string">&quot;VIP价格&quot;</span>,<span class="string">&quot;电子书价格&quot;</span>,<span class="string">&quot;出版日期&quot;</span>,<span class="string">&quot;评价人数&quot;</span>,<span class="string">&quot;五星好评数&quot;</span>,<span class="string">&quot;出版社&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">500</span>):</span><br><span class="line">        print(<span class="string">&quot;第%d条&quot;</span>%(i+<span class="number">1</span>))</span><br><span class="line">        data=datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])</span><br><span class="line">    book.save(savepath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">&quot;爬取结束！&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="小说爬取成txt格式"><a class="header-anchor" href="#小说爬取成txt格式">¶</a>小说爬取成txt格式</h2><h3 id="一念永恒-txt"><a class="header-anchor" href="#一念永恒-txt">¶</a>一念永恒.txt</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self</span></span><br><span class="line"><span class="comment"># 类外面的叫函数(function)不叫方法(method)。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">download</span>(<span class="params">object</span>):</span>         <span class="comment">#用来描述具有相同的属性和方法的对象的集合</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>     <span class="comment">#__init__方法的第一个参数永远是self，表示创建的实例本身</span></span><br><span class="line">        self.sever = <span class="string">&#x27;https://www.biqukan.com/&#x27;</span></span><br><span class="line">        self.baseurl = <span class="string">&#x27;https://www.biqukan.com/1_1094/&#x27;</span></span><br><span class="line">        self.titleNames=[]      <span class="comment">#章节的名字</span></span><br><span class="line">        self.titleUrls = []     <span class="comment">#章节的链接</span></span><br><span class="line">        self.titleNums=<span class="number">0</span>        <span class="comment">#章节数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def main():</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     baseurl = &#x27;https://www.biqukan.com/1_1094/&#x27;</span></span><br><span class="line">    <span class="comment">#     # req = requests.get(url=baseurl)</span></span><br><span class="line">    <span class="comment">#     # html = req.text</span></span><br><span class="line">    <span class="comment">#     getData(self.baseurl)</span></span><br><span class="line">    <span class="comment">#     # askURL(baseurl)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">self</span>):</span>      <span class="comment">#可以访问初始化self的定义值</span></span><br><span class="line">        head = &#123;  <span class="comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># datalist=[]</span></span><br><span class="line">        <span class="comment"># titleNums=0</span></span><br><span class="line">        <span class="comment"># url = self.baseurl</span></span><br><span class="line">        <span class="comment"># html=askURL(url)</span></span><br><span class="line">        response = requests.get(url=self.baseurl, headers=head)</span><br><span class="line">        response.encoding = <span class="string">&quot;gb2312&quot;</span></span><br><span class="line">        html = response.text</span><br><span class="line">        bf = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        div=bf.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;listmain&#x27;</span>)</span><br><span class="line">        a_bf=BeautifulSoup(str(div[<span class="number">0</span>]),<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        a=a_bf.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        self.titleNums=len(a[<span class="number">13</span>:])</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> a[<span class="number">13</span>:]:</span><br><span class="line">            self.titleNames.append(each.string)</span><br><span class="line">            self.titleUrls.append(self.sever+each.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">            <span class="comment"># print(each.string,sever+each.get(&#x27;href&#x27;))</span></span><br><span class="line">        <span class="comment"># print(bf)</span></span><br><span class="line">        <span class="comment"># for item in bf.find_all()</span></span><br><span class="line">        <span class="comment"># print(self.titleNames)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveBook</span>(<span class="params">self,name,path,text</span>):</span>  <span class="comment">#第一个参数永远是self，实际调用写入self后面的参数即可</span></span><br><span class="line">        write_flag=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment">#open(路径+文件名, 读写模式, 编码)</span></span><br><span class="line">            f.write(name+<span class="string">&#x27;\n&#x27;</span>)      <span class="comment">#写入path中多行，用于向文件中写入指定字符串。</span></span><br><span class="line">            f.writelines(text)      <span class="comment">#既可以传入字符串又可以传入一个字符序列,并将该字符序列写入文件</span></span><br><span class="line">            f.write(<span class="string">&#x27;\n\n&#x27;</span>)         <span class="comment">#写入回车换行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getContent</span>(<span class="params">self,baseurl</span>):</span></span><br><span class="line">        head = &#123;  <span class="comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># url = baseurl</span></span><br><span class="line">        response = requests.get(url=baseurl, headers=head)</span><br><span class="line">        response.encoding = <span class="string">&quot;gb2312&quot;</span></span><br><span class="line">        html = response.text</span><br><span class="line"></span><br><span class="line">        <span class="comment"># html = askURL(url)</span></span><br><span class="line">        bf = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        texts=bf.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;showtxt&#x27;</span>)</span><br><span class="line">        texts=texts[<span class="number">0</span>].text.replace(<span class="string">&#x27;\xa0&#x27;</span>*<span class="number">8</span>,<span class="string">&#x27;\n\n&#x27;</span>)    <span class="comment">#去除空格八次，用回车换行替换</span></span><br><span class="line">        <span class="keyword">return</span> texts    <span class="comment">#返回每一章的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def askURL(url):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     # request = requests.get(url, headers=head)</span></span><br><span class="line">    <span class="comment">#     response = requests.get(url=url,headers=head)</span></span><br><span class="line">    <span class="comment">#     html = &quot;&quot;</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         if response.status_code == 200:</span></span><br><span class="line">    <span class="comment">#             response.encoding = &quot;gb2312&quot;</span></span><br><span class="line">    <span class="comment">#             html = response.text</span></span><br><span class="line">    <span class="comment">#     except requests.RequestException:</span></span><br><span class="line">    <span class="comment">#         return None</span></span><br><span class="line">    <span class="comment">#     return html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    d1=download()<span class="comment">#这里对类进行实例化</span></span><br><span class="line">    d1.getData()<span class="comment">#调用类中定义的方法</span></span><br><span class="line">    print(<span class="string">&#x27;小说开始下载：&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(d1.titleNums):   <span class="comment">#i循环总章节次</span></span><br><span class="line">        d1.saveBook(d1.titleNames[i],<span class="string">&#x27;白小纯.txt&#x27;</span>,d1.getContent(d1.titleUrls[i]))<span class="comment">#调用方法，没有txt就创建，设置i是调用不同的章节链接</span></span><br><span class="line">        sys.stdout.write(<span class="string">&quot;已下载:%.3f%%&quot;</span>%  float(i/d1.titleNums) + <span class="string">&#x27;\r&#x27;</span>)<span class="comment">#%格式化输出</span></span><br><span class="line">        <span class="comment">#.3f保留三位小数</span></span><br><span class="line">        sys.stdout.flush()<span class="comment">#强制其“刷新”缓冲区，刷新输出</span></span><br><span class="line">        <span class="comment"># main()</span></span><br><span class="line">    print(<span class="string">&#x27;小说下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="妹子图"><a class="header-anchor" href="#妹子图">¶</a>妹子图</h2><p>不完美，ip被禁！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> concurrent</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每一页的章节链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageUrls</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        baseurl=<span class="string">&#x27;https://www.mzitu.com/page/&#123;&#125;&#x27;</span>.format(i)</span><br><span class="line">        head = &#123;</span><br><span class="line">            <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response=requests.get(url=baseurl,headers=head,)</span><br><span class="line">        response.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        html=response.text</span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        list=soup.find(class_=<span class="string">&#x27;postlist&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">        urls=[]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">            url=item.find(<span class="string">&#x27;span&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="comment"># print(&#x27;页面链接：%s&#x27;%url)</span></span><br><span class="line">            urls.append(url)</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每一页的链接地址，并下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPages</span>(<span class="params">url</span>):</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=head)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    total = soup.find(class_=<span class="string">&#x27;pagenavi&#x27;</span>).find_all(<span class="string">&#x27;a&#x27;</span>)[<span class="number">-2</span>].find(<span class="string">&#x27;span&#x27;</span>).string</span><br><span class="line">    title = soup.find(<span class="string">&#x27;h2&#x27;</span>).string</span><br><span class="line">    imageList=[]</span><br><span class="line">    <span class="comment"># print(total)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(total)):</span><br><span class="line">        <span class="comment"># html = request_page(url + &#x27;/%s&#x27; % (i + 1))</span></span><br><span class="line">        head = &#123;</span><br><span class="line">            <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url=url + <span class="string">&#x27;/%s&#x27;</span> % (i + <span class="number">1</span>), headers=head)</span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        html = response.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        imgUrl = soup.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        imageList.append(imgUrl)</span><br><span class="line">    <span class="comment"># print(imageList)</span></span><br><span class="line">    downloadAllImage(title,imageList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载每一页的图片，并写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadAllImage</span>(<span class="params">title,imagelist</span>):</span></span><br><span class="line">    os.mkdir(title)</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> imagelist:</span><br><span class="line">        filename = <span class="string">&#x27;%s/%s.jpg&#x27;</span> % (title, str(j))</span><br><span class="line">        print(<span class="string">&#x27;downloading....%s : NO.%s&#x27;</span> % (title, str(j)))</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            img = requests.get(item, allow_redirects=<span class="literal">False</span>,headers=head)</span><br><span class="line">            f.write(img.content)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all_images</span>(<span class="params">list_page_urls</span>):</span><span class="comment">#多线程下载</span></span><br><span class="line">    <span class="comment"># 获取每一个详情妹纸</span></span><br><span class="line">    <span class="comment"># works = len(list_page_urls)</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> exector:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> list_page_urls:</span><br><span class="line">            exector.submit(getPages, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># urls=getPageUrls()</span></span><br><span class="line">    <span class="comment"># getPages(&#x27;https://www.mzitu.com/218092&#x27;)</span></span><br><span class="line">    listPageUrls=getPageUrls()</span><br><span class="line">    <span class="comment"># print(listPageUrls)</span></span><br><span class="line">    download_all_images(listPageUrls)</span><br><span class="line">    print(<span class="string">&#x27;爬虫结束！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>改进：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> concurrent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageUrls</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        baseurl=<span class="string">&#x27;https://www.mzitu.com/page/&#123;&#125;&#x27;</span>.format(i)</span><br><span class="line">        proxy=&#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;61.135.185.78:80&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;61.135.185.172:80&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;111.13.100.91:80&#x27;</span></span><br><span class="line">               &#125;</span><br><span class="line">        head = &#123;</span><br><span class="line">            <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span></span><br><span class="line">            <span class="comment"># &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)<span class="comment">#设置访问间隔</span></span><br><span class="line">        response=requests.get(url=baseurl,headers=head,proxies=proxy)</span><br><span class="line">        response.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        html=response.text</span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        list=soup.find(class_=<span class="string">&#x27;postlist&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">        urls=[]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">            url=item.find(<span class="string">&#x27;span&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="comment"># print(&#x27;页面链接：%s&#x27;%url)</span></span><br><span class="line">            urls.append(url)</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每一页的链接地址，并下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPages</span>(<span class="params">url</span>):</span></span><br><span class="line">    proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;61.135.185.78:80&#x27;</span>&#125;</span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span></span><br><span class="line">        <span class="comment"># &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    response = requests.get(url=url, headers=head,proxies=proxy)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    total = soup.find(class_=<span class="string">&#x27;pagenavi&#x27;</span>).find_all(<span class="string">&#x27;a&#x27;</span>)[<span class="number">-2</span>].find(<span class="string">&#x27;span&#x27;</span>).string<span class="comment">#获取页数转换成字符串形式</span></span><br><span class="line">    title = soup.find(<span class="string">&#x27;h2&#x27;</span>).string<span class="comment">#找出标题</span></span><br><span class="line">    imageList=[]<span class="comment">#存储每一页的照片链接</span></span><br><span class="line">    <span class="comment"># print(total)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(total)):</span><br><span class="line">        <span class="comment"># html = request_page(url + &#x27;/%s&#x27; % (i + 1))</span></span><br><span class="line">        proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;61.135.185.78:80&#x27;</span>&#125;</span><br><span class="line">        head = &#123;</span><br><span class="line">            <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">            <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span></span><br><span class="line">            <span class="comment">#&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        response = requests.get(url=url + <span class="string">&#x27;/%s&#x27;</span> % (i + <span class="number">1</span>), headers=head,proxies=proxy)<span class="comment">#</span></span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        html = response.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        imgUrl = soup.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)<span class="comment">#找出每张照片的链接</span></span><br><span class="line">        imageList.append(imgUrl)</span><br><span class="line">    <span class="comment"># print(imageList)</span></span><br><span class="line">    downloadAllImage(title,imageList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载每一页的图片，并写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadAllImage</span>(<span class="params">title,imagelist</span>):</span></span><br><span class="line">    os.mkdir(title)</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;61.135.185.78:80&#x27;</span>&#125;</span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.mzitu.com/&quot;</span>,</span><br><span class="line">        <span class="comment"># 用户代理，告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我么可以接收什么水平的文件内容）</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span></span><br><span class="line">        <span class="comment">#&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> imagelist:</span><br><span class="line">        filename = <span class="string">&#x27;%s/%s.jpg&#x27;</span> % (title, str(j))</span><br><span class="line">        print(<span class="string">&#x27;downloading....%s : NO.%s&#x27;</span> % (title, str(j)))</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#打开新建的文件，并写入图片</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            img = requests.get(item, allow_redirects=<span class="literal">False</span>,headers=head,proxies=proxy)<span class="comment">#allow_redirects=False为拒绝默认的301/302重定向</span></span><br><span class="line">            <span class="comment"># 获取二进制数据; 注意: 这里不要解码, 因为图片,视频等文件都是二进制的不是文本,不需要解码</span></span><br><span class="line">            f.write(img.content)<span class="comment">#写入图片（下载图片）</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置多线程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all_images</span>(<span class="params">list_page_urls</span>):</span></span><br><span class="line">    <span class="comment"># 获取每一个详情妹纸</span></span><br><span class="line">    <span class="comment"># works = len(list_page_urls)</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> exector:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> list_page_urls:</span><br><span class="line">            exector.submit(getPages, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># urls=getPageUrls()</span></span><br><span class="line">    <span class="comment"># print(urls)</span></span><br><span class="line">    <span class="comment"># getPages(&#x27;https://www.mzitu.com/218092&#x27;)</span></span><br><span class="line">    listPageUrls=getPageUrls()</span><br><span class="line">    <span class="comment"># print(listPageUrls)</span></span><br><span class="line">    download_all_images(listPageUrls)</span><br><span class="line">    print(<span class="string">&#x27;爬虫结束！&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;预备知识&lt;/h1&gt;
&lt;h2 id=&quot;正则法则&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#正则法则&quot;&gt;¶&lt;/a&gt;正则法则&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表任意数字，就是阿拉伯数字 0-9 这些玩意。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\D&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;大写的就是和小写的唱反调，\d 你代表的是任意数字是吧？那么我 \D 就代表不是数字的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表字母，数字，下划线。也就是 a-z、A-Z、0-9、_。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\W&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;跟 \w 唱反调，代表不是字母，不是数字，不是下划线的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表一个换行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表一个回车。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表换页。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表一个 Tab 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表所有的空白字符，也就是上面这个：\n、\r、\t、\f。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;跟 \s 唱反调，代表所有不是空白的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\A&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表字符串的开始。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\Z&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表字符串的结束。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配字符串开始的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配字符创结束的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表所有的单个字符，除了 \n \r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;[...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代表在 [] 范围内的字符，比如 [a-z] 就代表 a到z的字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;[^...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;跟 […] 唱反调，代表不在 [] 范围内的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;#123;n&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配在 {n} 前面的东西，比如: o{2} 不能匹配 Bob 中的 o ，但是能匹配 food 中的两个o。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;#123;n,m&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配在 {n,m} 前面的东西，比如：o{1,3} 将匹配“fooooood”中的前三个o。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;#123;n，&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配在 {n,} 前面的东西，比如：o{2,} 不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;和 {0,} 一个样，匹配 * 前面的 0 次或多次。 比如 zo* 能匹配“z”、“zo”以及“zoo”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;和{1，} 一个样，匹配 + 前面 1 次或多次。 比如 zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;？&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;和{0,1} 一个样，匹配 ？前面 0 次或 1 次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;a|b&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配 a 或者 b。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;（）&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配括号里面的内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#贪婪匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content=&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello,world.xiaoshuaib has 100 bananas&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res=re.match(&lt;span class=&quot;string&quot;&gt;&amp;#x27;^he.*(\d+)\s.*s$&amp;#x27;&lt;/span&gt;,content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(res.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#结果是0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#非贪婪匹配，多了个？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content=&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello,world.xiaoshuaib has 100 bananas&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res=re.match(&lt;span class=&quot;string&quot;&gt;&amp;#x27;^he.*?(\d+)\s.*s$&amp;#x27;&lt;/span&gt;,content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(res.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#结果是100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓贪婪匹配就是第一段代码一个数一个数都要去匹配&lt;/p&gt;
&lt;p&gt;而非贪婪是直接把 100 给匹配出来了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;.\*？&lt;/code&gt;:表示的就是匹配任意字符&lt;/p&gt;
&lt;p&gt;.*？的 . 代表所有的单个字符，除了 \n \r&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;字符串有换行:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content=&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;hello,world.xiaoshuaib &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;has 100 bananas&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res=re.match(&lt;span class=&quot;string&quot;&gt;&amp;#x27;^he.*?(\d+)\s.*s$&amp;#x27;&lt;/span&gt;,content,re.S)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(res.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#直接用 re.S &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://stardust14.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="http://stardust14.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>js学习</title>
    <link href="http://stardust14.com/2020/10/17/js%E5%AD%A6%E4%B9%A0/"/>
    <id>http://stardust14.com/2020/10/17/js%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-17T03:40:44.000Z</published>
    <updated>2020-11-22T03:11:14.964Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>快速入门</h1>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;快速入门&lt;/h1&gt;
</summary>
    
    
    
    <category term="js" scheme="http://stardust14.com/categories/js/"/>
    
    
    <category term="js" scheme="http://stardust14.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫随笔记录</title>
    <link href="http://stardust14.com/2020/10/14/python%E7%88%AC%E8%99%AB%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/"/>
    <id>http://stardust14.com/2020/10/14/python%E7%88%AC%E8%99%AB%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-14T11:06:42.000Z</published>
    <updated>2020-10-18T14:06:10.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>前言</h1><p>记录一下遇到的错误，或者是疑问，解决的问题，随笔记录！！！</p><h1>python 爬虫问题</h1><h2 id="语句解释"><a class="header-anchor" href="#语句解释">¶</a>语句解释</h2><p>爬虫中<code>if __name__ == '__main__'</code>语句解释：</p><p>相当于是 Python <strong>模拟的程序入口</strong>。</p><p>由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于 <code>__name__</code> 的值。</p><p><code>__name__</code>是Python的内置变量，用于指代当前模块。</p><p>两个例子说明：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hello,I\&#x27;m A&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;A的__name__值:&#123;&#125;&#x27;</span>.format(__name__))</span><br><span class="line">print(<span class="string">&#x27;---------------&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> day01 <span class="keyword">import</span> demo01</span><br><span class="line">print(<span class="string">&#x27;hello,I\&#x27;m B&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;B中__name__的值：&#123;&#125;&#x27;</span>.format(__name__))</span><br></pre></td></tr></table></figure><p>上述两个例子分别结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello,I<span class="string">&#x27;m A</span></span><br><span class="line"><span class="string">A的__name__值:__main__</span></span><br><span class="line"><span class="string">---------------</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello,I<span class="string">&#x27;m A</span></span><br><span class="line"><span class="string">A的__name__值:day01.demo01</span></span><br><span class="line"><span class="string">---------------</span></span><br><span class="line"><span class="string">hello,I&#x27;</span>m B</span><br><span class="line">B中__name__的值：__main__</span><br></pre></td></tr></table></figure><p>发现神奇之处了吗？当哪个模块被直接执行时，该模块“<code>__name__</code>”的值就是“<code>__main__</code>”，当被导入另一模块时，“<code>__name__</code>”的值就是模块的真实名称。用一个类比来解释一下：记得小时候要轮流打算教室，轮到自己的时候（模块被直接执行的时候），我们会说今天是“我”（<code>__main__</code>）值日，称呼其他人时，我们就会直接喊他们的名字。所以，“<code>__main__</code>”就相当于当事人，或者说第一人称的“我”。</p><p>所以，当运行“<code>if __name__=='__main__':</code>”语句时，如果当前模块时被直接执行，<code>__name__</code>的值就是<code>__main__</code>，条件判断的结果为True，“<code>if __name__=='__main__':</code>”下面的代码块就会被执行。</p><h2 id="遇到的错误"><a class="header-anchor" href="#遇到的错误">¶</a>遇到的错误</h2><p>在进行当当网爬虫练习时，出现<code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd0 in position 284: invalid continuation byte</code></p><p>修改字符集参数，一般这种情况出现得较多是在国标码(GBK)和utf-8之间选择出现了问题。<br>出现异常报错是由于设置了decode()方法的第二个参数errors为严格（strict）形式造成的，因为默认就是这个参数，将其更改为ignore等即可。例如:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=response.read().decode(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure><h1>PyCharm中的问题</h1><h2 id="第三方库安装失败"><a class="header-anchor" href="#第三方库安装失败">¶</a>第三方库安装失败</h2><p>pycharm安装路径：<code>D:\Python\Code\venv\Scripts&gt;</code>在该径路下打开命令窗口，输入提示的信息。<code>python.exe -m pip install --upgrade pip</code></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201018204828.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;记录一下遇到的错误，或者是疑问，解决的问题，随笔记录！！！&lt;/p&gt;
&lt;h1&gt;python 爬虫问题&lt;/h1&gt;
&lt;h2 id=&quot;语句解释&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#语句解释&quot;&gt;¶&lt;/a&gt;语句解释&lt;/h2&gt;
&lt;p&gt;爬虫中&lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt;语句解释：&lt;/p&gt;
&lt;p&gt;相当于是 Python &lt;strong&gt;模拟的程序入口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于 &lt;code&gt;__name__&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt;是Python的内置变量，用于指代当前模块。&lt;/p&gt;
&lt;p&gt;两个例子说明：&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://stardust14.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="python" scheme="http://stardust14.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用</title>
    <link href="http://stardust14.com/2020/10/09/Typora%E4%BD%BF%E7%94%A8/"/>
    <id>http://stardust14.com/2020/10/09/Typora%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-09T03:28:19.000Z</published>
    <updated>2021-04-09T09:51:53.910Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>公式的使用</h1><p><strong>上/下标</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>$x^2 $</td><td>x^2</td></tr><tr><td>$y_1 $</td><td>y_1</td></tr></tbody></table><p><strong>分式</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span></span></span></span></td><td>1/2</td></tr><tr><td>$ \frac{1}{2}$</td><td>\frac{1}{2}</td></tr></tbody></table><p><strong>省略号</strong></p><table><thead><tr><th>省略号</th><th>Markdown</th></tr></thead><tbody><tr><td>$ \cdots$</td><td>\cdots</td></tr></tbody></table><p><strong>开根号</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mn>2</mn></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span></td><td>\sqrt{2}</td></tr></tbody></table><p><strong>矢量</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></td><td>\vec{a}</td></tr></tbody></table><p><strong>积分</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo><mi>x</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int{x}dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></td><td>\int{x}dx</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mn>1</mn><mn>2</mn></msubsup><mi>x</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{1}^{2}{x}dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></td><td>\int_{1}^{2}{x}dx</td></tr></tbody></table><p><strong>极限</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lim</mi><mo>⁡</mo><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow></mrow><annotation encoding="application/x-tex">\lim{a+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span></span></span></span></span></td><td>\lim{a+b}</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\lim_{n\rightarrow+\infty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></td><td>\lim_{n\rightarrow+\infty}</td></tr></tbody></table><p><strong>累加</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">\sum{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span></span></td><td>\sum{a}</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>100</mn></msubsup><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{n=1}^{100}{a_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></td><td>\sum_{n=1}^{100}{a_n}</td></tr></tbody></table><p><strong>累乘</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∏</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\prod{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></td><td>\prod{x}</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>99</mn></msubsup><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\prod_{n=1}^{99}{x_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></td><td>\prod_{n=1}^{99}{x_n}</td></tr></tbody></table><p><strong>三角函数</strong></p><table><thead><tr><th>三角函数</th><th>Markdown</th></tr></thead><tbody><tr><td>$ ⁡ \sin$</td><td>\sin</td></tr></tbody></table><p><strong>对数函数</strong></p><table><thead><tr><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>$ \ln2$</td><td>\ln2</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mn>8</mn></mrow><annotation encoding="application/x-tex">\log_28</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span></span></td><td>\log_28</td></tr><tr><td>$ \lg10$</td><td>\lg10</td></tr></tbody></table><p><strong>关系运算符</strong></p><table><thead><tr><th>运算符</th><th>Markdown</th></tr></thead><tbody><tr><td>$± $</td><td>\pm</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span></td><td>\times</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span></td><td>\cdot</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span></td><td>\div</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td><td>\neq</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span></td><td>\equiv</td></tr><tr><td>$ \leq$</td><td>\leq</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span></td><td>\geq</td></tr></tbody></table><p><strong>其它特殊字符</strong></p><table><thead><tr><th>符号</th><th>Markdown</th></tr></thead><tbody><tr><td>$ \forall$</td><td>\forall</td></tr><tr><td>$ \infty$</td><td>\infty</td></tr><tr><td>$ \emptyset$</td><td>\emptyset</td></tr><tr><td>$ \exists$</td><td>\exists</td></tr><tr><td>$ \nabla$</td><td>\nabla</td></tr><tr><td>$ \bot$</td><td>\bot</td></tr><tr><td>$ \angle$</td><td>\angle</td></tr><tr><td>$ \because$</td><td>\because</td></tr><tr><td>$ \therefore$</td><td>\therefore</td></tr></tbody></table><p>花括号<br>$c(u)=\begin{cases} \sqrt\frac{1}{N}，u=0\ \sqrt\frac{2}{N}， u\neq0\end{cases}  $</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">c(u)=\begin&#123;cases&#125; \sqrt\frac&#123;1&#125;&#123;N&#125;，u=0\\ \sqrt\frac&#123;2&#125;&#123;N&#125;， u\neq0\end&#123;cases&#125;  </span><br></pre></td></tr></table></figure><p>空格<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mspace width="1em"/><mi>b</mi></mrow><annotation encoding="application/x-tex">a \quad b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">b</span></span></span></span></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">a \quad b</span><br></pre></td></tr></table></figure><p>矩阵</p>a = \left[\matrix{  \alpha_1 & test1\\  \alpha_2 & test2\\  \alpha_3 & test3 }\right]<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">a = \left[</span><br><span class="line">\matrix&#123;</span><br><span class="line">  \alpha<span class="emphasis">_1 &amp; test1\\</span></span><br><span class="line"><span class="emphasis">  \alpha_</span>2 &amp; test2\\</span><br><span class="line">  \alpha<span class="emphasis">_3 &amp; test3 </span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">\right]</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><h1>希腊字母写法</h1><table><thead><tr><th>字母</th><th>代码</th></tr></thead><tbody><tr><td>α</td><td><code>$\alpha$</code></td></tr><tr><td>β</td><td><code>$\beta$</code></td></tr><tr><td>γ</td><td><code>$\gamma$</code></td></tr><tr><td>Γ</td><td><code>$\Gamma$</code></td></tr><tr><td>δ</td><td><code>$\delta$</code></td></tr><tr><td>Δ</td><td><code>$\Delta$ </code></td></tr><tr><td>ϵ</td><td><code>$\epsilon$</code></td></tr><tr><td>ε</td><td><code>$\varepsilon$</code></td></tr><tr><td>ζ</td><td><code>$\zeta$</code></td></tr><tr><td>η</td><td><code>$\eta$</code></td></tr><tr><td>θ</td><td><code>$\theta$</code></td></tr><tr><td>Θ</td><td><code>$\Theta$</code></td></tr><tr><td>ϑ</td><td><code>$\vartheta$</code></td></tr><tr><td>ι</td><td><code>$\iota$</code></td></tr><tr><td>κ</td><td><code>$\kappa$</code></td></tr><tr><td>λ</td><td><code>$\lambda$</code></td></tr><tr><td>Λ</td><td><code>$\Lambda$</code></td></tr><tr><td>μ</td><td><code>$\mu$</code></td></tr><tr><td>ν</td><td><code>$\nu$</code></td></tr><tr><td>ξ</td><td><code>$\xi$</code></td></tr><tr><td>Ξ</td><td><code>$\Xi$</code></td></tr><tr><td>π</td><td><code>$\pi$</code></td></tr><tr><td>Π</td><td><code>$\Pi$</code></td></tr><tr><td>ϖ</td><td><code>$\varpi$</code></td></tr><tr><td>ρ</td><td><code>$\rho$</code></td></tr><tr><td>ϱ</td><td><code>$\varrho$</code></td></tr><tr><td>σ</td><td><code>$\sigma$</code></td></tr><tr><td>Σ</td><td><code>$\Sigma$</code></td></tr><tr><td>ς</td><td><code>$\varsigma$</code></td></tr><tr><td>τ</td><td><code>$\tau$</code></td></tr><tr><td>υ</td><td><code>$\upsilon$</code></td></tr><tr><td>Υ</td><td><code>$\Upsilon$</code></td></tr><tr><td>ϕ</td><td><code>$\phi$</code></td></tr><tr><td>Φ</td><td><code>$\Phi$</code></td></tr><tr><td>φ</td><td><code>$\varphi$</code></td></tr><tr><td>χ</td><td><code>$\chi$</code></td></tr><tr><td>ψ</td><td><code>$\psi$</code></td></tr><tr><td>Ψ</td><td><code>$\Psi$</code></td></tr><tr><td>Ω</td><td><code>$\Omega$</code></td></tr><tr><td>ω</td><td><code>$\omega$</code></td></tr></tbody></table><h1>字母上面加横线</h1><p>输入 \overline{G} 显示 ( G ‾ ) $$(\overline{G})$$<br>输入 \widehat{G} 显示( G ^ ) $$(\widehat{G} )$$(<em>G</em>)<br>输入 \hat{G} 显示 ( G ^ ) $$( \hat{G})$$(<em>G</em>^)<br>输入 \widetilde 显示 ( G ~ ) $$(\widetilde{G})$$(<em>G</em>)<br>输入 \dot{G} 显示 ( G ˙ )$$ (\dot{G})$$(<em>G</em>˙)<br>输入 \ddot{G} 显示( G ¨ ) $$(\ddot{G})$$(<em>G</em>¨)</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;公式的使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;上/下标&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算式&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$x^2 $&lt;/td&gt;
&lt;td&gt;x^2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$y_1 $&lt;/td&gt;
&lt;td&gt;y_1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;分式&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算式&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1/2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1/2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$ \frac{1}{2}$&lt;/td&gt;
&lt;td&gt;\frac{1}{2}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;省略号&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;省略号&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$ \cdots$&lt;/td&gt;
&lt;td&gt;\cdots&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开根号&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算式&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msqrt&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msqrt&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\sqrt{2}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.04em;vertical-align:-0.13278em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord sqrt&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.90722em;&quot;&gt;&lt;span class=&quot;svg-align&quot; style=&quot;top:-3em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot; style=&quot;padding-left:0.833em;&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-2.86722em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hide-tail&quot; style=&quot;min-width:0.853em;height:1.08em;&quot;&gt;&lt;svg width=&quot;400em&quot; height=&quot;1.08em&quot; viewBox=&quot;0 0 400000 1080&quot; preserveAspectRatio=&quot;xMinYMin slice&quot;&gt;&lt;path d=&quot;M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.13278em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;\sqrt{2}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="typora" scheme="http://stardust14.com/categories/typora/"/>
    
    
    <category term="typora" scheme="http://stardust14.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>C语言例题</title>
    <link href="http://stardust14.com/2020/09/24/C%E8%AF%AD%E8%A8%80%E4%BE%8B%E9%A2%98/"/>
    <id>http://stardust14.com/2020/09/24/C%E8%AF%AD%E8%A8%80%E4%BE%8B%E9%A2%98/</id>
    <published>2020-09-24T13:42:09.000Z</published>
    <updated>2020-09-29T13:41:17.859Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>前言</h1><p>做的例题整理，修改和改进</p><blockquote><p>VS2019中scanf语句要使用scanf_s</p></blockquote><h1>练习实例</h1><p>ex1:</p><p>ex2:</p><p>ex3:</p><p>ex4:**题目：**输入某年某月某日，判断这一天是这一年的第几天？</p><p>**程序分析：**以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊情况，闰年且输入月份大于3时需考虑多加一天。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day, month, year, sum, leap;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入年、月、日，格式为：年,月,日（2020,9,24[英文标点]）\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d,%d,%d&quot;</span>, &amp;year, &amp;month, &amp;day);  <span class="comment">// 格式为：2020,9,24</span></span><br><span class="line">    <span class="keyword">switch</span> (month) <span class="comment">// 先计算某月以前月份的总天数</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:sum = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:sum = <span class="number">31</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:sum = <span class="number">59</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:sum = <span class="number">90</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:sum = <span class="number">120</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:sum = <span class="number">151</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:sum = <span class="number">181</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:sum = <span class="number">212</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:sum = <span class="number">243</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:sum = <span class="number">273</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:sum = <span class="number">304</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:sum = <span class="number">334</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;data error&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum + day;<span class="comment">//再加上某天的天数</span></span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;<span class="comment">//判断是否是闰年</span></span><br><span class="line">        leap = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        leap = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leap == <span class="number">1</span> &amp;&amp; month &gt; <span class="number">2</span>) &#123;<span class="comment">//如果是闰年且月份大于2，总数应该加一天</span></span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是这一年的第%d天\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>☑️调试时要用英文标点</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">请输入年、月、日，格式为：年,月,日（<span class="number">2020</span>,<span class="number">9</span>,<span class="number">24</span>）</span><br><span class="line"><span class="number">2020</span>,<span class="number">9</span>,<span class="number">10</span></span><br><span class="line">这是这一年的第<span class="number">254</span>天</span><br></pre></td></tr></table></figure><p>ex5:输入三个整数x,y,z，请把这三个数由小到大输出。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入三个整数x,y,z，请把这三个数由小到大输出。</span></span><br><span class="line"><span class="comment">//要用三个if语句并行</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z, t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n输入三个数字：\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; z) &#123;<span class="comment">//交换x，z的值</span></span><br><span class="line">t = z;</span><br><span class="line">z = x;</span><br><span class="line">x = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&gt;z) &#123;</span><br><span class="line">t = y;</span><br><span class="line">y = z;</span><br><span class="line">z = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从大到小为：%d&gt;%d&gt;%d\n&quot;</span>, z, y, x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从小到大的排列：%d%d%d\n&quot;</span>, x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入三个数字：</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">从大到小为：<span class="number">3</span>&gt;<span class="number">2</span>&gt;<span class="number">1</span></span><br><span class="line">从小到大的排列：<span class="number">123</span></span><br></pre></td></tr></table></figure><p>ex6:输出9*9口诀</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出9*9口诀。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;=i; j++) &#123;</span><br><span class="line">            m = i * j;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-3d&quot;</span>, i, j, m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>*<span class="number">1</span>=<span class="number">2</span>  <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">3</span>*<span class="number">1</span>=<span class="number">3</span>  <span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span>  <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">4</span>*<span class="number">1</span>=<span class="number">4</span>  <span class="number">4</span>*<span class="number">2</span>=<span class="number">8</span>  <span class="number">4</span>*<span class="number">3</span>=<span class="number">12</span> <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">5</span>*<span class="number">1</span>=<span class="number">5</span>  <span class="number">5</span>*<span class="number">2</span>=<span class="number">10</span> <span class="number">5</span>*<span class="number">3</span>=<span class="number">15</span> <span class="number">5</span>*<span class="number">4</span>=<span class="number">20</span> <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">6</span>*<span class="number">1</span>=<span class="number">6</span>  <span class="number">6</span>*<span class="number">2</span>=<span class="number">12</span> <span class="number">6</span>*<span class="number">3</span>=<span class="number">18</span> <span class="number">6</span>*<span class="number">4</span>=<span class="number">24</span> <span class="number">6</span>*<span class="number">5</span>=<span class="number">30</span> <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">7</span>*<span class="number">1</span>=<span class="number">7</span>  <span class="number">7</span>*<span class="number">2</span>=<span class="number">14</span> <span class="number">7</span>*<span class="number">3</span>=<span class="number">21</span> <span class="number">7</span>*<span class="number">4</span>=<span class="number">28</span> <span class="number">7</span>*<span class="number">5</span>=<span class="number">35</span> <span class="number">7</span>*<span class="number">6</span>=<span class="number">42</span> <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">8</span>*<span class="number">1</span>=<span class="number">8</span>  <span class="number">8</span>*<span class="number">2</span>=<span class="number">16</span> <span class="number">8</span>*<span class="number">3</span>=<span class="number">24</span> <span class="number">8</span>*<span class="number">4</span>=<span class="number">32</span> <span class="number">8</span>*<span class="number">5</span>=<span class="number">40</span> <span class="number">8</span>*<span class="number">6</span>=<span class="number">48</span> <span class="number">8</span>*<span class="number">7</span>=<span class="number">56</span> <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">9</span>*<span class="number">1</span>=<span class="number">9</span>  <span class="number">9</span>*<span class="number">2</span>=<span class="number">18</span> <span class="number">9</span>*<span class="number">3</span>=<span class="number">27</span> <span class="number">9</span>*<span class="number">4</span>=<span class="number">36</span> <span class="number">9</span>*<span class="number">5</span>=<span class="number">45</span> <span class="number">9</span>*<span class="number">6</span>=<span class="number">54</span> <span class="number">9</span>*<span class="number">7</span>=<span class="number">63</span> <span class="number">9</span>*<span class="number">8</span>=<span class="number">72</span> <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><p>ex7:有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？（输出前40个月即可）。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="number">1</span>, f2=<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;<span class="comment">//一次输出两位f1,f2,所以取i&lt;=20</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%12d%12d&quot;</span>,f1,f2);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        f1 = f1 + f2;</span><br><span class="line">        f2 = f1 + f2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">       <span class="number">1</span>           <span class="number">1</span>           <span class="number">2</span>           <span class="number">3</span></span><br><span class="line">       <span class="number">5</span>           <span class="number">8</span>          <span class="number">13</span>          <span class="number">21</span></span><br><span class="line">      <span class="number">34</span>          <span class="number">55</span>          <span class="number">89</span>         <span class="number">144</span></span><br><span class="line">     <span class="number">233</span>         <span class="number">377</span>         <span class="number">610</span>         <span class="number">987</span></span><br><span class="line">    <span class="number">1597</span>        <span class="number">2584</span>        <span class="number">4181</span>        <span class="number">6765</span></span><br><span class="line">   <span class="number">10946</span>       <span class="number">17711</span>       <span class="number">28657</span>       <span class="number">46368</span></span><br><span class="line">   <span class="number">75025</span>      <span class="number">121393</span>      <span class="number">196418</span>      <span class="number">317811</span></span><br><span class="line">  <span class="number">514229</span>      <span class="number">832040</span>     <span class="number">1346269</span>     <span class="number">2178309</span></span><br><span class="line"> <span class="number">3524578</span>     <span class="number">5702887</span>     <span class="number">9227465</span>    <span class="number">14930352</span></span><br><span class="line"><span class="number">24157817</span>    <span class="number">39088169</span>    <span class="number">63245986</span>   <span class="number">102334155</span></span><br></pre></td></tr></table></figure><p>ex8:判断101到200之间的素数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;做的例题整理，修改和改进&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VS2019中scanf语句要使用scanf_s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;练习实例&lt;/h1&gt;
&lt;p&gt;ex1:&lt;/p&gt;
&lt;p&gt;ex2:&lt;/p&gt;
&lt;p&gt;ex3:&lt;/p&gt;
&lt;p&gt;ex4:**题目：**输入某年某月某日，判断这一天是这一年的第几天？&lt;/p&gt;
&lt;p&gt;**程序分析：**以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊情况，闰年且输入月份大于3时需考虑多加一天。&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://stardust14.com/categories/C/"/>
    
    
    <category term="C" scheme="http://stardust14.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB例题</title>
    <link href="http://stardust14.com/2020/09/22/MATLAB%E4%BE%8B%E9%A2%98/"/>
    <id>http://stardust14.com/2020/09/22/MATLAB%E4%BE%8B%E9%A2%98/</id>
    <published>2020-09-22T13:16:26.000Z</published>
    <updated>2020-11-12T12:23:16.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>引言</h1><p>参考胡广书老师所著的《数字信号处理-理论算法与实现》</p><p>下面给出Matlab中下标及希腊字母的使用方法，还有更多的使用方法可以参考matlab帮助 文档中的Text Properties: 下标用 _(下划线) 上标用^ （尖号） 希腊字母等特殊字符用 \加拼音如α \alphaβ \betaγ \gammaθ \thetaΘ \ThetaГ \Gammaδ \deltaΔ \Deltaξ \xiΞ \Xiη \eltaε \epsilongζ \zetaμ \miuυ \nuτ \tauλ \lamdaΛ \Lamdaπ \piΠ \Piσ \sigmaΣ \Sigmaφ \phiΦ \Phiψ \psiΨ \Psiχ \chiω \ommigaΩ \Ommiga&lt; \leq&gt; \geq不等于 \neq&gt; \gg正负\pm左箭头 \leftarrow 右箭头 \rightarrow 上箭头 \uparrow 上圆圈（度数） \circ 例text(2,3,’\alpha_2^\beta’) 很多时候都要在matlab画图的时候添加一些公式符号之类的，有一些特殊的字符并不能直接从键盘上输入，比如希腊字母等等。</p><h1>胡广书老师课本例题</h1><h2 id="第一章"><a class="header-anchor" href="#第一章">¶</a>第一章</h2><p>待续。。。</p><h2 id="第二章"><a class="header-anchor" href="#第二章">¶</a>第二章</h2><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200922212358.png" alt=""></p><p>ex0201:求该系统函数的阶跃响应（所谓阶跃响应是系统输入的输出）。实现该任务的程序如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020801_filter</span></span><br><span class="line"><span class="comment">%filter函数用来求一个离散系统的输出，是在已知B（z）,A(z)，但是不知道h（n）的情况下求y（n）</span></span><br><span class="line">x=<span class="built_in">ones</span>(<span class="number">100</span>);t=<span class="number">1</span>:<span class="number">100</span>;<span class="comment">%x(n)=1,对n=1~100,t用于后面的绘图</span></span><br><span class="line">b=[<span class="number">0.001836</span>,<span class="number">0.007344</span>,<span class="number">0.011016</span>,<span class="number">0.007374</span>,<span class="number">0.001836</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">-3.0544</span>,<span class="number">3.829</span>,<span class="number">-2.2925</span>,<span class="number">0.55075</span>];</span><br><span class="line">y=filter(b,a,x);</span><br><span class="line"><span class="built_in">plot</span>(t,x,<span class="string">&#x27;g.&#x27;</span>,t,y,<span class="string">&#x27;k-&#x27;</span>);<span class="comment">%将x(n)(绿色)和y(n)（黑色）画在同一图上</span></span><br></pre></td></tr></table></figure><blockquote><p>主要是用filter函数</p><p>调用格式：y=filter(b,a,x)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200922213533.png" alt=""></p><p>ex0202:求上式所给系统的单位抽样响应h(n)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020802_impz</span></span><br><span class="line"><span class="comment">%impz函数在已知B(z),A(z)的晴空下求出系统的单位抽样响应h(n)</span></span><br><span class="line"><span class="comment">%调用格式：h=impz(b,a,N)或着[h,t]=impz(b,a,N)其中N是所需的h(n)的长度。</span></span><br><span class="line"><span class="comment">%前者绘图n从1开始，而后者从0开始</span></span><br><span class="line">b=[<span class="number">0.001836</span>,<span class="number">0.007344</span>,<span class="number">0.011016</span>,<span class="number">0.007374</span>,<span class="number">0.001836</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">-3.0544</span>,<span class="number">3.829</span>,<span class="number">-2.2925</span>,<span class="number">0.55075</span>];</span><br><span class="line">[h,t]=impz(b,a,<span class="number">40</span>);</span><br><span class="line">stem(t,h,<span class="string">&#x27;.&#x27;</span>);<span class="comment">%stem函数：杆图</span></span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200922213458.png" alt=""></p><p>ex0203:求上式所给系统的频率响应H(e^jw)，画出其幅频响应和相频响应。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020803_freqz</span></span><br><span class="line"><span class="comment">%freqz函数是在已知B(z),A(z)的情况下求出系统的频率响应H(e^jw)</span></span><br><span class="line"><span class="comment">%调用格式：[H,w]=freqz(b,a,N,&#x27;whole&#x27;,Fs),N是频率轴的分点数,建议N为2的整次幂</span></span><br><span class="line"><span class="comment">%w是返回频率轴坐标向量，Fs是抽样频率，Fs=1，频率轴给出归一化频率</span></span><br><span class="line"><span class="comment">%whole指定计算的频率范围是从0~Fs,缺省是从0~Fs/2</span></span><br><span class="line">clear</span><br><span class="line">b=[<span class="number">0.001836</span>,<span class="number">0.007344</span>,<span class="number">0.011016</span>,<span class="number">0.007374</span>,<span class="number">0.001836</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">-3.0544</span>,<span class="number">3.829</span>,<span class="number">-2.2925</span>,<span class="number">0.55075</span>];</span><br><span class="line">[H,w]=freqz(b,a,<span class="number">256</span>,<span class="string">&#x27;whole&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">Hr=<span class="built_in">abs</span>(H);<span class="comment">%求幅频响应，abs函数是求复数的幅值</span></span><br><span class="line">Hphase1=<span class="built_in">angle</span>(H);<span class="comment">%angle函数是求复数相角，提取相角</span></span><br><span class="line">Hphase2=<span class="built_in">unwrap</span>(Hphase1);<span class="comment">%unwrap函数显示积累的相角解卷绕</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(w,Hr);grid on;</span><br><span class="line">xlabel(<span class="string">&#x27;w/2Π&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;|H(e^(jw)|&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(w,Hphase2);grid on;</span><br><span class="line">xlabel(<span class="string">&#x27;w/2Π&#x27;</span>);ylabel(<span class="string">&#x27;\phi(w)/rad&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923101127.png" alt=""></p><p>ex0204:显示上式及FIR系统<code>H(z)=1-1.7z^(-1)+1.53z^(-2)-0.648z^(-3)</code>的极零图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020804_zplane.m</span></span><br><span class="line"><span class="comment">%zplane函数用来显示离散系统的极零图</span></span><br><span class="line"><span class="comment">%调用函数格式：zplane(z,p)或着zplane(b,a)</span></span><br><span class="line"><span class="comment">%前者是在已知系统零点的列向量z和极点的列向量p的情况下画出极零图</span></span><br><span class="line"><span class="comment">%后者是在已知B(z),A(z)的情况下画出极零图</span></span><br><span class="line">b=[<span class="number">0.001836</span>,<span class="number">0.007344</span>,<span class="number">0.011016</span>,<span class="number">0.007374</span>,<span class="number">0.001836</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">-3.0544</span>,<span class="number">3.829</span>,<span class="number">-2.2925</span>,<span class="number">0.55075</span>];</span><br><span class="line">subplot(<span class="number">221</span>)</span><br><span class="line">zplane(b,a);</span><br><span class="line">z=[<span class="number">1</span>,<span class="number">-1.7</span>,<span class="number">1.53</span>,<span class="number">-0.648</span>];</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line">subplot(<span class="number">222</span>)</span><br><span class="line">zplane(z,p);</span><br></pre></td></tr></table></figure><blockquote><p>zplane仅能给出系统的极零图，不能给出极零点的坐标值。若想求出具体的数值，可用tf2zp或着roots;反之，若想由已知的极零点得到分子、分母多项式，可用zp2tf或着poly文件。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923102839.png" alt=""></p><p><font color='red'>知识：</font>residuer文件可将z的有理分式分解成简单有理分式的和，因此可用来求逆Z变换，即<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923105146.png" alt=""></p><p>式中p(1),p(2),···，p(n)的集合p是列向量，它的每一个元素都是X(Z)的极点。类似的，r也是列向量，它的每一个元素都是X(z)在相应极点处的留数；k是行向量，它代表了分解后的直接项。X(z)的极点数n=n0,并等于r和p的维数。若nb&lt;n0,则分解后没有直接项，否则，k的长度等于nb-n0+1。</p><p>若X(z)在p(j)处有一m阶重极点，则X(z)分解后将为m项之和，即</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923114827.png" alt=""></p><p>调用格式为：[r,p,k]=residuez(b,a)</p><p>假如知道了向量p，r和k，利用reduez.m还可以反过来求出多项式B(z),A(z),格式是:[b,a]=residuez(r,p,k)</p><blockquote><p>nb和n0分别是H(z)分母与分子多项式的阶次。</p></blockquote><p>ex0205:residuer.m文件的应用。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020805_residuez.m</span></span><br><span class="line">clear</span><br><span class="line">b=[<span class="number">1.7</span> <span class="number">-1.69</span> <span class="number">0.39</span>];<span class="comment">%形成分子多项式向量</span></span><br><span class="line">a=[<span class="number">1</span> <span class="number">-1.7</span> <span class="number">0.8</span> <span class="number">-0.1</span>];<span class="comment">%分母多项式向量</span></span><br><span class="line">[r,p,k]=residuez(b,a)<span class="comment">%作逆Z变换，求出向量r,p,k</span></span><br><span class="line">[b1,a1]=residuez(r,p,k)<span class="comment">%反过来，有求出的r，p,k求多项式向量b,a</span></span><br><span class="line">[r,p,k]=residuez(a,b)<span class="comment">%交换分子、分母多项式向量，再求向量r,p,k</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; exa020805_residuez</span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span></span><br><span class="line">    <span class="number">0.2000</span></span><br><span class="line">    <span class="number">0.5000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span></span><br><span class="line">    <span class="number">0.5000</span></span><br><span class="line">    <span class="number">0.2000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">     []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.7000</span>   <span class="number">-1.6900</span>    <span class="number">0.3900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-1.7000</span>    <span class="number">0.8000</span>   <span class="number">-0.1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.1153</span></span><br><span class="line">   <span class="number">-0.2366</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.6299</span></span><br><span class="line">    <span class="number">0.3642</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9402</span>   <span class="number">-0.2564</span></span><br></pre></td></tr></table></figure><p><font color='red'>知识：</font>tf2zp.m、zp2tf.m、roots.m、poly.m、sort.m文件用于转移函数与极零点之间的相互转换及极零点的排序。</p><blockquote><p>tf2zp：用来求H(z)=B(z)/A(z)的极零点及增益</p><p>zp2tf：用于在极零点已知时求出B(z)和A(z)的系数</p><p>roots：用来求一个多项式的根</p><p>poly：可由给定的根求出相应多项式的系数</p><p>sort：的作用是将求出的根按绝对值的大小值排序</p></blockquote><p>ex0206:设H(z)有5个零点，一个在z=0.8，另4个是0.5e^(jΠ/3)及其共轭与镜像，不难求出</p><p><code>B(z)=1-3.3z^(-1)+7.25z^(-2)-6.7z^(-3)+3z^(-4)-0.8z^(-5)</code></p><p>下面的程序可求出该系统的零点，并由这些零点再求出系统的系数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020806</span></span><br><span class="line">clear;</span><br><span class="line">B=[<span class="number">1</span> <span class="number">-3.3</span> <span class="number">7.25</span> <span class="number">-6.7</span> <span class="number">3</span> <span class="number">-0.8</span>];</span><br><span class="line">L=<span class="built_in">length</span>(B);</span><br><span class="line">A=<span class="built_in">zeros</span>(<span class="number">1</span>,L);</span><br><span class="line">A(<span class="number">1</span>)=<span class="number">1</span>;</span><br><span class="line">[Z,P,K]=tf2zp(B,A)</span><br><span class="line"><span class="comment">%使用tf2zp时，B和A是同维的行向量，Z，P是同维的列向量，Z中含有零点，P中含有极点</span></span><br><span class="line"><span class="comment">%K是标量，为系统的增益</span></span><br><span class="line"><span class="built_in">sort</span>(Z)<span class="comment">%对零点排序</span></span><br><span class="line">[b,a]=zp2tf(Z,P,K)<span class="comment">%如果分解和综合正确，那么，b=B,a=A</span></span><br><span class="line">Z1=roots(B)<span class="comment">%求出多项式B(z)的根，即零点</span></span><br><span class="line">poly(Z1)<span class="comment">%由分解到的零点再综合出多项式H(z)</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; exa020806</span><br><span class="line"></span><br><span class="line">Z =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.0000</span> + <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> - <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.8000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.2500</span> + <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.2500</span> - <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.2500</span> - <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.2500</span> + <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.8000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> - <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> + <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">5</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-3.3000</span>    <span class="number">7.2500</span>   <span class="number">-6.7000</span>    <span class="number">3.0000</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span> 列</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.8000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Z1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.0000</span> + <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> - <span class="number">1.7321</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.8000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.2500</span> + <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.2500</span> - <span class="number">0.4330</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">5</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-3.3000</span>    <span class="number">7.2500</span>   <span class="number">-6.7000</span>    <span class="number">3.0000</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span> 列</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.8000</span></span><br></pre></td></tr></table></figure><p><font color='red'>知识：</font>tf2sos.m、sos2tf.m、sos2zp.m、zp2sos.m用来实现系统的转移函数及零极点和二阶子系统之间的相互转换。</p><ul><li>tf2sos：用来实现将H(z)=B(z)/A(z)分解为一系列二姐子系统Hk(z)的级联，Hk(z)的表达式：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923114807.png" alt=""></p><p>调用格式：[sos,G]=tf2sos(B,A)</p><blockquote><p>其中，G是系统的增益，sos是——L*6的矩阵，L是二阶子系统的个数，每一行的元素都是按如下方式排列：</p><p>[b0k,b1k,1,a1k,a2k],   k=1,2,····，L</p></blockquote><ul><li><p>sos2tf:功能与tf2sos相反，它用来由二阶子系统构成H(z)，调用格式：</p><p>[B,A]=sos2tf(sos,G)</p></li><li><p>zp2sos：用来实现由系统的零极点到二阶子系统的转换，调用格式：</p><p>[sos,G]=zp2sos(Z,P,K)</p></li><li><p>sos2zp:与zp2sos实现相反的转换，调用格式：[Z,P,K]=sos2zp(sos,G)</p></li></ul><p>ex0207:用上面的知识</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa020807.m</span></span><br><span class="line">clear</span><br><span class="line">B=[<span class="number">0.0201</span> <span class="number">0</span> <span class="number">-0.0402</span> <span class="number">0</span> <span class="number">0.0201</span>];</span><br><span class="line">A=[<span class="number">1</span> <span class="number">-1.637</span> <span class="number">2.237</span> <span class="number">-1.307</span> <span class="number">0.641</span>];</span><br><span class="line">[sos,G]=tf2sos(B,A)<span class="comment">%将转移函数分解成二阶子系统的级联</span></span><br><span class="line">[B,A]=sos2tf(sos,G)<span class="comment">%由级联的二阶子系统重构转移函数</span></span><br><span class="line">[Z,P,K]=tf2zp(B,A)<span class="comment">%求转移函数的极零点</span></span><br><span class="line">[sos,G]=zp2sos(Z,P,K)<span class="comment">%由系统的极零点得到级联的二阶子系统</span></span><br><span class="line">[Z,P,K]=sos2zp(sos,G)<span class="comment">%由级联的二阶子系统得到系统的极零点</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; exa020807</span><br><span class="line"></span><br><span class="line">sos =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">5</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">2.0000</span>    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-0.6332</span></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-2.0000</span>    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-1.0038</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">0.7906</span></span><br><span class="line">    <span class="number">0.8107</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">G =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0201</span>    <span class="number">0.0000</span>   <span class="number">-0.0402</span>   <span class="number">-0.0000</span>    <span class="number">0.0201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-1.6370</span>    <span class="number">2.2370</span>   <span class="number">-1.3070</span>    <span class="number">0.6410</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Z =</span><br><span class="line"></span><br><span class="line">  <span class="number">-1.0000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">  <span class="number">-1.0000</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.5019</span> + <span class="number">0.7476</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.5019</span> - <span class="number">0.7476</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.3166</span> + <span class="number">0.8309</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.3166</span> - <span class="number">0.8309</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sos =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">5</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">2.0000</span>    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-0.6332</span></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-2.0000</span>    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-1.0038</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">0.7906</span></span><br><span class="line">    <span class="number">0.8107</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">G =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Z =</span><br><span class="line"></span><br><span class="line">  <span class="number">-1.0000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">  <span class="number">-1.0000</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0000</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.3166</span> + <span class="number">0.8309</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.3166</span> - <span class="number">0.8309</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.5019</span> + <span class="number">0.7476</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.5019</span> - <span class="number">0.7476</span><span class="built_in">i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0201</span></span><br></pre></td></tr></table></figure><h2 id="第三章"><a class="header-anchor" href="#第三章">¶</a>第三章</h2><p><font color='red'>知识：</font>fftfilt.m文件用DFT来实现长序列的卷积，采用的是叠接相加法，调用格式：</p><p>y=fftfilt(h,x)或着y=fftfilt(h,x,N)</p><blockquote><p>设x(n)的长度为N，h(n)的长度为M，若采用第一种调用方式，程序自动的确定对x(n)分段的长度L及做FFT的长度N，这样分的段数为Nx/L，显然N是最接近（L+M）的2的整次幂。</p><p>若第二种调用方式，可以自己指定做FFT的长度。</p></blockquote><p>ex0301： 令x(n)为一正弦加白噪声信号，长度为500，h(n)用firl.m文件设计出的一个低通FIR滤波器，长度为11，试用fftfilt实现长序列的卷积。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa031101_fftfilt.m</span></span><br><span class="line">h=fir1(<span class="number">10</span>,<span class="number">0.3</span>,hanning(<span class="number">11</span>));<span class="comment">%设计低通滤波器，得到h(n)</span></span><br><span class="line">N=<span class="number">500</span>;p=<span class="number">0.05</span>;f=<span class="number">1</span>/<span class="number">16</span>;<span class="comment">%设定必要的参数</span></span><br><span class="line">u=<span class="built_in">randn</span>(<span class="number">1</span>,N)*<span class="built_in">sqrt</span>(p);<span class="comment">%产生白噪声信号</span></span><br><span class="line">s=<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f*[<span class="number">0</span>:N<span class="number">-1</span>]);<span class="comment">%产生正弦信号</span></span><br><span class="line">x=u(<span class="number">1</span>:N)+s;<span class="comment">%得到正弦加白噪声信号</span></span><br><span class="line">y=fftfilt(h,x);<span class="comment">%实现叠接相加法滤波</span></span><br><span class="line">subplot(<span class="number">211</span>);<span class="built_in">plot</span>(x);xlabel(<span class="string">&#x27;原始信号&#x27;</span>)</span><br><span class="line">subplot(<span class="number">212</span>);<span class="built_in">plot</span>(y);xlabel(<span class="string">&#x27;滤波后的信号&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200923204216.png" alt=""></p><p><font color='red'>知识：</font>Hibert.m文件用来计算信号x(n)的希尔伯特变换，调用的格式是：</p><p>​y=hilbert(x)</p><p>y的实部就是x(n)，虚部是x(n)的希尔伯特变换x^(n)。</p><p>ex0302:令x(n)为一正弦信号，长度为25，试求其希尔伯特变换x^(n)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0301102_hilbert.m</span></span><br><span class="line">clear;</span><br><span class="line">N=<span class="number">25</span>;f=<span class="number">1</span>/<span class="number">16</span>;x=<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f*(<span class="number">0</span>:N<span class="number">-1</span>));y=hilbert(x);</span><br><span class="line">subplot(<span class="number">221</span>);stem(x,<span class="string">&#x27;.&#x27;</span>);<span class="built_in">hold</span> on;<span class="built_in">plot</span>(<span class="built_in">zeros</span>(<span class="built_in">size</span>(x)));</span><br><span class="line">subplot(<span class="number">222</span>);stem(<span class="built_in">imag</span>(y),<span class="string">&#x27;.&#x27;</span>);<span class="built_in">hold</span> on;<span class="built_in">plot</span>(<span class="built_in">zeros</span>(<span class="built_in">size</span>(x)));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200924160604.png" alt=""></p><h2 id="第四章"><a class="header-anchor" href="#第四章">¶</a>第四章</h2><p><font color='red'>知识：</font><code>fft.m</code>:实现快速傅里叶变换</p><p>调用格式：X=fft(x)或着X=fft(x,N)</p><p>对前者，若x的长度是2的整数次幂，则按该长度实现x的快速变换，否则，实现的是慢速的非2的整数次幂的变换；</p><p>对后者，N应该为2的整数次幂，若x的长度小于N，则补零，若超过N，则舍弃N以后的数据。ifft的调用格式与之相同。</p><p>ex0401:令x(n)是两个正弦信号及其白噪声的叠加，试用fft文件对其作频谱分析。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa040801_fft.m</span></span><br><span class="line">clear</span><br><span class="line">N=<span class="number">256</span>;</span><br><span class="line">f1=<span class="number">0.1</span>;f2=<span class="number">0.2</span>;fs=<span class="number">1</span>;</span><br><span class="line">a1=<span class="number">5</span>;a2=<span class="number">3</span>;</span><br><span class="line">w=<span class="number">2</span>*<span class="built_in">pi</span>/fs;</span><br><span class="line">x=a1*<span class="built_in">sin</span>(w*f1*(<span class="number">0</span>:N<span class="number">-1</span>))+a2*<span class="built_in">sin</span>(w*f2*(<span class="number">0</span>:N<span class="number">-1</span>))+<span class="built_in">randn</span>(<span class="number">1</span>,N);</span><br><span class="line">subplot(<span class="number">311</span>);<span class="built_in">plot</span>(x(<span class="number">1</span>:N/<span class="number">4</span>));ylabel(<span class="string">&#x27;x(n)&#x27;</span>);</span><br><span class="line">f=<span class="number">-0.5</span>:<span class="number">1</span>/N:<span class="number">0.5</span><span class="number">-1</span>/N;</span><br><span class="line">X=fft(x);y=ifft(X);</span><br><span class="line">subplot(<span class="number">312</span>);<span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(X)));ylabel(<span class="string">&#x27;|X(k)|&#x27;</span>);grid on;</span><br><span class="line">subplot(<span class="number">313</span>);<span class="built_in">plot</span>(<span class="built_in">real</span>(y(<span class="number">1</span>:N/<span class="number">4</span>)));ylabel(<span class="string">&#x27;|DFT[X(k)]|&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200924170643.png" alt=""></p><p><font color='red'>知识：</font><code>czt.m</code>文件用来实现线性调频Z变换。</p><p>调用格式：X=czt(x,M,W,A)</p><blockquote><p>式中x是待变换的时域信号x(n)，其长度设为N,M是变换的长度，W确定变换的步长，A确定变换的起点。若M=N,A=1,则CZT变成DFT。</p></blockquote><p>ex0402:设x(n)由三个实正弦所组成，频率分别是8Hz，8.22Hz和9Hz，抽样频率是40Hz，时域取128点。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa040802_czt.m</span></span><br><span class="line">clear</span><br><span class="line">N=<span class="number">128</span>;f1=<span class="number">8</span>;f2=<span class="number">8.22</span>;f3=<span class="number">9</span>;fs=<span class="number">40</span>;</span><br><span class="line">stepf=fs/N;n=<span class="number">0</span>:N<span class="number">-1</span>;</span><br><span class="line">t=<span class="number">2</span>*<span class="built_in">pi</span>*n/fs;</span><br><span class="line">n1=<span class="number">0</span>:stepf:fs/<span class="number">2</span>-stepf;</span><br><span class="line">x=<span class="built_in">sin</span>(f1*t)+<span class="built_in">sin</span>(f2*t)+<span class="built_in">sin</span>(f3*t);</span><br><span class="line">M=N;W=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>/M);<span class="comment">%A=1时的czt变换A=1;</span></span><br><span class="line">A=<span class="number">1</span>;Y1=czt(x,M,W,A);</span><br><span class="line">subplot(<span class="number">311</span>);<span class="built_in">plot</span>(n1,<span class="built_in">abs</span>(Y1(<span class="number">1</span>:N/<span class="number">2</span>)));grid on;xlabel(<span class="string">&#x27;f/Hz&#x27;</span>);ylabel(<span class="string">&#x27;|X(e^(jw))|&#x27;</span>);<span class="comment">%DTFT</span></span><br><span class="line">Y2=<span class="built_in">abs</span>(fft(x));</span><br><span class="line">subplot(<span class="number">312</span>);<span class="built_in">plot</span>(n1,<span class="built_in">abs</span>(Y2(<span class="number">1</span>:N/<span class="number">2</span>)));grid on;xlabel(<span class="string">&#x27;f/Hz&#x27;</span>);ylabel(<span class="string">&#x27;|X(e^(jw))|&#x27;</span>);</span><br><span class="line">M=<span class="number">60</span>;f0=<span class="number">7.2</span>;DELf=<span class="number">0.05</span>;A=<span class="built_in">exp</span>(<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*f0/fs);</span><br><span class="line">W=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*DELf/fs);</span><br><span class="line">Y3=czt(x,M,W,A);</span><br><span class="line">n2=f0:DELf:f0+(M<span class="number">-1</span>)*DELf;</span><br><span class="line">subplot(<span class="number">313</span>);<span class="built_in">plot</span>(n2,<span class="built_in">abs</span>(Y3));grid on;xlabel(<span class="string">&#x27;f/Hz&#x27;</span>);ylabel(<span class="string">&#x27;|X(e^(jw))|&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200924170630.png" alt=""></p><h2 id="第五章"><a class="header-anchor" href="#第五章">¶</a>第五章</h2><p><font color='red'>知识：</font>filtfilt.m文件实现零相位滤波，调用格式：</p><p>y=filtfilt(B,A,x)</p><blockquote><p>式中B是H(z)的分子多项式，A是分母多项式，x是待滤波信号，y是滤波后的信号。</p></blockquote><p>ex0501:令x(n)为两个正弦信号的叠加，其原频率分别是0.1Π和0.2Π。已知：<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925100621.png" alt=""></p><p>为一低通滤波器，现用H(z)对x(n)作零相位滤波。</p><p>待续…</p><h1>维纳滤波器</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span></span><br><span class="line">clc;clear all; close all;  </span><br><span class="line"><span class="comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span></span><br><span class="line"><span class="comment">%输入信号</span></span><br><span class="line">A=<span class="number">1</span>; <span class="comment">%信号的幅值</span></span><br><span class="line">f=<span class="number">1000</span>; <span class="comment">%信号的频率</span></span><br><span class="line">fs=<span class="number">10</span>^<span class="number">5</span>;<span class="comment">%采样频率</span></span><br><span class="line">t=(<span class="number">0</span>:<span class="number">999</span>); <span class="comment">%采样点</span></span><br><span class="line">Mlag=<span class="number">100</span>;<span class="comment">%相关函数长度变量   </span></span><br><span class="line">x=A*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f*t/fs);<span class="comment">%输入正弦波信号</span></span><br><span class="line">xmean=<span class="built_in">mean</span>(x);<span class="comment">%正弦波信号均值</span></span><br><span class="line">xvar=var(x,<span class="number">1</span>);<span class="comment">%正弦波信号方差</span></span><br><span class="line">noise=wgn(<span class="number">1</span>,<span class="number">1000</span>,<span class="number">2</span>);<span class="comment">%产生1行1000列的矩阵，强度为2dbw</span></span><br><span class="line">xn=x+noise; <span class="comment">%给正弦波信号加入信噪比为20dB的高斯白噪声</span></span><br><span class="line"><span class="built_in">plot</span>(t,xn)    </span><br><span class="line">xlabel(<span class="string">&#x27;x轴单位：t/s&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y轴单位：A/V&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">xnmean = <span class="built_in">mean</span>(xn);  <span class="comment">%计算加噪信号均值</span></span><br><span class="line">xnms = <span class="built_in">mean</span>(xn.^<span class="number">2</span>);  <span class="comment">%计算加噪信号均方值</span></span><br><span class="line">xnvar = var(xn,<span class="number">1</span>);<span class="comment">%计算输入信号方差</span></span><br><span class="line">Rxn=xcorr(xn,Mlag,<span class="string">&#x27;biased&#x27;</span>);  <span class="comment">%计算加噪信号自相关函数</span></span><br><span class="line"><span class="comment">% figure(2)</span></span><br><span class="line"><span class="comment">% subplot(221)</span></span><br><span class="line"><span class="comment">% plot((-Mlag:Mlag),Rxn)   %绘制自相关函数图像</span></span><br><span class="line"><span class="comment">% title(&#x27;加噪信号自相关函数图像&#x27;)</span></span><br><span class="line"><span class="comment">% [f,xi]=ksdensity(xn); %计算加噪信号的概率密度，f为样本点xi处的概率密度</span></span><br><span class="line"><span class="comment">% subplot(222)</span></span><br><span class="line"><span class="comment">% plot(xi,f) %绘制概率密度图像</span></span><br><span class="line"><span class="comment">% title(&#x27;加噪信号概率密度图像&#x27;)</span></span><br><span class="line"><span class="comment">% X=fft(xn); %计算加噪信号序列的快速离散傅里叶变换</span></span><br><span class="line"><span class="comment">% Px=X.*conj(X)/600; %计算信号频谱</span></span><br><span class="line"><span class="comment">% subplot(223)</span></span><br><span class="line"><span class="comment">% semilogy(t,Px) %绘制在半对数坐标系下频谱图像</span></span><br><span class="line"><span class="comment">% title(&#x27;输入信号在半对数坐标系下频谱图像&#x27;)</span></span><br><span class="line"><span class="comment">% xlabel(&#x27;x轴单位：w/rad&#x27;,&#x27;color&#x27;,&#x27;b&#x27;)</span></span><br><span class="line"><span class="comment">% ylabel(&#x27;y轴单位：w/HZ&#x27;,&#x27;color&#x27;,&#x27;b&#x27;)</span></span><br><span class="line"><span class="comment">% pxx=periodogram(xn);%计算加噪信号的功率谱密度</span></span><br><span class="line"><span class="comment">% subplot(224)</span></span><br><span class="line"><span class="comment">% semilogy(pxx) %绘制在半对数坐标系下功率谱密度图像</span></span><br><span class="line"><span class="comment">% title(&#x27;加噪信号在半对数坐标系下功率谱密度图像&#x27;)</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"><span class="comment">% xlabel(&#x27;x轴单位：w/rad&#x27;,&#x27;color&#x27;,&#x27;b&#x27;)</span></span><br><span class="line"><span class="comment">% ylabel(&#x27;y轴单位：w/HZ&#x27;,&#x27;color&#x27;,&#x27;b&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%维纳滤波</span></span><br><span class="line">N=<span class="number">100</span>;   <span class="comment">%维纳滤波器长度</span></span><br><span class="line">Rxnx=xcorr(xn,x,Mlag,<span class="string">&#x27;biased&#x27;</span>);  <span class="comment">%产生加噪信号与原始信号的互相关函数</span></span><br><span class="line">rxnx=<span class="built_in">zeros</span>(N,<span class="number">1</span>); </span><br><span class="line">rxnx(:)=Rxnx(<span class="number">101</span>:<span class="number">101</span>+N<span class="number">-1</span>);</span><br><span class="line">Rxx=<span class="built_in">zeros</span>(N,N);  <span class="comment">%产生加噪信号自相关矩阵</span></span><br><span class="line">Rxx=<span class="built_in">diag</span>(Rxn(<span class="number">101</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,N));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:N</span><br><span class="line">    c=Rxn(<span class="number">101</span>+<span class="built_in">i</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,N+<span class="number">1</span>-<span class="built_in">i</span>);</span><br><span class="line">    Rxx=Rxx+<span class="built_in">diag</span>(c,<span class="built_in">i</span><span class="number">-1</span>)+<span class="built_in">diag</span>(c,-<span class="built_in">i</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Rxx;</span><br><span class="line">h=<span class="built_in">zeros</span>(N,<span class="number">1</span>);</span><br><span class="line">h=inv(Rxx)*rxnx; <span class="comment">%计算维纳滤波器的h(n)</span></span><br><span class="line">yn=filter(h,<span class="number">1</span>,xn); <span class="comment">%将加噪信号通过维纳滤波器</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">plot</span>(yn) <span class="comment">%绘制经过维纳滤波器后信号图像</span></span><br><span class="line">title(<span class="string">&#x27;经过维纳滤波器后信号信号图像&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x轴单位：f/HZ&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y轴单位：A/V&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ynmean=<span class="built_in">mean</span>(yn) <span class="comment">%计算经过维纳滤波器后信号均值</span></span><br><span class="line">ynms=<span class="built_in">mean</span>(yn.^<span class="number">2</span>) <span class="comment">%计算经过维纳滤波器后信号均方值</span></span><br><span class="line">ynvar=var(yn,<span class="number">1</span>)  <span class="comment">%计算经过维纳滤波器后信号方差</span></span><br><span class="line">Ryn=xcorr(yn,Mlag,<span class="string">&#x27;biased&#x27;</span>);  <span class="comment">%计算经过维纳滤波器后信号自相关函数</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">6</span>)</span><br><span class="line">subplot(<span class="number">221</span>)</span><br><span class="line"><span class="built_in">plot</span>((-Mlag:Mlag),Ryn) <span class="comment">%绘制自相关函数图像</span></span><br><span class="line">title(<span class="string">&#x27;经过维纳滤波器后信号自相关函数图像&#x27;</span>)</span><br><span class="line">[f,yi]=ksdensity(yn);  <span class="comment">%计算经过维纳滤波器后信号的概率密度，f为样本点xi处的概率密度</span></span><br><span class="line">subplot(<span class="number">222</span>)</span><br><span class="line"><span class="built_in">plot</span>(yi,f) <span class="comment">%绘制概率密度图像</span></span><br><span class="line">title(<span class="string">&#x27;经过维纳滤波器后信号概率密度图像&#x27;</span>)</span><br><span class="line">Y=fft(yn); <span class="comment">%计算经过维纳滤波器后信号序列的快速离散傅里叶变换</span></span><br><span class="line">Py=Y.*<span class="built_in">conj</span>(Y)/<span class="number">600</span>; <span class="comment">%计算信号频谱</span></span><br><span class="line">subplot(<span class="number">223</span>)</span><br><span class="line">semilogy(t,Py)   <span class="comment">%绘制在半对数坐标系下频谱图像</span></span><br><span class="line">title(<span class="string">&#x27;经过维纳滤波器后信号在半对数坐标系下频谱图像&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x轴单位：w/rad&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y轴单位：w/HZ&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">pyn=periodogram(yn);  <span class="comment">%计算经过维纳滤波器后信号的功率谱密度</span></span><br><span class="line">subplot(<span class="number">224</span>)</span><br><span class="line">semilogy(pyn)  <span class="comment">%绘制在半对数坐标系下功率谱密度图像</span></span><br><span class="line">title(<span class="string">&#x27;经过维纳滤波器后信号在半对数坐标系下功率谱密度图像&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x轴单位：w/rad&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y轴单位：w/HZ&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>),<span class="built_in">plot</span>(noise); title(<span class="string">&#x27;噪声信号&#x27;</span>)</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">plot</span>(x); title(<span class="string">&#x27;正弦信号&#x27;</span>)</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>),<span class="built_in">plot</span>(xn); title(<span class="string">&#x27;加噪信号&#x27;</span>)</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>),<span class="built_in">plot</span>(yn); title(<span class="string">&#x27;维纳信号&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201005213624.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201005213632.png" alt=""></p><h1>另一本书例题</h1><h2 id="第一章-v2"><a class="header-anchor" href="#第一章-v2">¶</a>第一章</h2><h3 id="离散时间信号的MATLAB实现"><a class="header-anchor" href="#离散时间信号的MATLAB实现">¶</a>离散时间信号的MATLAB实现</h3><ol><li>正弦序列</li></ol><p>离散正弦序列的MATLAB表示与连续信号类似，只不过用stem函数而不是用plot函数来画出序列的波形。</p><p>ex0101:正弦序列sin(Π/6)*k的MATLAB源程序</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0101_sin6pik.m</span></span><br><span class="line">clear all;</span><br><span class="line">k=<span class="number">0</span>:<span class="number">39</span>;</span><br><span class="line">fk=<span class="built_in">sin</span>(<span class="built_in">pi</span>/<span class="number">6</span>*k);</span><br><span class="line">stem(k,fk)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925112757.png" alt=""></p><ol start="2"><li>指数序列</li></ol><p>离散指数序列的一般形式为<code>ca^k</code>，可用MATLAB中的数组幂运算（即点幂运算）<code>c*a.^k</code>来实现。</p><p>ex0102:先编写绘制离散时间<strong>实指数序列</strong>波形的函数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%function_dszsu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dszsu</span><span class="params">(c,a,k1,k2)</span></span></span><br><span class="line"><span class="comment">%c:知数序列的幅度</span></span><br><span class="line"><span class="comment">%a:指数序列的底数</span></span><br><span class="line"><span class="comment">%k1:绘制序列的起始序号</span></span><br><span class="line"><span class="comment">%k2:绘制序列的终止序号</span></span><br><span class="line">k=k1:k2;</span><br><span class="line">x=c*(a.^k);</span><br><span class="line">stem(k,x,<span class="string">&#x27;filled&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([k1,k2],[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure><blockquote><p>编写的函数保存名称与function后面写的必须保持一致</p></blockquote><p>利用上述函数，实现<strong>实指数</strong>波形（a=5/4,3/4,-5/4,-3/4）</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0102_dszsu.m</span></span><br><span class="line">subplot(<span class="number">221</span>);</span><br><span class="line">dszsu(<span class="number">1</span>,<span class="number">5</span>/<span class="number">4</span>,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;k&#x27;</span>);title(<span class="string">&#x27;f1[k]&#x27;</span>);</span><br><span class="line">subplot(<span class="number">222</span>);</span><br><span class="line">dszsu(<span class="number">1</span>,<span class="number">3</span>/<span class="number">4</span>,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;k&#x27;</span>);title(<span class="string">&#x27;f2[k]&#x27;</span>);</span><br><span class="line">subplot(<span class="number">223</span>);</span><br><span class="line">dszsu(<span class="number">1</span>,<span class="number">-5</span>/<span class="number">4</span>,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;k&#x27;</span>);title(<span class="string">&#x27;f3[k]&#x27;</span>);</span><br><span class="line">subplot(<span class="number">224</span>);</span><br><span class="line">dszsu(<span class="number">1</span>,<span class="number">-3</span>/<span class="number">4</span>,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;k&#x27;</span>);title(<span class="string">&#x27;f4[k]&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925114116.png" alt=""></p><p>对于离散时间<strong>虚指数序列</strong>，可用通过调用下列绘制虚指数序列时域波形的MATLAB函数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[]</span> = <span class="title">dxzsu</span><span class="params">(n1,n2,w)</span></span></span><br><span class="line"><span class="comment">%n1：绘制波形的虚指数序列的起始时间序号</span></span><br><span class="line"><span class="comment">%n2：绘制波形的虚指数序列的终止时间序号</span></span><br><span class="line"><span class="comment">%w：虚指数序列的角频率</span></span><br><span class="line">k=n1:n2;</span><br><span class="line">f=<span class="built_in">exp</span>(<span class="built_in">i</span>*w*k);</span><br><span class="line">Xr=<span class="built_in">real</span>(f);<span class="comment">%real函数是取f函数的实部</span></span><br><span class="line">Xi=<span class="built_in">imag</span>(f);<span class="comment">%imag函数是取f函数的虚部</span></span><br><span class="line">Xa=<span class="built_in">abs</span>(f);<span class="comment">%abs函数可以用来取复数的模</span></span><br><span class="line">Xn=<span class="built_in">angle</span>(f);<span class="comment">%angle函数取f函数的相角</span></span><br><span class="line">subplot(<span class="number">221</span>),stem(k,Xr,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;实部&#x27;</span>);</span><br><span class="line">subplot(<span class="number">223</span>),stem(k,Xi,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;虚部&#x27;</span>);</span><br><span class="line">subplot(<span class="number">222</span>),stem(k,Xa,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;模&#x27;</span>);</span><br><span class="line">subplot(<span class="number">224</span>),stem(k,Xn,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;相角&#x27;</span>);</span><br></pre></td></tr></table></figure><p>调用上述的程序：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0102_dxzsu.m</span></span><br><span class="line">clear;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);<span class="comment">%创建一个新的窗口1</span></span><br><span class="line">dxzsu(<span class="number">0</span>,<span class="number">20</span>,<span class="built_in">pi</span>/<span class="number">4</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);<span class="comment">%创建一个新的窗口2</span></span><br><span class="line">dxzsu(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925163353.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925163407.png" alt=""></p><p>复指数序列，其一般形式为：<code>f[k]=r^(k)*(e^j*w*k)</code></p><p>编写下面的程序，绘制复指数序列时域波形的MATLAB函数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfzsu</span><span class="params">(n1,n2,r,w)</span></span></span><br><span class="line"><span class="comment">%n1:绘制波形的虚指数的起始时间序号</span></span><br><span class="line"><span class="comment">%n2：绘制波形的虚指数的终止时间序号</span></span><br><span class="line"><span class="comment">%w：虚指数序列的角频率</span></span><br><span class="line"><span class="comment">%r：指数序列的底数</span></span><br><span class="line">k=n1:n2;</span><br><span class="line">f=(r*<span class="built_in">exp</span>(<span class="built_in">i</span>*w)).^k;</span><br><span class="line">Xr=<span class="built_in">real</span>(f);</span><br><span class="line">Xi=<span class="built_in">imag</span>(f);</span><br><span class="line">Xa=<span class="built_in">abs</span>(f);</span><br><span class="line">Xn=<span class="built_in">angle</span>(f);</span><br><span class="line">subplot(<span class="number">221</span>),stem(k,Xr,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;实部&#x27;</span>);</span><br><span class="line">subplot(<span class="number">223</span>),stem(k,Xi,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;虚部&#x27;</span>);</span><br><span class="line">subplot(<span class="number">222</span>),stem(k,Xa,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;模&#x27;</span>);</span><br><span class="line">subplot(<span class="number">224</span>),stem(k,Xn,<span class="string">&#x27;filled&#x27;</span>),title(<span class="string">&#x27;相角&#x27;</span>);</span><br></pre></td></tr></table></figure><p>调用上面的程序：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0102_dfzsu.m</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">dfzsu(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1.2</span>,<span class="built_in">pi</span>/<span class="number">4</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">dfzsu(<span class="number">0</span>,<span class="number">20</span>,<span class="number">0.8</span>,<span class="built_in">pi</span>/<span class="number">4</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line">dfzsu(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="built_in">pi</span>/<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925174933.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925174952.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925175012.png" alt=""></p><ol start="3"><li>单位抽样序列</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0103_danwei.m</span></span><br><span class="line"><span class="comment">%单位取样序列实现程序</span></span><br><span class="line">k=<span class="number">-30</span>:<span class="number">30</span>;</span><br><span class="line">delta=[<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">30</span>),<span class="number">1</span>,<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">30</span>)];</span><br><span class="line">stem(k,delta)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925175838.png" alt=""></p><ol start="4"><li>单位阶跃序列</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0104_jieyue.m</span></span><br><span class="line">k=<span class="number">-30</span>:<span class="number">30</span>;</span><br><span class="line">uk=[<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">30</span>),<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">31</span>)];</span><br><span class="line">stem(k,uk)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925192231.png" alt=""></p><p>ex0107:编写程序来产生下列基本序列。</p><p>(1)单位抽样序列，起点ns=0，终点nf=10，在n。=3处有一单位脉冲。</p><p>(2)单位阶跃序列，起点ns=0，终点nf=10，在n。=3前为0，在ns=3后为1。</p><p>(3)复指数序列，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>=-0.2,w。=0.5。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa010701_chouyang.m</span></span><br><span class="line"><span class="comment">%(1)单位抽样序列，起点ns=0，终点nf=10，在n。=3处有一单位脉冲。</span></span><br><span class="line">clear</span><br><span class="line">ns=<span class="number">0</span>;nf=<span class="number">10</span>;n0=<span class="number">3</span>;</span><br><span class="line">n1=[ns:nf];x1=[<span class="built_in">zeros</span>(<span class="number">1</span>,n0-ns),<span class="number">1</span>,<span class="built_in">zeros</span>(<span class="number">1</span>,nf-n0)];<span class="comment">%实际上zeros函数从标号0开始生成</span></span><br><span class="line">subplot(<span class="number">221</span>);stem(n1,x1),title(<span class="string">&#x27;单位抽样序列\Gamma(n-3)&#x27;</span>);</span><br><span class="line"><span class="comment">%(2)单位阶跃序列，起点ns=0，终点nf=10，在n。=3前为0，在ns=3后为1。</span></span><br><span class="line">n2=[ns:nf];</span><br><span class="line">x2=[<span class="built_in">zeros</span>(<span class="number">1</span>,n0-ns),<span class="built_in">ones</span>(<span class="number">1</span>,nf-n0+<span class="number">1</span>)];</span><br><span class="line">subplot(<span class="number">222</span>);stem(n2,x2),title(<span class="string">&#x27;单位阶跃序列u(n-3)&#x27;</span>);</span><br><span class="line"><span class="comment">%复指数序列:e^jw/e^(a+jb)</span></span><br><span class="line">n3=[ns:nf];x3=<span class="built_in">exp</span>((<span class="number">-0.2</span>+<span class="number">0.5</span><span class="built_in">j</span>)*n3);</span><br><span class="line">subplot(<span class="number">223</span>),stem(n3,<span class="built_in">real</span>(x3)),line([<span class="number">0</span>,<span class="number">10</span>],[<span class="number">0</span>,<span class="number">0</span>]),title(<span class="string">&#x27;复指数序列的实部&#x27;</span>),ylabel(<span class="string">&#x27;实部&#x27;</span>);</span><br><span class="line">subplot(<span class="number">224</span>),stem(n3,<span class="built_in">imag</span>(x3)),line([<span class="number">0</span>,<span class="number">10</span>],[<span class="number">0</span>,<span class="number">0</span>]),title(<span class="string">&#x27;复指数序列的虚部&#x27;</span>),ylabel(<span class="string">&#x27;虚部&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200925210339.png" alt=""></p><p>还可以自己编写一些子程序以便调用。</p><ul><li><p>(1) 单位抽样序列δ(n-n0)的生成函数impseq.m</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%单位抽样序列生成函数δ(n-n0)的生成函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[x,n]</span>=<span class="title">impseq</span><span class="params">(n0,ns,nf)</span></span></span><br><span class="line">n=[ns:nf];</span><br><span class="line">x=[(n-n0)==<span class="number">0</span>];<span class="comment">%序列的起点为ns，终点为nf，在n=n0点处生成一个单位脉冲</span></span><br></pre></td></tr></table></figure></li><li><p>(2)单位阶跃序列u(n-n0)的生成函数stepseq.m</p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%单位阶跃序列u(n-n0)的生成函数stepseq.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[x,n]</span>=<span class="title">stepseq</span><span class="params">(n0,ns,nf)</span></span></span><br><span class="line">n=[ns:nf];</span><br><span class="line">x=[(n-n0)&gt;=<span class="number">0</span>];<span class="comment">%序列的起点为ns，终点为nf，在n=n0点处生成单位阶跃</span></span><br></pre></td></tr></table></figure><ul><li>(3)两个信号相加的生成函数sigadd.m</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%两个信号相加的生成函数sigadd.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[y,n]</span>=<span class="title">sigadd</span><span class="params">(x1,n1,x2,n2)</span></span></span><br><span class="line">n=<span class="built_in">min</span>(<span class="built_in">min</span>(n1),<span class="built_in">min</span>(n2),<span class="built_in">min</span>(x1),<span class="built_in">min</span>(x2))</span><br><span class="line">y1=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(n));y2=y1;</span><br><span class="line">y1=(<span class="built_in">find</span>(n&gt;=<span class="built_in">min</span>(n1))&amp;(n&lt;=<span class="built_in">max</span>(n1))==<span class="number">1</span>)=x1;</span><br><span class="line">y2=(<span class="built_in">find</span>(n&gt;=<span class="built_in">min</span>(n2))&amp;(n&lt;=<span class="built_in">max</span>(n2))==<span class="number">1</span>)=x2;</span><br><span class="line">y=y1+y2;</span><br></pre></td></tr></table></figure><ul><li>(4)两个信号相乘的生成函数sigmult.m</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%两个信号相乘的生成函数sigmult.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[y,n]</span>=<span class="title">sigmult</span><span class="params">(x1,n1,x2,n2)</span></span></span><br><span class="line">n=<span class="built_in">min</span>(<span class="built_in">min</span>(n1),<span class="built_in">min</span>(n1),<span class="built_in">min</span>(x1),<span class="built_in">min</span>(x2))</span><br><span class="line">y1=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(n));y2=y1;</span><br><span class="line">y1=(<span class="built_in">find</span>(n&gt;=<span class="built_in">min</span>(n1))&amp;(n&lt;=<span class="built_in">max</span>(n1))==<span class="number">1</span>)=x1;</span><br><span class="line">y2=(<span class="built_in">find</span>(n&gt;=<span class="built_in">min</span>(n2))&amp;(n&lt;=<span class="built_in">max</span>(n2))==<span class="number">1</span>)=x2;</span><br><span class="line">y=y1*y2;</span><br></pre></td></tr></table></figure><ul><li>(5)序列移位y(n)=x(n-n0)的生成函数signshift.m</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%序列移位y(n)=x(n-n0)的生成函数signshift.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[y,n]</span>=<span class="title">signshift</span><span class="params">(x,m,n0)</span></span></span><br><span class="line">n=m+n0;y=x</span><br></pre></td></tr></table></figure><ul><li>(6)序列翻褶y(n)=x(-n)的生成函数sigfold.m</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[y,n]</span>=<span class="title">sigfold</span><span class="params">(x,n)</span></span></span><br><span class="line">y=<span class="built_in">fliplr</span>(x);n=-<span class="built_in">fliplr</span>(n)<span class="comment">%fliplr函数是对矩阵实施左右翻转</span></span><br></pre></td></tr></table></figure><ul><li>(7)奇偶综合函数evenodd.m</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%奇偶综合函数evenodd.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[xe,x0,m]</span>=<span class="title">evenodd</span><span class="params">(x,n)</span></span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">imag</span>(x)~=<span class="number">0</span>)</span><br><span class="line">    error(<span class="string">&#x27;x is not a real sequence&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">m=-<span class="built_in">fliplr</span>(n);m1=<span class="built_in">min</span>([m,n]);m2=<span class="built_in">max</span>([m,n]);m=m1:m2;</span><br><span class="line">nm=n(<span class="number">1</span>)-m(<span class="number">2</span>);n1=<span class="number">1</span>;<span class="built_in">length</span>(n);</span><br><span class="line">x1=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(m));</span><br><span class="line">xe=<span class="number">0.5</span>*(x+<span class="built_in">fliplr</span>(x));<span class="comment">%fliplr函数是对矩阵实施左右翻转</span></span><br><span class="line">x0=<span class="number">0.5</span>*(x-<span class="built_in">fliplr</span>(x));</span><br></pre></td></tr></table></figure><ul><li>(8)求卷积和</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%求卷积和,可以求从负值开始的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[y,ny]</span>=<span class="title">conv_m</span><span class="params">(x,nx,h,nh)</span></span></span><br><span class="line">ny1=nx(<span class="number">1</span>)+nh(<span class="number">1</span>);ny2=nx(<span class="built_in">length</span>(x))+nh(<span class="built_in">length</span>(h));</span><br><span class="line">ny=[ny1:ny2];</span><br><span class="line">y=conv(x,h);</span><br></pre></td></tr></table></figure><p>ex0108:产生系列序列，并绘出离散图。</p><p>(1)x1(n)=3δ(n-2)-δ(n+4)-5&lt;=n&lt;=5</p><p>(2) x2(n)=n[u(n)-u(n-5)]+10e^(-0.2(n-5))[u(n-10)-u(n-20)]0&lt;=n&lt;=20</p><p>(3)x3(n)=cos(0.04Πn)+0.2w(n)0&lt;=n&lt;=50</p><p>式中，w(n)是均值为0，方差为1的白噪声序列。</p><p>(4)$$\overline{x}4(n)=\widetilde{x}(n)=[x1x1x1x1]$$,其中x1=[1 0 1 2 3]</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0108_line.m</span></span><br><span class="line">n=[<span class="number">-5</span>:<span class="number">5</span>];</span><br><span class="line">x1=<span class="number">3</span>*impseq(<span class="number">2</span>,<span class="number">-5</span>,<span class="number">5</span>)-impseq(<span class="number">-4</span>,<span class="number">-5</span>,<span class="number">5</span>);</span><br><span class="line">subplot(<span class="number">221</span>),stem(n,x1);ylabel(<span class="string">&#x27;x(n)&#x27;</span>);axis([<span class="number">-5</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">4</span>]);</span><br><span class="line">n=[<span class="number">0</span>:<span class="number">20</span>];</span><br><span class="line">x21=n.*(stepseq(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>)-stepseq(<span class="number">10</span>,<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">x22=<span class="number">10</span>*<span class="built_in">exp</span>(<span class="number">-2</span>*(n<span class="number">-5</span>)).*(stepseq(<span class="number">10</span>,<span class="number">0</span>,<span class="number">20</span>)-stepseq(<span class="number">20</span>,<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">x2=x21+x22;</span><br><span class="line">subplot(<span class="number">222</span>),stem(n,x2),ylabel(<span class="string">&#x27;x2(n)&#x27;</span>);axis([<span class="number">0</span>,<span class="number">20</span>,<span class="number">-1</span>,<span class="number">11</span>])</span><br><span class="line">n=[<span class="number">0</span>:<span class="number">50</span>];</span><br><span class="line">x3=<span class="built_in">cos</span>(<span class="number">0.04</span>*<span class="built_in">pi</span>*n)+<span class="number">0.2</span>*<span class="built_in">randn</span>(<span class="built_in">size</span>(n));</span><br><span class="line">subplot(<span class="number">223</span>),stem(n,x3);xlabel(<span class="string">&#x27;n&#x27;</span>);ylabel(<span class="string">&#x27;x3(n)&#x27;</span>);axis([<span class="number">0</span>,<span class="number">50</span>,<span class="number">-2</span>,<span class="number">2</span>])</span><br><span class="line">n=[<span class="number">-10</span>:<span class="number">9</span>];</span><br><span class="line">x4=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">xtilde=x4&#x27;*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">4</span>);xtilde=(xtilde(:))&#x27;;</span><br><span class="line">subplot(<span class="number">224</span>);stem(n,xtilde);ylabel(<span class="string">&#x27;x4(n)&#x27;</span>);axis([<span class="number">-10</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200928215224.png" alt=""></p><blockquote><p>axis函数：用于操作普通的坐标属性，（轴的缩放和外观）。</p><p>axis( [xmin xmax ymin ymax] )  设置当前坐标轴 x轴 和 y轴的限制范围</p></blockquote><h3 id="离散序列的基本运算"><a class="header-anchor" href="#离散序列的基本运算">¶</a>离散序列的基本运算</h3><ol><li>加法</li></ol><p>对于离散序列而言，序列相加是将信号对应时间序号的值逐项相加，在这里不能像连续时间信号那样用符号运算来实现，而必须用向量表示的方法，即在MATLAB中离散序列的相加需表示成两个向量的相加，因而参加运算的两序列向量必须具有相同的维数。</p><p>实现离散序列相加的MATLAB实用子程序如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%实现离散序列相加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[f,k]</span>=<span class="title">lsxj</span><span class="params">(f1,f2,k1,k2)</span></span></span><br><span class="line"><span class="comment">%实现f(k)=f1(k)+f2(k),f1,f2,k1,k2是参加运算的两离散序列及其对应的时间序列向量</span></span><br><span class="line"><span class="comment">%f和k为返回的和序列及其对应的时间序列向量</span></span><br><span class="line">k=<span class="built_in">min</span>(<span class="built_in">min</span>(k1),<span class="built_in">min</span>(k2)):<span class="built_in">max</span>(<span class="built_in">max</span>(k1),<span class="built_in">max</span>(k2));<span class="comment">%构造和序列长度</span></span><br><span class="line">s1=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(k));s2=s1;<span class="comment">%初始化新向量</span></span><br><span class="line">s1(<span class="built_in">find</span>((k&gt;=<span class="built_in">min</span>(k1))&amp;(k&lt;=<span class="built_in">max</span>(k1))==<span class="number">1</span>))=f1;<span class="comment">%将f1中在和序列范围内但又无定义的点赋值为零</span></span><br><span class="line">s2(<span class="built_in">find</span>((k&gt;=<span class="built_in">min</span>(k2))&amp;(k&lt;=<span class="built_in">max</span>(k2))==<span class="number">1</span>))=f2;<span class="comment">%将f2中在和序列范围内但又无定义的点赋值为零//保证了s1和s2序列长度相同</span></span><br><span class="line">f=s1+s2;<span class="comment">%两长度相等序列求和</span></span><br><span class="line">stem(k,f,<span class="string">&#x27;filled&#x27;</span>)</span><br><span class="line">axis([(<span class="built_in">min</span>(<span class="built_in">min</span>(k1),<span class="built_in">min</span>(k2))<span class="number">-1</span>),(<span class="built_in">max</span>(<span class="built_in">max</span>(k1),<span class="built_in">max</span>(k2))+<span class="number">1</span>),(<span class="built_in">min</span>(f)<span class="number">-0.5</span>),(<span class="built_in">max</span>(f)+<span class="number">0.5</span>)])<span class="comment">%坐标轴显示范围</span></span><br></pre></td></tr></table></figure><blockquote><p>find函数：查询非零元素的位置和值</p></blockquote><p>ex0109:已知两离散序列分别为</p><p>f1[k]={-2,-1,0,1,2}f2[k]={1,1,1}</p><p>试用MATLAB绘出它们的波形及f1[k]+f2[k]的波形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa0109_lisanxulie.m</span></span><br><span class="line">clear</span><br><span class="line">f1=<span class="number">-2</span>:<span class="number">2</span>;k1=<span class="number">-2</span>:<span class="number">2</span>;</span><br><span class="line">f2=[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>];k2=<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">subplot(<span class="number">221</span>);stem(k1,f1);axis([<span class="number">-3</span> <span class="number">3</span> <span class="number">-2.5</span> <span class="number">2.5</span>]);title(<span class="string">&#x27;f1[k]&#x27;</span>);</span><br><span class="line">subplot(<span class="number">222</span>);stem(k2,f2);axis([<span class="number">-3</span> <span class="number">3</span> <span class="number">-2.5</span> <span class="number">2.5</span>]);title(<span class="string">&#x27;f2[k]&#x27;</span>);</span><br><span class="line">subplot <span class="number">223</span>;</span><br><span class="line">[f,k]=lsxj(f1,f2,k1,k2);</span><br><span class="line">title(<span class="string">&#x27;f[k]=f1[k]+f2[k]&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929102701.png" alt=""></p><ol start="2"><li>乘法</li></ol><p>与离散序列加法相似，这里参加运算的两序列向量必须具有相同的维数。实现离散时间信号相乘的MATLAB实用子程序如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%离散序列乘法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[f,k]</span>=<span class="title">lsxc</span><span class="params">(f1,f2,k1,k2)</span></span></span><br><span class="line"><span class="comment">%实现f(k)=f1(k)+f2(k),f1,f2,k1,k2是参加运算的两离散序列及其对应的时间序列向量</span></span><br><span class="line"><span class="comment">%f和k为返回的和序列及其对应的时间序列向量</span></span><br><span class="line">k=<span class="built_in">min</span>(<span class="built_in">min</span>(k1),<span class="built_in">min</span>(k2)):<span class="built_in">max</span>(<span class="built_in">max</span>(k1),<span class="built_in">max</span>(k2));<span class="comment">%构造和序列长度</span></span><br><span class="line">s1=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(k));s2=s1;<span class="comment">%初始化新向量</span></span><br><span class="line">s1(<span class="built_in">find</span>((k&gt;=<span class="built_in">min</span>(k1))&amp;(k&lt;=<span class="built_in">max</span>(k1))==<span class="number">1</span>))=f1;<span class="comment">%将f1中在和序列范围内但又无定义的点赋值为0</span></span><br><span class="line">s2(<span class="built_in">find</span>((k&gt;=<span class="built_in">min</span>(k2))&amp;(k&lt;=<span class="built_in">max</span>(k2))==<span class="number">1</span>))=f2;<span class="comment">%将f2中在和序列范围内但又无定义的点赋值为0</span></span><br><span class="line">f=s1.*s2;<span class="comment">%两长度相等序列求和</span></span><br><span class="line">stem(k,f,<span class="string">&#x27;filled&#x27;</span>)</span><br><span class="line">axis([(<span class="built_in">min</span>(<span class="built_in">min</span>(k1),<span class="built_in">min</span>(k2))<span class="number">-1</span>),(<span class="built_in">max</span>(<span class="built_in">max</span>(k1),<span class="built_in">max</span>(k2))+<span class="number">1</span>),(<span class="built_in">min</span>(f)<span class="number">-0.5</span>),(<span class="built_in">max</span>(f)+<span class="number">0.5</span>)])</span><br></pre></td></tr></table></figure><p>ex01010:试用MATLAB绘出上例中两离散序列乘法f1[k]*f2[k]的波形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa01010_lisanchengfa.m</span></span><br><span class="line">f1=<span class="number">-2</span>:<span class="number">2</span>;k1=<span class="number">-2</span>:<span class="number">2</span>;</span><br><span class="line">f2=[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>];k2=<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">subplot <span class="number">221</span>;stem(k1,f1);axis([<span class="number">-3</span> <span class="number">3</span> <span class="number">-2.5</span> <span class="number">2.5</span>]);title(<span class="string">&#x27;f1[k]&#x27;</span>);</span><br><span class="line">subplot <span class="number">222</span>;stem(k2,f2);axis([<span class="number">-3</span> <span class="number">3</span> <span class="number">-2.5</span> <span class="number">2.5</span>]);title(<span class="string">&#x27;f2[k]&#x27;</span>);</span><br><span class="line">subplot <span class="number">223</span>;</span><br><span class="line">[f,k]=lsxc(f1,f2,k1,k2);title(<span class="string">&#x27;f[k]=f1[k]*f2[k]&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929110346.png" alt=""></p><ol start="3"><li>差分与求和</li></ol><p>离散序列的差分<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi></mrow><annotation encoding="application/x-tex">\nabla</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">∇</span></span></span></span>f[k]=f[k]-f[k-1]，在MATLAB中用diff函数来实现，其调用格式为：             y=diff(f)</p><p>离散序列的求和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mn>2</mn><mo stretchy="false">(</mo><mo>∑</mo><mi>f</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi>k</mi><mo>=</mo><mi>k</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">k2(\sum f[k])k=k1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mopen">(</span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span></span></span></span>与信号相加运算不同，求和运算是把k1和k2之间的所有样本f[k]加起来，在MATLAB中可利用sum函数来实现，其调用形式为：y=sum(f(k1:2))</p><ol start="4"><li>时移、反褶、尺度变换</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%离散序列图像变换实现程序</span></span><br><span class="line">clear;</span><br><span class="line">k=<span class="number">-12</span>:<span class="number">12</span>;</span><br><span class="line">k1=<span class="number">2.</span>*k+<span class="number">4</span>;</span><br><span class="line">f=-[stepfun(k,<span class="number">-3</span>)-stepfun(k,<span class="number">-1</span>)]+...</span><br><span class="line">    <span class="number">4.</span>*[stepfun(k,<span class="number">-1</span>)-stepfun(k,<span class="number">0</span>)]+...</span><br><span class="line">    <span class="number">0.5</span>*k.*[stepfun(k,<span class="number">0</span>)-stepfun(k,<span class="number">11</span>)];</span><br><span class="line">f1=-[stepfun(k1,<span class="number">-3</span>)-stepfun(k1,<span class="number">-1</span>)]+...</span><br><span class="line">    <span class="number">4.</span>*[stepfun(k1,<span class="number">-1</span>)-stepfun(k1,<span class="number">0</span>)]+...</span><br><span class="line">    <span class="number">0.5</span>*k1.*[stepfun(k1,<span class="number">0</span>)-stepfun(k1,<span class="number">11</span>)];</span><br><span class="line">subplot(<span class="number">221</span>);</span><br><span class="line">stem(k,f);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-1</span> <span class="number">6</span>]);</span><br><span class="line">grid on;</span><br><span class="line">text(<span class="number">-8</span>,<span class="number">3</span>,<span class="string">&#x27;f[k]&#x27;</span>)</span><br><span class="line">subplot(<span class="number">222</span>);</span><br><span class="line">stem(k+<span class="number">1</span>,f);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-1</span> <span class="number">6</span>]);</span><br><span class="line">grid on;</span><br><span class="line">text(<span class="number">-9.5</span>,<span class="number">3</span>,<span class="string">&#x27;f[k-1]&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;</span><br><span class="line">stem(k,f1);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-1</span> <span class="number">6</span>]);</span><br><span class="line">grid on;</span><br><span class="line">text(<span class="number">-8</span>,<span class="number">3</span>,<span class="string">&#x27;f[2k+4]&#x27;</span>)</span><br><span class="line">subplot(<span class="number">224</span>);</span><br><span class="line">stem(<span class="number">2</span> -k,f);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-1</span> <span class="number">6</span>]);</span><br><span class="line">grid on;</span><br><span class="line">text(<span class="number">5.5</span>,<span class="number">3</span>,<span class="string">&#x27;f[2-k]&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929193443.png" alt=""></p><h3 id="奇偶分解"><a class="header-anchor" href="#奇偶分解">¶</a>奇偶分解</h3><p>可以利用MATLAB编写的函数evenodd()将序列分解成偶序列和奇序列两部分，程序如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%离散序列分解成偶分量和奇分量的程序</span></span><br><span class="line">clf</span><br><span class="line">n0=<span class="number">0</span>;n1=<span class="number">-10</span>;n2=<span class="number">10</span>;</span><br><span class="line">n=n1:n2;</span><br><span class="line">x=[(n-n0)&gt;=<span class="number">0</span>];</span><br><span class="line">subplot <span class="number">221</span>;</span><br><span class="line">stem(n,x)</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);ylabel(<span class="string">&#x27;x(n)&#x27;</span>);title(<span class="string">&#x27;Step Sequence&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="comment">%Decompositon of the Seqence</span></span><br><span class="line">[xeven,xodd,m]=evenodd(x,n);<span class="comment">%evenodd函数分解奇偶向量</span></span><br><span class="line">subplot <span class="number">223</span></span><br><span class="line">stem(m,xeven);</span><br><span class="line">xlabel(<span class="string">&#x27;m&#x27;</span>);ylabel(<span class="string">&#x27;x even(n)&#x27;</span>);title(<span class="string">&#x27;Even Part&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line">subplot <span class="number">224</span></span><br><span class="line">stem(m,xodd);</span><br><span class="line">xlabel(<span class="string">&#x27;m&#x27;</span>);ylabel(<span class="string">&#x27;x odd(n)&#x27;</span>);title(<span class="string">&#x27;Odd Part&#x27;</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><blockquote><p><em>clf函数</em>：清除图形窗口上的旧图形</p><p>evenodd.m函数:可以将任一给定的序列x(n)分解为xe(n)和xo(n)两部分</p><p>用法：[xe,xo,m]=evenodd(x,n)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929161849.png" alt=""></p><p>ex01011:已知x(n)=u(n)-u(n-10)，要求将序列分解成奇偶序列。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa01011_evenodd.m</span></span><br><span class="line">clear</span><br><span class="line">n=[<span class="number">0</span>:<span class="number">10</span>];</span><br><span class="line">x=stepseq(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>)-stepseq(<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">[xe,xo,m]=evenodd(x,n);</span><br><span class="line">subplot <span class="number">221</span>;stem(n,x),ylabel(<span class="string">&#x27;x(n)&#x27;</span>),xlabel(<span class="string">&#x27;n&#x27;</span>),title(<span class="string">&#x27;矩形序列&#x27;</span>),axis([<span class="number">-10</span>,<span class="number">10</span>,<span class="number">-1.2</span>,<span class="number">1.2</span>]);</span><br><span class="line">subplot <span class="number">222</span>;</span><br><span class="line">stem(m,xe);</span><br><span class="line">ylabel(<span class="string">&#x27;xe(n)&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;奇序列&#x27;</span>);</span><br><span class="line">axis([<span class="number">-10</span> <span class="number">10</span> <span class="number">-1.2</span> <span class="number">1.2</span>])</span><br><span class="line">subplot <span class="number">224</span>;</span><br><span class="line">stem(m,xo);</span><br><span class="line">ylabel(<span class="string">&#x27;xo(n)&#x27;</span>),xlabel(<span class="string">&#x27;n&#x27;</span>),title(<span class="string">&#x27;偶序列&#x27;</span>),axis([<span class="number">-10</span> <span class="number">10</span> <span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br></pre></td></tr></table></figure><div class='tip error'><p>error:出现错误，画不出图来<p></div><h3 id="常系数线性差分方程解"><a class="header-anchor" href="#常系数线性差分方程解">¶</a>常系数线性差分方程解</h3><p>ex01012:设线性时不变系统的抽样响应h(n)=(0.9)^n*u(n)，输入序列x(n)=u(n)-u(n-10)，求系统的输出y(n)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%线性差分方程解</span></span><br><span class="line"><span class="comment">%exa01012_chafen.m</span></span><br><span class="line">n=<span class="number">-5</span>:<span class="number">50</span>;x=stepseq(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">50</span>)-stepseq(<span class="number">10</span>,<span class="number">-5</span>,<span class="number">50</span>);</span><br><span class="line">h=((<span class="number">0.9</span>).^(n)).*stepseq(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">50</span>);</span><br><span class="line">subplot(<span class="number">311</span>);stem(n,x);axis([<span class="number">-5</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;x(n)&#x27;</span>);</span><br><span class="line">subplot(<span class="number">312</span>);stem(n,h);axis([<span class="number">-5</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;h(n)&#x27;</span>);</span><br><span class="line">[y,ny]=conv_m(x,n,h,n);</span><br><span class="line">subplot(<span class="number">313</span>);stem(ny,y);axis([<span class="number">-5</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">8</span>]);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);ylabel(<span class="string">&#x27;y(n)&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929203435.png" alt=""></p><p>ex01013:给定因果稳定线性时不变系统的差分方程</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929203427.png" alt=""></p><p>对下列输入序列x(n)，求出输出序列y(n)。</p><p>(1)   x(n)=δ(n);(2)x(n)=u(n);(3)x(n)=R30(n);(4)x(n)=e^(jpi/4*n)u(n)</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa01013_shuchu.m</span></span><br><span class="line">N=<span class="number">100</span>;n=<span class="number">0</span>:N<span class="number">-1</span>;</span><br><span class="line">b=<span class="number">1</span>;a=[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0.9</span>];<span class="comment">%这个好像是自己设置的</span></span><br><span class="line">x1=[n==<span class="number">0</span>];<span class="comment">%当成冲激函数</span></span><br><span class="line">y1=filter(b,a,x1);<span class="comment">%一维滤波器</span></span><br><span class="line">subplot(<span class="number">321</span>);stem(n,y1,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N,<span class="number">-1</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;y1(n)&#x27;</span>);</span><br><span class="line">x2=[n&gt;=<span class="number">0</span>];<span class="comment">%当成阶跃函数</span></span><br><span class="line">y2=filter(b,a,x2);</span><br><span class="line">subplot(<span class="number">322</span>);stem(n,y2,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N,<span class="number">-1</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;y2(n)&#x27;</span>);</span><br><span class="line">x3=[(n&gt;=<span class="number">0</span>)&amp;(n&lt;<span class="number">30</span>)];<span class="comment">%当成矩形函数</span></span><br><span class="line">y3=filter(b,a,x3);</span><br><span class="line">subplot(<span class="number">323</span>);stem(n,<span class="built_in">real</span>(y3),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N,<span class="number">-2</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;Re[y4(n)]&#x27;</span>);</span><br><span class="line">x4=<span class="built_in">exp</span>(<span class="built_in">j</span>*<span class="built_in">pi</span>*n/<span class="number">8</span>);<span class="comment">%exp默认是乘方？？？</span></span><br><span class="line">y4=filter(b,a,x4);</span><br><span class="line">subplot(<span class="number">325</span>);stem(n,<span class="built_in">real</span>(y4),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N,<span class="number">-2</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;Re[y4(n)]&#x27;</span>);</span><br><span class="line">subplot(<span class="number">326</span>);stem(n,<span class="built_in">imag</span>(y4),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N,<span class="number">-2</span>,<span class="number">2</span>]);ylabel(<span class="string">&#x27;Im[y4(n)]&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面的xn通过逻辑判断来生成对应的函数</p><p>y = filter(b,a,X) 滤除向量X中的数据，其中b是分子系数<strong>向量</strong>，a是分母系数<strong>向量</strong>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200929203410.png" alt=""></p><h3 id="序列的傅里叶变换与信号重构"><a class="header-anchor" href="#序列的傅里叶变换与信号重构">¶</a>序列的傅里叶变换与信号重构</h3><p>ex01014: Xa(t)=e^(-1000(t))，求其傅里叶变换Xa(jw)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa01014_bianhuan.m</span></span><br><span class="line">Dt=<span class="number">0.00005</span>;t=<span class="number">-0.005</span>:Dt:<span class="number">0.005</span>;<span class="comment">%模拟信号</span></span><br><span class="line">xa=<span class="built_in">exp</span>(<span class="number">-1000</span>*<span class="built_in">abs</span>(t));</span><br><span class="line">Wmax=<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">2000</span>;K=<span class="number">500</span>;k=<span class="number">0</span>:<span class="number">1</span>:K;W=k*Wmax/K;<span class="comment">%连续时间傅里叶变换</span></span><br><span class="line">Xa=xa*<span class="built_in">exp</span>(<span class="number">-1</span><span class="built_in">i</span>*t&#x27;*W)*Dt;Xa=<span class="built_in">real</span>(Xa);</span><br><span class="line">W=[-<span class="built_in">fliplr</span>(W),W(<span class="number">2</span>:<span class="number">501</span>)];</span><br><span class="line">Xa=[<span class="built_in">fliplr</span>(Xa),Xa(<span class="number">2</span>:<span class="number">501</span>)];</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot <span class="number">211</span>;<span class="built_in">plot</span>(t*<span class="number">1000</span>,xa,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;t in msec&#x27;</span>);ylabel(<span class="string">&#x27;xa(t)&#x27;</span>);gtext(<span class="string">&#x27;模拟信号&#x27;</span>);</span><br><span class="line">subplot <span class="number">212</span>;<span class="built_in">plot</span>(W/(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">1000</span>),Xa*<span class="number">1000</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Frequence in kHz&#x27;</span>);ylabel(<span class="string">&#x27;Xa(jw)*1000&#x27;</span>);gtext(<span class="string">&#x27;连续时间傅里叶变换&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>fliplr函数：矩阵翻转</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201002163344.png" alt=""></p><p>ex01015:以上例中的xa(t)，说明采样频率对频域特性的影响，分别取采样频率为fx=5000Hz和fa=1000Hz，绘出Xa(jw)曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa01015</span></span><br><span class="line">Dt=<span class="number">0.00005</span>;t=<span class="number">-0.005</span>:Dt:<span class="number">0.005</span>;<span class="comment">%模拟信号</span></span><br><span class="line">xa=<span class="built_in">exp</span>(<span class="number">-1000</span>*<span class="built_in">abs</span>(t));</span><br><span class="line"></span><br><span class="line">Ts=<span class="number">0.0002</span>;n=<span class="number">-25</span>:<span class="number">1</span>:<span class="number">25</span>;</span><br><span class="line">x=<span class="built_in">exp</span>(<span class="number">-1000</span>*<span class="built_in">abs</span>(n*Ts));</span><br><span class="line">K=<span class="number">500</span>;k=<span class="number">0</span>:<span class="number">1</span>:K;w=<span class="built_in">pi</span>*k/K;</span><br><span class="line">X=x*<span class="built_in">exp</span>(-<span class="built_in">j</span>*n&#x27;*w);X=<span class="built_in">real</span>(X);</span><br><span class="line">w=[-<span class="built_in">fliplr</span>(w),w(<span class="number">2</span>:<span class="number">501</span>)];<span class="comment">%第二位元素到501位元素</span></span><br><span class="line">X=[<span class="built_in">fliplr</span>(X),X(<span class="number">2</span>:<span class="number">501</span>)];</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">subplot <span class="number">211</span>;<span class="built_in">plot</span>(t*<span class="number">1000</span>,xa,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;xal(t)&#x27;</span>);</span><br><span class="line">gtext(<span class="string">&#x27;离散信号&#x27;</span>);<span class="built_in">hold</span> on</span><br><span class="line">stem(n*Ts*<span class="number">1000</span>,x);<span class="built_in">hold</span> off</span><br><span class="line">subplot <span class="number">212</span>;<span class="built_in">plot</span>(w/<span class="built_in">pi</span>,X,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;Xi(jw)&#x27;</span>);</span><br><span class="line">gtext(<span class="string">&#x27;离散时间傅里叶变换&#x27;</span>);gtext(<span class="string">&#x27;Ts=0.2msec&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201005213708.png" alt=""></p><p>ex01016:对上面产生的离散序列x1(n)和x2(n)，采用sinc函数进行内插重构。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa01016</span></span><br><span class="line">clear</span><br><span class="line">Ts1=<span class="number">0.0002</span>;Fs1=<span class="number">1</span>/Ts1;n1=<span class="number">-25</span>:<span class="number">1</span>:<span class="number">25</span>;nTs1=n1*Ts1;</span><br><span class="line">x1=<span class="built_in">exp</span>(<span class="number">-1000</span>*<span class="built_in">abs</span>(nTs1));</span><br><span class="line">Ts2=<span class="number">0.001</span>;Fs2=<span class="number">1</span>/Ts2;n2=<span class="number">-5</span>:<span class="number">1</span>:<span class="number">5</span>;nTs2=n2*Ts2;</span><br><span class="line">x2=<span class="built_in">exp</span>(<span class="number">-1000</span>*<span class="built_in">abs</span>(nTs2));</span><br><span class="line"></span><br><span class="line">Dt=<span class="number">0.00005</span>;t=<span class="number">-0.5</span>:Dt:<span class="number">0.005</span>;<span class="comment">%模拟信号重构</span></span><br><span class="line">xa1=x1*sinc(Fs1*(<span class="built_in">ones</span>(<span class="built_in">length</span>(nTs1),<span class="number">1</span>)*t - nTs1&#x27;*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">length</span>(t))));</span><br><span class="line">xa2=x2*sinc(Fs2*(<span class="built_in">ones</span>(<span class="built_in">length</span>(nTs2),<span class="number">1</span>)*t - nTs2&#x27;*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">length</span>(t))));</span><br><span class="line"></span><br><span class="line">subplot <span class="number">211</span>;<span class="built_in">plot</span>(t*<span class="number">1000</span>,xa1,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;xa1(t)&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;从x1(n)重构模拟信号xa(t)&#x27;</span>);<span class="built_in">hold</span> on</span><br><span class="line">stem(n1*Ts1*<span class="number">1000</span>,x1);<span class="built_in">hold</span> off</span><br><span class="line">subplot <span class="number">212</span>;<span class="built_in">plot</span>(t*<span class="number">1000</span>,xa2,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;xa2(t)&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;从x2(n)重构模拟信号xa(t)&#x27;</span>);<span class="built_in">hold</span> on</span><br><span class="line">stem(n2*Ts2*<span class="number">1000</span>,x2);<span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201005213701.png" alt=""></p><h2 id="第二章-v2"><a class="header-anchor" href="#第二章-v2">¶</a>第二章</h2><h3 id="MATLAB几个信号处理工具箱函数"><a class="header-anchor" href="#MATLAB几个信号处理工具箱函数">¶</a>MATLAB几个信号处理工具箱函数</h3><ol><li>residuez:求极点留数分解</li></ol><p>Y(z)=X(z)H(z)=B(z)/A(z)</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201006095659.png" alt=""></p><p>从上式可得出时域信号为</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201006095651.png" alt=""></p><p>调用格式为：[r,p,k]=residuez(B,A)</p><ol start="2"><li>impz:求H(z)的Z的反变换h(n)</li></ol><p>[h,T]=impz(B,A,N)</p><blockquote><p>h为存放h(n)的列向量，时间变量N存放在列向量T中，当N为标量时，表示T=[0:N-1]’，计算h(n)，n=0,1,2，···，N-1;当N为向量时，T=N,仅计算N指定的整数上的h(n)。</p></blockquote><ol start="3"><li>freqz：求数字滤波器H(z)的频率响应函数</li></ol><p>H=freqz[B,A,M]</p><p>计算由向量w指定的数字频率点上数字滤波器H(z)的频率响应，结果存在H向量中。</p><p>[H,w]=freqz[B,A,M]</p><p>计算出M个频率点上的频率响应，存放在H向量中，M个频率存放在w向量中，freqz函数自动将这M个频率点均匀设置在频率范围[0,Π]之间。</p><blockquote><p>若省略w和M时，函数自动选取512个频率点计算。</p></blockquote><ol start="4"><li>zplane:绘制H(z)的零极点图</li></ol><p>zplane(z,p)</p><p>绘制出列向量z中的零点（以符号“ 。”表示）和列向量p中的极点（以符号“X”表示）以及参考单位圆，并在多阶零点和极点的右上角标出其阶数。若z和p为矩阵，则会以不同颜色绘出z和p各列中的零点和极点。</p><p>zplane(B,A)</p><blockquote><p>绘制出系统函数H(z)的零极点图</p></blockquote><h3 id="绘制离散系统的极零图"><a class="header-anchor" href="#绘制离散系统的极零图">¶</a>绘制离散系统的极零图</h3><p>离散系统的系统函数零点和极点可以用MATLAB的多项式求根函数roots()来实现，调用该函数的命令格式为：</p><p>p=roots(A)</p><blockquote><p>A为待求根的多项式的系数构成的行向量，返回向量p则包含该多项式所有的根位置列向量。</p></blockquote><p>下面是求系统函数零极点，并绘制其零极点图的MATLAB实用函数ljdt()，该函数在绘制系统零极点图的同时，还绘出了Z平面的单位圆。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ljdt</span><span class="params">(A,B)</span></span></span><br><span class="line"><span class="comment">%The function to draw the pole-zero diagram for discrete system</span></span><br><span class="line">p=roots(A);<span class="comment">%求系统极点</span></span><br><span class="line">q=roots(B);<span class="comment">%求系统零点</span></span><br><span class="line">p=p&#x27;;<span class="comment">%将极点列向量转置为行向量</span></span><br><span class="line">q=q&#x27;;<span class="comment">%将零点列向量转置为行向量</span></span><br><span class="line">x=<span class="built_in">max</span>(<span class="built_in">abs</span>([p q <span class="number">1</span>]));<span class="comment">%确定纵坐标范围</span></span><br><span class="line">x=x+<span class="number">0.1</span>;</span><br><span class="line">y=x;<span class="comment">%确定横坐标范围</span></span><br><span class="line">clf</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">axis([-x x -y y])<span class="comment">%确定坐标轴显示范围</span></span><br><span class="line">w=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">300</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">t=<span class="built_in">exp</span>(<span class="built_in">i</span>*w);</span><br><span class="line"><span class="built_in">plot</span>(t)<span class="comment">%画单位圆</span></span><br><span class="line">axis(<span class="string">&#x27;square&#x27;</span>)</span><br><span class="line"><span class="built_in">plot</span>([-x x],[<span class="number">0</span> <span class="number">0</span>])<span class="comment">%画横坐标轴</span></span><br><span class="line"><span class="built_in">plot</span>([<span class="number">0</span> <span class="number">0</span>],[-y y])<span class="comment">%画纵坐标轴</span></span><br><span class="line">text(<span class="number">0.1</span>,x,<span class="string">&#x27;jIm[z]&#x27;</span>)</span><br><span class="line">text(y,<span class="number">1</span>/<span class="number">10</span>,<span class="string">&#x27;Re[z]&#x27;</span>)</span><br><span class="line"><span class="built_in">plot</span>(<span class="built_in">real</span>(p),<span class="built_in">imag</span>(p),<span class="string">&#x27;x&#x27;</span>)<span class="comment">%画极点</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="built_in">real</span>(q),<span class="built_in">imag</span>(q),<span class="string">&#x27;o&#x27;</span>)<span class="comment">%画零点</span></span><br><span class="line">title(<span class="string">&#x27;pole-zero diagram for discrete system&#x27;</span>)<span class="comment">%标注标题</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure><p>exa02026:已知某离散系统的系统函数为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>z</mi><mo>+</mo><mn>1</mn></mrow><mrow><mn>3</mn><msup><mi>z</mi><mn>5</mn></msup><mo>−</mo><msup><mi>z</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(z)=\frac{z+1}{3z^5-z^4+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>试用MATLAB求出该系统的零极点，并画出零极点分布图，判断系统是否稳定。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02026</span></span><br><span class="line"><span class="comment">%绘制零极点分布图的实现程序</span></span><br><span class="line">a=[<span class="number">3</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</span><br><span class="line">b=[<span class="number">1</span> <span class="number">1</span>];</span><br><span class="line">ljdt(a,b)</span><br><span class="line">p=roots(a);</span><br><span class="line">q=roots(b);</span><br><span class="line">pa=<span class="built_in">abs</span>(p);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201009193128.png" alt=""></p><p>exa02027:已知某离散系统的系统函数为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msup><mi>z</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>z</mi><mo>+</mo><mn>1</mn></mrow><mrow><msup><mi>z</mi><mn>3</mn></msup><mo>−</mo><mn>0.5</mn><msup><mi>z</mi><mn>2</mn></msup><mo>−</mo><mn>0.005</mn><mi>z</mi><mo>+</mo><mn>0.3</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(z)=\frac{z^2+2z+1}{z^3-0.5z^2-0.005z+0.3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4212509999999998em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">5</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">+</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>试用MATLAB求该系统的零极点，并画出零极点分布图，求系统的单位冲激响应和幅频响应，并判断系统是否稳定。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02027</span></span><br><span class="line"><span class="comment">%由系统函数求解系统脉冲响应，频率响应实现程序</span></span><br><span class="line">b=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">a=[<span class="number">1</span> <span class="number">-0.5</span> <span class="number">-0.005</span> <span class="number">0.3</span>];</span><br><span class="line">subplot <span class="number">311</span>;</span><br><span class="line">zplane(b,a);<span class="comment">%绘制H(z)的零极点图</span></span><br><span class="line">xlabel(<span class="string">&#x27;实部&#x27;</span>);ylabel(<span class="string">&#x27;虚部&#x27;</span>);</span><br><span class="line">num=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">den=[<span class="number">1</span> <span class="number">-0.5</span> <span class="number">-0.005</span> <span class="number">0.3</span>];</span><br><span class="line">h=impz(num,den);</span><br><span class="line">subplot <span class="number">312</span>;</span><br><span class="line">stem(h);xlabel(<span class="string">&#x27;k&#x27;</span>);title(<span class="string">&#x27;单位脉冲响应&#x27;</span>);</span><br><span class="line">[H,w]=freqz(num,den);<span class="comment">%求数字滤波器H(z)的频率响应函数</span></span><br><span class="line">subplot <span class="number">313</span>;</span><br><span class="line"><span class="built_in">plot</span>(w/<span class="built_in">pi</span>,<span class="built_in">abs</span>(H));</span><br><span class="line">xlabel(<span class="string">&#x27;频率\omega&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;频率响应&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201009193141.png" alt=""></p><h3 id="分析离散系统的零极图分布与系统单位响应时域特性的关系"><a class="header-anchor" href="#分析离散系统的零极图分布与系统单位响应时域特性的关系">¶</a>分析离散系统的零极图分布与系统单位响应时域特性的关系</h3><p>exa02028:已知离散系统的零极分布分别如图2.12所示，其中虚线表示单位圆，试用MATLAB分析系统单位响应h(n)的时域特性。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201009200621.png" alt="图2.12 离散系统的零极分布图"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02028</span></span><br><span class="line"><span class="comment">%零极点分布与单位响应的关系实现程序</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">-1</span>];b=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">321</span></span><br><span class="line">impz(b,a);<span class="comment">%求H(z)的Z的反变换h(n)，画出图像</span></span><br><span class="line">a1=[<span class="number">1</span>,<span class="number">-0.8</span>];b1=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">322</span></span><br><span class="line">impz(b1,a1,<span class="number">10</span>);</span><br><span class="line">a2=[<span class="number">1</span>,<span class="number">-2</span>];b2=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">323</span></span><br><span class="line">impz(b2,a2,<span class="number">10</span>);</span><br><span class="line">a3=[<span class="number">1</span>, <span class="number">-2</span>*<span class="number">0.8</span>*<span class="built_in">cos</span>(<span class="built_in">pi</span>/<span class="number">4</span>),<span class="number">0.8</span>^<span class="number">2</span>];</span><br><span class="line">b3=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">324</span></span><br><span class="line">impz(b3,a3,<span class="number">20</span>);</span><br><span class="line">a4=[<span class="number">1</span>,<span class="number">-2</span>*<span class="number">0.8</span>*<span class="built_in">cos</span>(<span class="built_in">pi</span>/<span class="number">8</span>),<span class="number">1</span>];b4=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">325</span></span><br><span class="line">impz(b4,a4,<span class="number">20</span>)</span><br><span class="line">a5=[<span class="number">1</span>,<span class="number">-2</span>*<span class="number">1.2</span>*<span class="built_in">cos</span>(<span class="built_in">pi</span>/<span class="number">4</span>),<span class="number">1.2</span>^<span class="number">2</span>];b5=[<span class="number">1</span>];</span><br><span class="line">subplot <span class="number">326</span></span><br><span class="line">impz(b5,a5,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201010110839.png" alt=""></p><p>exa02029:求一因果线性移不变系统<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.81</mn><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>−</mo><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(n)=0.81y(n-2)+x(n)-x(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">8</span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>的单位抽样响应h(n)，单位阶跃响应g(n)，并绘出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>w</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(e^{jw})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的幅频和相频特性。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02029</span></span><br><span class="line">b=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>];a=[<span class="number">1</span> <span class="number">0</span> <span class="number">-0.81</span>];</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot <span class="number">211</span>;dimpulse(b,a,<span class="number">50</span>);ylabel(<span class="string">&#x27;h(n)&#x27;</span>);</span><br><span class="line">subplot <span class="number">212</span>;dstep(b,a,<span class="number">50</span>);ylabel(<span class="string">&#x27;g(n)&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">w=[<span class="number">0</span>:<span class="number">1</span>:<span class="number">500</span>]*<span class="built_in">pi</span>/<span class="number">500</span>;</span><br><span class="line">freqz(b,a,w)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201010114343.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201010114351.png" alt=""></p><p>exa02030:梳状滤波器零极点和幅频特性。梳状滤波器系统函数有如下两种类型：</p><p>FIR型：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>z</mi><mrow><mo>−</mo><mi>N</mi></mrow></msup></mrow><annotation encoding="application/x-tex">H_1(z)=1-z^{-N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>IIR型：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mi>z</mi><mrow><mo>−</mo><mi>N</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><msup><mi>a</mi><mi>N</mi></msup><msup><mi>z</mi><mrow><mo>−</mo><mi>N</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">H_2(z)=\frac{1-z^{-N}}{1-a^{N}z^{-N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4475609999999999em;vertical-align:-0.4101959999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0373649999999999em;"><span style="top:-2.648135em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7740928571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7740928571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4101959999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>分别令N=8,a=0.8,0.9,0.98计算并图示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mi mathvariant="normal">和</mi><msub><mi>H</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H_1(z)和H_2(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>的零、极点图及幅频特性，说明极点位置的影响。</p><p>☑️增加了相频特性曲线</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02030</span></span><br><span class="line">b=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>];</span><br><span class="line">a0=<span class="number">1</span>;</span><br><span class="line">a1=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-(<span class="number">0.8</span>)^<span class="number">8</span>];</span><br><span class="line">a2=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-(<span class="number">0.9</span>)^<span class="number">8</span>];</span><br><span class="line">a3=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-(<span class="number">0.98</span>)^<span class="number">8</span>];</span><br><span class="line">[H,w]=freqz(b,a0);</span><br><span class="line">[H1,w1]=freqz(b,a1);</span><br><span class="line">[H2,w2]=freqz(b,a2);</span><br><span class="line">[H3,w3]=freqz(b,a3);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot <span class="number">221</span>;zplane(b,a0);xlabel(<span class="string">&#x27;实部&#x27;</span>);ylabel(<span class="string">&#x27;虚部&#x27;</span>);title(<span class="string">&#x27;FIR梳状滤波器零点图&#x27;</span>)</span><br><span class="line">subplot <span class="number">222</span>;zplane(b,a1);xlabel(<span class="string">&#x27;实部&#x27;</span>);ylabel(<span class="string">&#x27;虚部&#x27;</span>);title(<span class="string">&#x27;IIR梳状滤波器零极点图a=0.8&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;zplane(b,a2);xlabel(<span class="string">&#x27;实部&#x27;</span>);ylabel(<span class="string">&#x27;虚部&#x27;</span>);title(<span class="string">&#x27;IIR梳状滤波器零极点图a=0.9&#x27;</span>)</span><br><span class="line">subplot <span class="number">224</span>;zplane(b,a3);xlabel(<span class="string">&#x27;实部&#x27;</span>);ylabel(<span class="string">&#x27;虚部&#x27;</span>);title(<span class="string">&#x27;IIR梳状滤波器零极点图a=0.98&#x27;</span>)</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">subplot <span class="number">221</span>;<span class="built_in">plot</span>(w/<span class="built_in">pi</span>,<span class="built_in">abs</span>(H));title(<span class="string">&#x27;FIR梳状滤波器幅频响应曲线&#x27;</span>)</span><br><span class="line">subplot <span class="number">222</span>;<span class="built_in">plot</span>(w1/<span class="built_in">pi</span>,<span class="built_in">abs</span>(H1));title(<span class="string">&#x27;IIR梳状滤波器幅频响应曲线a=0.8&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;<span class="built_in">plot</span>(w2/<span class="built_in">pi</span>,<span class="built_in">abs</span>(H2));title(<span class="string">&#x27;IIR梳状滤波器幅频响应曲线a=0.9&#x27;</span>)</span><br><span class="line">subplot <span class="number">224</span>;<span class="built_in">plot</span>(w3/<span class="built_in">pi</span>,<span class="built_in">abs</span>(H3));title(<span class="string">&#x27;IIR梳状滤波器幅频响应曲线a=0.98&#x27;</span>)</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)<span class="comment">%相频响应</span></span><br><span class="line">subplot <span class="number">221</span>;<span class="built_in">plot</span>(w/<span class="built_in">pi</span>,<span class="built_in">angle</span>(H));title(<span class="string">&#x27;FIR梳状滤波器相频响应曲线&#x27;</span>)<span class="comment">%取相位值对应相位角</span></span><br><span class="line">subplot <span class="number">222</span>;<span class="built_in">plot</span>(w1/<span class="built_in">pi</span>,<span class="built_in">angle</span>(H1));title(<span class="string">&#x27;IIR梳状滤波器相频响应曲线a=0.8&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;<span class="built_in">plot</span>(w2/<span class="built_in">pi</span>,<span class="built_in">angle</span>(H2));title(<span class="string">&#x27;IIR梳状滤波器相频响应曲线a=0.9&#x27;</span>)</span><br><span class="line">subplot <span class="number">224</span>;<span class="built_in">plot</span>(w3/<span class="built_in">pi</span>,<span class="built_in">angle</span>(H3));title(<span class="string">&#x27;IIR梳状滤波器相频响应曲线a=0.98&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>angle()函数：取相位值对应相位角，相当于相频响应</p><p>abs()函数：求复数的模值，幅频响应</p><p>real()函数：求复数实部</p><p>imag()函数：求复数的虚部</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201011114720.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201011114801.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201011114827.png" alt=""></p><p>exa02031:求解差分方程<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>−</mo><mn>0.4</mn><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>0.45</mn><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0.45</mn><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>0.4</mn><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(n)-0.4y(n-1)-0.45y(n-2)=0.45x(n)+0.4x(n-1)-x(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord">5</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord">5</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>，其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.</mn><msup><mn>8</mn><mi>n</mi></msup><mi>ϵ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x(n)=0.8^{n}\epsilon(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，初始状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">y(-1)=0,y(-2)=1,x(-1)=1,x(-2)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</p><p>求解：可得Z变换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>0.45</mn><mo>+</mo><mn>0.4</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><msup><mi>z</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><mn>0.</mn><msup><mn>4</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>0.45</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(z)=\frac{0.45+0.4z^{-1}-z^{-2}}{1-0.4^{-1}-0.45z^{-2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4212509999999998em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight"><span class="mord mtight">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">4</span><span class="mord mtight">5</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">4</span><span class="mord mtight">5</span><span class="mbin mtight">+</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">4</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><div class='tip'><p>B是分子上的系数，A是分母上的系数</p></div><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa02031</span></span><br><span class="line"><span class="comment">%求差分方程的解的实现程序</span></span><br><span class="line">num=[<span class="number">0.45</span>,<span class="number">0.4</span>,<span class="number">-1</span>];</span><br><span class="line">den=[<span class="number">1</span>,<span class="number">-0.4</span>,<span class="number">-0.45</span>];</span><br><span class="line">x0=[<span class="number">1</span>,<span class="number">2</span>];y0=[<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line">N=<span class="number">50</span>;</span><br><span class="line">n=[<span class="number">0</span>:N<span class="number">-1</span>]&#x27;;<span class="comment">%单引号是转置,成为列向量</span></span><br><span class="line">x=<span class="number">0.8</span>.^n;</span><br><span class="line">Zi=filtic(num,den,y0,x0);</span><br><span class="line">[y,Zf]=filter(num,den,x,Zi);</span><br><span class="line"><span class="built_in">plot</span>(n,x,<span class="string">&#x27;r--&#x27;</span>,n,y,<span class="string">&#x27;b--&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;响应&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);ylabel(<span class="string">&#x27;x(n)-y(n)&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;输入x&#x27;</span>,<span class="string">&#x27;输出y&#x27;</span>,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;NorthEast&#x27;</span>);<span class="comment">%相当于legend(&#x27;输入x&#x27;,&#x27;输出y&#x27;)</span></span><br><span class="line">grid;</span><br></pre></td></tr></table></figure><blockquote><p>legend()函数：注释视图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201011154036.png" alt=""></p><h3 id="利用MATLAB实现Z域的部分分式展开式"><a class="header-anchor" href="#利用MATLAB实现Z域的部分分式展开式">¶</a>利用MATLAB实现Z域的部分分式展开式</h3><p>MATLAB提供了一个对F(z)进行部分分式展开的函数residuez()，其调用格式为</p><p>[r,p,k]=residuez(num,den)</p><blockquote><p>式中，num和den分别为F(z)的分子多项式和分母多项式的系数向量，r为部分分式的系数向量，p为极点向量，k为多项式的系数向量。</p></blockquote><p>exa02032:利用MATLAB计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>18</mn><mrow><mn>18</mn><mo>+</mo><mn>3</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>4</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>−</mo><msup><mi>z</mi><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">F(z)=\frac{18}{18+3z^{-1}-4z^{-2}-z^{-3}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span><span class="mbin mtight">+</span><span class="mord mtight">3</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">4</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的部分分式展开式。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa02032</span></span><br><span class="line"><span class="comment">%部分分式展开式的实现程序</span></span><br><span class="line">num=[<span class="number">18</span>];den=[<span class="number">18</span> <span class="number">3</span> <span class="number">-4</span> <span class="number">-1</span>];</span><br><span class="line">[r,p,k]=residuez(num,den)</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; exa02032</span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.3600</span></span><br><span class="line">    <span class="number">0.2400</span></span><br><span class="line">    <span class="number">0.4000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.5000</span></span><br><span class="line">   <span class="number">-0.3333</span></span><br><span class="line">   <span class="number">-0.3333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">     []</span><br></pre></td></tr></table></figure><h3 id="利用MATLAB实现Z变换和Z反变换"><a class="header-anchor" href="#利用MATLAB实现Z变换和Z反变换">¶</a>利用MATLAB实现Z变换和Z反变换</h3><p>MATLAB的符号数学工具箱提供了计算Z变换的函数<code>ztrans()</code>和Z反变换的函数<code>iztrans()</code>，其调用格式为</p><p>F=ztrans(f)f=iztrans(F)</p><p>上边两式中，右端的f和F分别为时域表示式和Z域表示式的符号表示，可应用函数sym来实现，其调用格式为</p><p>S=sym(‘A’)</p><blockquote><p>式中，A为待分析的表示式的字符串，S为符号化的数字或变量</p></blockquote><p>exa02033:求(1)  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo><mi>u</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=cos(ak)u(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathdefault">u</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>的Z变换；</p><p>(2) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mi>z</mi></mrow><mrow><mo stretchy="false">(</mo><mi>z</mi><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">F(z)=\frac{az}{(z-a)^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.215392em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的Z反变换。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa02033</span></span><br><span class="line">f1=sym(<span class="string">&#x27;cos(a*k)&#x27;</span>);</span><br><span class="line">F1=ztrans(f1)</span><br><span class="line"></span><br><span class="line">F2=sym(<span class="string">&#x27;a*z/(z-a)^2&#x27;</span>);</span><br><span class="line">f2=iztrans(F2)</span><br></pre></td></tr></table></figure><p>exa02034:常用信号的Z变换。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa02034</span></span><br><span class="line"><span class="comment">% 指数序列的Z变换的程序实现</span></span><br><span class="line">f1=sym(<span class="string">&#x27;a^n&#x27;</span>);</span><br><span class="line">F1=ztrans(f1)</span><br><span class="line"><span class="comment">%阶跃序列的Z变换的程序实现</span></span><br><span class="line">f2=sym(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">F2=ztrans(f2)</span><br><span class="line"><span class="comment">%单位序列的Z变换的程序实现</span></span><br><span class="line">f3=sym(<span class="string">&#x27;charfcn[0](n)&#x27;</span>);</span><br><span class="line">F3=ztrans(f3)</span><br></pre></td></tr></table></figure><p>exa02035:计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mn>0.9</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.9</mn><msup><mi>z</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">X(z)=\frac{1}{(1-0.9z^{-1})^{2}(1+0.9z^{-1})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">9</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">9</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>z</mi><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>0.9</mn></mrow><annotation encoding="application/x-tex">|z|&gt;0.9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span></span></span></span>的Z反变换。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">b=<span class="number">1</span>;</span><br><span class="line">a=poly([<span class="number">0.9</span> <span class="number">0.9</span> <span class="number">-0.9</span>]);</span><br><span class="line">[r,p,k]=residuez(b,a)</span><br></pre></td></tr></table></figure><h2 id="第三章-v2"><a class="header-anchor" href="#第三章-v2">¶</a>第三章</h2><h3 id="MATLAB信号处理工具箱提供一些函数"><a class="header-anchor" href="#MATLAB信号处理工具箱提供一些函数">¶</a>MATLAB信号处理工具箱提供一些函数</h3><ol><li>fft和ifft：一维快速正傅里叶变换和逆傅里叶变换</li></ol><p>X=fft(x,N)</p><ol start="2"><li>fft2和ifft2：二维快速正傅里叶变换和逆傅里叶变换</li></ol><p>Y=fft2(x)</p><p>Y=fft2(x,m,n)</p><blockquote><p>指定对X截断或补零，使之成为<code>m*n</code>矩阵，然后再做二维FFT，因此其结果Y也为<code>m*n</code>。</p></blockquote><ol start="3"><li>czt：线性调频Z变换</li></ol><p>y=czt(x,m,w,s)</p><blockquote><p>此函数计算由<code>z=a*w.^(-(0:m-1))</code>定义的Z平面旋螺线上各点的Z变换，a规定起点，w规定相邻点的比例，m规定了变换的长度，后三个变量默认值为<code>a=1,w=exp(j*2*pi/m)</code>及<code>m=length(x)</code>，因此<code>y=czt(x)</code>就等于<code>y=fft(x)</code>。</p></blockquote><ol start="4"><li>dct和idct：离散余弦正变换和离散余弦逆变换</li></ol><p>y=dct(x,N)</p><blockquote><p>N的默认值为length(x)</p></blockquote><ol start="5"><li>fftshift</li></ol><p>Y=fftshift(X)</p><blockquote><p>用来重新排列X=fft(x)的输出，当X为向量时，把X的左右两边进行交换，从而将零频分量移至频谱的中心；如果X为二维傅里叶变换的结果，它同时将X的左右和上下部分进行交换。</p></blockquote><ol start="6"><li>fftfilt</li></ol><p>y=fftfilt(b,x)</p><blockquote><p>采用重合相加法FFT对信号向量x快速滤波，得到输出序列向量y，向量b为FIR滤波器的单位脉冲响应，<code>h(n)=b(n+1),n=0,1,···，length(b)-1</code>。</p></blockquote><p>y=fftfilt(b,x,N)</p><blockquote><p>自动选取FFT长度NF=2<sup>nextpow2(N),输入数据x分段长度M=NF-length(b)+1,其中nextpow2(N)函数求得一个整数，满足：2</sup>(nextpow2(N)-1)&lt;=N&lt;=2^nextpow(N)</p><p>N省略时，fftfilt自动选择合适的FFT长度NF和对x的分段长度M。</p></blockquote><h3 id="MTALB实现序列的移位和周期延拓运算"><a class="header-anchor" href="#MTALB实现序列的移位和周期延拓运算">¶</a>MTALB实现序列的移位和周期延拓运算</h3><p>exa03010:已知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.</mn><msup><mn>8</mn><mi>n</mi></msup><msub><mi>R</mi><mn>8</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x(n)=0.8^nR_8(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，利用MATLAB生成并图示x(n),x(n-m),<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><msub><mo stretchy="false">)</mo><mn>8</mn></msub><msub><mi>R</mi><mi>N</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x((n))_8R_N(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,其中N=24,0&lt;m&lt;N,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><msub><mo stretchy="false">)</mo><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">x((n))_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示x(n)以8为周期的延拓。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa03010</span></span><br><span class="line">N=<span class="number">24</span>;M=<span class="number">8</span>;m=<span class="number">3</span>;<span class="comment">%设位移值3</span></span><br><span class="line">n=<span class="number">0</span>:N<span class="number">-1</span>;</span><br><span class="line">x1=<span class="number">0.8</span>.^n;x2=[(n&gt;=<span class="number">0</span>)&amp;(n&lt;M)];</span><br><span class="line">xn=x1.*x2;<span class="comment">%产生x(n)</span></span><br><span class="line">[xm,nm]=sigshift(xn,n,m);<span class="comment">%产生x(n-m)</span></span><br><span class="line">xc=xn(<span class="built_in">mod</span>(n,<span class="number">8</span>)+<span class="number">1</span>);<span class="comment">%产生x(n)的周期延拓，求余后加1是因为MATLAB向量下标从1开始</span></span><br><span class="line">xcm=xn(<span class="built_in">mod</span>(n-m,<span class="number">8</span>)+<span class="number">1</span>);<span class="comment">%产生x(n)移位后的周期延拓</span></span><br><span class="line"><span class="comment">%mod函数是求余</span></span><br><span class="line">subplot <span class="number">221</span>;stem(n,xn,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="built_in">length</span>(n),<span class="number">0</span>,<span class="number">1</span>]);title(<span class="string">&#x27;x(n)&#x27;</span>)</span><br><span class="line">subplot <span class="number">222</span>;stem(nm,xm,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="built_in">length</span>(nm),<span class="number">0</span>,<span class="number">1</span>]);title(<span class="string">&#x27;x(n-m)&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;stem(n,xc,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="built_in">length</span>(n),<span class="number">0</span>,<span class="number">1</span>]);title(<span class="string">&#x27;x(n)的周期延拓&#x27;</span>)</span><br><span class="line">subplot <span class="number">224</span>;stem(n,xcm,<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="built_in">length</span>(n),<span class="number">0</span>,<span class="number">1</span>]);title(<span class="string">&#x27;x(n)的循环移位&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201103164050.png" alt=""></p><h3 id="MATLAB实现基本序列的离散傅里叶变换计算"><a class="header-anchor" href="#MATLAB实现基本序列的离散傅里叶变换计算">¶</a>MATLAB实现基本序列的离散傅里叶变换计算</h3><p>exa03011：已知复正弦序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>j</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Π</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mi>n</mi></mrow></msup><msub><mi>R</mi><mi>N</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_1(n)=e^{j(Π/2)n}R_N(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mopen mtight">(</span><span class="mord mtight">Π</span><span class="mord mtight">/</span><span class="mord mtight">2</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,余弦<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mfrac><mrow><mi>p</mi><mi>i</mi></mrow><mn>8</mn></mfrac><mi>n</mi><mo stretchy="false">)</mo><msub><mi>R</mi><mi>N</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_2(n)=cos(\frac{pi}{8}n)R_N(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.252772em;vertical-align:-0.345em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.907772em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,分别对序列对序列求当N=16和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">N_1=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>时的DFT，并绘出幅频特性曲线，并分析两种N值下DFT是否有差别，及产生原因。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa03011</span></span><br><span class="line">N=<span class="number">16</span>;N1=<span class="number">8</span>;</span><br><span class="line">n=<span class="number">0</span>:N<span class="number">-1</span>;k=<span class="number">0</span>:N1<span class="number">-1</span>;</span><br><span class="line">x1n=<span class="built_in">exp</span>(<span class="built_in">j</span>*<span class="built_in">pi</span>*n/<span class="number">8</span>);<span class="comment">%产生x1(n)</span></span><br><span class="line">X1k=fft(x1n,N);<span class="comment">%计算N点的DFT[x1(n)]</span></span><br><span class="line">X2k=fft(x1n,N1);<span class="comment">%计算N1点DFT[x1(n)]</span></span><br><span class="line">x2n=<span class="built_in">cos</span>(<span class="built_in">pi</span>*n/<span class="number">8</span>);<span class="comment">%产生x2(n)</span></span><br><span class="line">X3k=fft(x2n,N);<span class="comment">%计算N点DFT[x2(n)]</span></span><br><span class="line">X4k=fft(x2n,N1);<span class="comment">%计算N1点DFT[x2(n)]</span></span><br><span class="line"></span><br><span class="line">subplot <span class="number">221</span>;stem(n,<span class="built_in">abs</span>(X1k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">20</span>]);ylabel(<span class="string">&#x27;|X1(k)|&#x27;</span>);title(<span class="string">&#x27;16点的DFT[x1(n)]&#x27;</span>)</span><br><span class="line">subplot <span class="number">222</span>;stem(n,<span class="built_in">abs</span>(X3k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">20</span>]);ylabel(<span class="string">&#x27;|X2(k)|&#x27;</span>);title(<span class="string">&#x27;16点DFT[x2(n)]&#x27;</span>)</span><br><span class="line">subplot <span class="number">223</span>;stem(k,<span class="built_in">abs</span>(X2k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">20</span>]);ylabel(<span class="string">&#x27;|X1(k)|&#x27;</span>);title(<span class="string">&#x27;8点DFT[x1(n)]&#x27;</span>)</span><br><span class="line">subplot <span class="number">224</span>;stem(k,<span class="built_in">abs</span>(X4k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">20</span>]);ylabel(<span class="string">&#x27;|X2(k)|&#x27;</span>);title(<span class="string">&#x27;8点DFT[x2(n)]&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201103210358.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201103210727.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201103210740.png" alt=""></p><h3 id="MATLAB验证N点DFT的物理意义"><a class="header-anchor" href="#MATLAB验证N点DFT的物理意义">¶</a>MATLAB验证N点DFT的物理意义</h3><p>exa03012：已知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x(n)=R_1(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo stretchy="false">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>w</mi></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mi>T</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mn>4</mn><mi>w</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>w</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">X(e^{jw})=FT[x(n)]=\frac{1-e^{-j4w}}{1-e^{-jw}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.428791em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.02546em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857144em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857144em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">4</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，绘制相应的幅频和相频曲线，并计算图示N=8和N=16时的DFT。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%exa03012</span></span><br><span class="line">N1=<span class="number">8</span>;N2=<span class="number">16</span>;</span><br><span class="line">n=<span class="number">0</span>:N1<span class="number">-1</span>;k1=<span class="number">0</span>:N1<span class="number">-1</span>;k2=<span class="number">0</span>:N2<span class="number">-1</span>;</span><br><span class="line">w=<span class="number">2</span>*<span class="built_in">pi</span>*(<span class="number">0</span>:<span class="number">2047</span>)/<span class="number">2048</span>;</span><br><span class="line">Xw=(<span class="number">1</span>-<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">4</span>*w))./(<span class="number">1</span>-<span class="built_in">exp</span>(-<span class="built_in">j</span>*w));</span><br><span class="line"><span class="comment">%对x(n)的频谱函数采样2048个点可以近似地看做成连续的频谱</span></span><br><span class="line">xn=[(n&gt;=<span class="number">0</span>)&amp;(n&lt;<span class="number">4</span>)];</span><br><span class="line">X1k=fft(xn,N1);</span><br><span class="line">X2k=fft(xn,N2);</span><br><span class="line">subplot <span class="number">321</span>;<span class="built_in">plot</span>(w/<span class="built_in">pi</span>,<span class="built_in">abs</span>(Xw));xlabel(<span class="string">&#x27;w/\pi&#x27;</span>);title(<span class="string">&#x27;x(n)的幅频曲线&#x27;</span>)</span><br><span class="line">subplot <span class="number">322</span>;<span class="built_in">plot</span>(w/<span class="built_in">pi</span>,<span class="built_in">angle</span>(Xw));axis([<span class="number">0</span>,<span class="number">2</span>,-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);line([<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">0</span>]);xlabel(<span class="string">&#x27;w/\pi&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;x(n)的相频曲线&#x27;</span>)</span><br><span class="line">subplot <span class="number">323</span>;stem(k1,<span class="built_in">abs</span>(X1k),<span class="string">&#x27;.&#x27;</span>);xlabel(<span class="string">&#x27;k(w=2\pik/N1)&#x27;</span>);ylabel(<span class="string">&#x27;|X1(k)|&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(N1/<span class="number">2</span>*w/<span class="built_in">pi</span>,<span class="built_in">abs</span>(Xw));title(<span class="string">&#x27;N_1点的DFT[x(n)]=X_1(k)&#x27;</span>)<span class="comment">%图形上叠加连续频谱的幅度曲线</span></span><br><span class="line">subplot <span class="number">324</span>;stem(k1,<span class="built_in">angle</span>(X1k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N1,-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);line([<span class="number">0</span>,N1],[<span class="number">0</span>,<span class="number">0</span>]);xlabel(<span class="string">&#x27;k(w=2\pik/N1)&#x27;</span>);ylabel(<span class="string">&#x27;Arg[X1(k)]&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(N1/<span class="number">2</span>*w/<span class="built_in">pi</span>,<span class="built_in">angle</span>(Xw));title(<span class="string">&#x27;X_1(k)的相位&#x27;</span>)<span class="comment">%图像上叠加连续幅频的相位曲线</span></span><br><span class="line">subplot <span class="number">325</span>;stem(k2,<span class="built_in">abs</span>(X2k),<span class="string">&#x27;.&#x27;</span>);xlabel(<span class="string">&#x27;k(w=2\pik/N2)&#x27;</span>);ylabel(<span class="string">&#x27;|X2(k)|&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(N2/<span class="number">2</span>*w/<span class="built_in">pi</span>,<span class="built_in">abs</span>(Xw));title(<span class="string">&#x27;N_2点的DFT[x(n)]=X_2(k)&#x27;</span>)</span><br><span class="line">subplot <span class="number">326</span>;stem(k2,<span class="built_in">angle</span>(X2k),<span class="string">&#x27;.&#x27;</span>);axis([<span class="number">0</span>,N2,-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);line([<span class="number">0</span>,N2],[<span class="number">0</span>,<span class="number">0</span>]);xlabel(<span class="string">&#x27;k(w=2\pik/N2)&#x27;</span>);ylabel(<span class="string">&#x27;Arg[X2(k)]&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(N2/<span class="number">2</span>*w/<span class="built_in">pi</span>,<span class="built_in">angle</span>(Xw));title(<span class="string">&#x27;X_2(k)的相位&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201104114526.png" alt=""></p><p>MATLAB验证频域采样和时域采样的对偶性</p><p>exa03013:(1)产生一个三角波序列x(n),长度为M=40；</p><p>(2)计算N=64时的X(k)=DFT[x(n)],并图示x(n)和X(k);</p><p>(3)对X(k)在[0,2pi]上进行32点抽样，得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi><mo stretchy="false">(</mo><mn>2</mn><mi>k</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">X_1(k)=X(2k),k=0,1,···,3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span></span></span></span>；</p><p>(4)求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X_1(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>的32点IDFT，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mi>D</mi><mi>F</mi><mi>T</mi><mo stretchy="false">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x_1(n)=IDFT[X_1(k)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span>;</p><p>(5)绘制<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><msub><mo stretchy="false">)</mo><mn>32</mn></msub></mrow><annotation encoding="application/x-tex">x_1((n))_{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的波形图，观察<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><msub><mo stretchy="false">)</mo><mn>32</mn></msub></mrow><annotation encoding="application/x-tex">x_1((n))_{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和x(n)的关系，并加以说明。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% exa03013</span></span><br><span class="line">clc;clear;</span><br><span class="line">M=<span class="number">40</span>;N=<span class="number">64</span>;k=<span class="number">32</span>;n=<span class="number">0</span>:M;</span><br><span class="line">xa=[<span class="number">0</span>:<span class="built_in">floor</span>(M/<span class="number">2</span>)];<span class="comment">%向下取整</span></span><br><span class="line">xb=<span class="built_in">ceil</span>(M/<span class="number">2</span>)<span class="number">-1</span>:<span class="number">-1</span>:<span class="number">0</span>;<span class="comment">%向上取整</span></span><br><span class="line">xn=[xa,xb];</span><br><span class="line">Xk=fft(xn,<span class="number">64</span>);<span class="comment">%计算X(k)=DFT[x(n)]</span></span><br><span class="line">X1k=Xk(<span class="number">1</span>:<span class="number">2</span>:N);<span class="comment">%隔点取样得到X1k</span></span><br><span class="line">x1n=ifft(X1k,<span class="number">32</span>);<span class="comment">%计算x1(n)=IDFT[X1(k)]</span></span><br><span class="line"><span class="comment">%周期延拓</span></span><br><span class="line">nc=<span class="number">0</span>:<span class="number">4</span>*N/<span class="number">2</span>;</span><br><span class="line">xc=x1n(<span class="built_in">mod</span>(nc,N/<span class="number">2</span>)+<span class="number">1</span>);<span class="comment">%将x1(n)以N/2为周期进行延拓，mod求余函数</span></span><br><span class="line">subplot <span class="number">321</span>;stem(n,xn,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;x(n)&#x27;</span>);title(<span class="string">&#x27;40点的三角波序列[x(n)]&#x27;</span>);</span><br><span class="line">subplot <span class="number">322</span>;k1=<span class="number">0</span>:N<span class="number">-1</span>;stem(k1,<span class="built_in">abs</span>(Xk),<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;|X(k)|&#x27;</span>);title(<span class="string">&#x27;64点的DFT[X(k)]&#x27;</span>);</span><br><span class="line">subplot <span class="number">323</span>;k2=<span class="number">0</span>:N/<span class="number">2</span><span class="number">-1</span>;stem(k2,<span class="built_in">abs</span>(X1k),<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;|X1(k)|&#x27;</span>);title(<span class="string">&#x27;隔点抽样X(k)得到X1(k)&#x27;</span>);</span><br><span class="line">subplot <span class="number">324</span>;stem(k2,x1n,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;x_1(n)&#x27;</span>);title(<span class="string">&#x27;X_1(k)的IDFT[X1(k)]=x1(n)&#x27;</span>)</span><br><span class="line">subplot <span class="number">325</span>;stem(nc,xc,<span class="string">&#x27;.&#x27;</span>);ylabel(<span class="string">&#x27;x_1((n))_&#123;32&#125;&#x27;</span>);title(<span class="string">&#x27;x_1(n)的周期延拓序列&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20201112202242.png" alt="image-20201112202202957"></p><p>==135page==</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;参考胡广书老师所著的《数字信号处理-理论算法与实现》&lt;/p&gt;
&lt;p&gt;下面给出Matlab中下标及希腊字母的使用方法，还有更多的使用方法可以参考matlab帮助 文档中的Text Properties: 下标用 _(下划线) 上标用^ （尖号） 希腊字母等特殊字符用 \加拼音如α \alphaβ \betaγ \gammaθ \thetaΘ \ThetaГ \Gammaδ \deltaΔ \Deltaξ \xiΞ \Xiη \eltaε \epsilongζ \zetaμ \miuυ \nuτ \tauλ \lamdaΛ \Lamdaπ \piΠ \Piσ \sigmaΣ \Sigmaφ \phiΦ \Phiψ \psiΨ \Psiχ \chiω \ommigaΩ \Ommiga&amp;lt; \leq&amp;gt; \geq不等于 \neq&amp;gt; \gg正负\pm左箭头 \leftarrow 右箭头 \rightarrow 上箭头 \uparrow 上圆圈（度数） \circ 例text(2,3,’\alpha_2^\beta’) 很多时候都要在matlab画图的时候添加一些公式符号之类的，有一些特殊的字符并不能直接从键盘上输入，比如希腊字母等等。&lt;/p&gt;
&lt;h1&gt;胡广书老师课本例题&lt;/h1&gt;
&lt;h2 id=&quot;第一章&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第一章&quot;&gt;¶&lt;/a&gt;第一章&lt;/h2&gt;
&lt;p&gt;待续。。。&lt;/p&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第二章&quot;&gt;¶&lt;/a&gt;第二章&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200922212358.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;ex0201:求该系统函数的阶跃响应（所谓阶跃响应是系统输入的输出）。实现该任务的程序如下：&lt;/p&gt;</summary>
    
    
    
    <category term="matlab" scheme="http://stardust14.com/categories/matlab/"/>
    
    
    <category term="matlab" scheme="http://stardust14.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础</title>
    <link href="http://stardust14.com/2020/09/08/C%E8%AF%AD%E8%A8%80/"/>
    <id>http://stardust14.com/2020/09/08/C%E8%AF%AD%E8%A8%80/</id>
    <published>2020-09-08T11:58:34.000Z</published>
    <updated>2020-10-27T09:06:55.968Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>引言</h1><p>基于VS2019版，编写练习代码，基础中的基础。通过菜鸟教程上的知识学习。</p><h1>C语言基本</h1><h2 id="基本语法"><a class="header-anchor" href="#基本语法">¶</a>基本语法</h2><h3 id="标识符"><a class="header-anchor" href="#标识符">¶</a>标识符</h3><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。因此，在 C 中，<em>Manpower</em> 和 <em>manpower</em> 是两个不同的标识符。下面列出几个有效的标识符：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mohd       zara    abc   move<span class="emphasis">_name  a_</span>123</span><br><span class="line">myname50   <span class="emphasis">_temp   j     a23b9      retVal</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a class="header-anchor" href="#关键字">¶</a>关键字</h3><p>下表列出了 C 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">auto</td><td style="text-align:left">声明自动变量</td></tr><tr><td style="text-align:left">break</td><td style="text-align:left">跳出当前循环</td></tr><tr><td style="text-align:left">case</td><td style="text-align:left">开关语句分支</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">声明字符型变量或函数返回值类型</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td style="text-align:left">continue</td><td style="text-align:left">结束当前循环，开始下一轮循环</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">开关语句中的&quot;其它&quot;分支</td></tr><tr><td style="text-align:left">do</td><td style="text-align:left">循环语句的循环体</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">声明双精度浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left">else</td><td style="text-align:left">条件语句否定分支（与 if 连用）</td></tr><tr><td style="text-align:left">enum</td><td style="text-align:left">声明枚举类型</td></tr><tr><td style="text-align:left">extern</td><td style="text-align:left">声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">声明浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left">for</td><td style="text-align:left">一种循环语句</td></tr><tr><td style="text-align:left">goto</td><td style="text-align:left">无条件跳转语句</td></tr><tr><td style="text-align:left">if</td><td style="text-align:left">条件语句</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">声明整型变量或函数</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">声明长整型变量或函数返回值类型</td></tr><tr><td style="text-align:left">register</td><td style="text-align:left">声明寄存器变量</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">声明短整型变量或函数</td></tr><tr><td style="text-align:left">signed</td><td style="text-align:left">声明有符号类型变量或函数</td></tr><tr><td style="text-align:left">sizeof</td><td style="text-align:left">计算数据类型或变量长度（即所占字节数）</td></tr><tr><td style="text-align:left">static</td><td style="text-align:left">声明静态变量</td></tr><tr><td style="text-align:left">struct</td><td style="text-align:left">声明结构体类型</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">用于开关语句</td></tr><tr><td style="text-align:left">typedef</td><td style="text-align:left">用以给数据类型取别名</td></tr><tr><td style="text-align:left">unsigned</td><td style="text-align:left">声明无符号类型变量或函数</td></tr><tr><td style="text-align:left">union</td><td style="text-align:left">声明共用体类型</td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td style="text-align:left">volatile</td><td style="text-align:left">说明变量在程序执行中可被隐含地改变</td></tr><tr><td style="text-align:left">while</td><td style="text-align:left">循环语句的循环条件</td></tr></tbody></table><h3 id="C-中的空格"><a class="header-anchor" href="#C-中的空格">¶</a>C 中的空格</h3><p>只包含空格的行，被称为空白行，可能带有注释，C 编译器会完全忽略它。</p><p>在 C 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fruit = apples + oranges;   <span class="comment">// 获取水果的总数</span></span><br></pre></td></tr></table></figure><blockquote><p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强<strong>可读性</strong>，您可以根据需要适当增加一些空格。</p></blockquote><h3 id="C-数据类型"><a class="header-anchor" href="#C-数据类型">¶</a>C 数据类型</h3><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><p>C 中的类型可分为以下几种：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">类型与描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。</p><h4 id="整数类型"><a class="header-anchor" href="#整数类型">¶</a>整数类型</h4><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left">unsigned char</td><td style="text-align:left">1 字节</td><td style="text-align:left">0 到 255</td></tr><tr><td style="text-align:left">signed char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">2 字节</td><td style="text-align:left">-32,768 到 32,767</td></tr><tr><td style="text-align:left">unsigned short</td><td style="text-align:left">2 字节</td><td style="text-align:left">0 到 65,535</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">4 字节</td><td style="text-align:left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned long</td><td style="text-align:left">4 字节</td><td style="text-align:left">0 到 4,294,967,295</td></tr></tbody></table><p>为了得到某个类型或某个变量在特定平台上的准确大小，可以使用 <strong>sizeof</strong> 运算符。表达式 <em>sizeof(type)</em> 得到对象或类型的存储字节大小。</p><h4 id="浮点类型"><a class="header-anchor" href="#浮点类型">¶</a>浮点类型</h4><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th><th style="text-align:left">精度</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:left">4 字节</td><td style="text-align:left">1.2E-38 到 3.4E+38</td><td style="text-align:left">6 位小数</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">8 字节</td><td style="text-align:left">2.3E-308 到 1.7E+308</td><td style="text-align:left">15 位小数</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">16 字节</td><td style="text-align:left">3.4E-4932 到 1.1E+4932</td><td style="text-align:left">19 位小数</td></tr></tbody></table><p>头文件 float.h 定义了宏，在程序中可以使用这些值和其他有关实数二进制表示的细节。</p><h4 id="void-类型"><a class="header-anchor" href="#void-类型">¶</a>void 类型</h4><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">类型与描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><h1>C 变量</h1><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写<font color='red'><strong>敏感</strong></font>的。</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">通常是一个字节（八位）。这是一个整数类型。</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">对机器而言，整数的最自然的大小。</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200909111147.png" alt="img"></td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">双精度浮点值。双精度是1位符号，11位指数，52位小数。<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200909111135.png" alt="img"></td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">表示类型的缺失。</td></tr></tbody></table><p>C 语言也允许定义各种其他类型的变量，比如枚举、指针、数组、结构、共用体等等.</p><h2 id="C-中的变量定义"><a class="header-anchor" href="#C-中的变量定义">¶</a>C 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type variable_list;</span><br></pre></td></tr></table></figure><p>在这里，<strong>type</strong> 必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。</p><p>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成。</p><p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 <strong>NULL</strong>（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p><h2 id="C-中的变量声明"><a class="header-anchor" href="#C-中的变量声明">¶</a>C 中的变量声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p><p>变量的声明有两种情况：</p><ul><li>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</li><li>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</li><li>除非有extern关键字，否则都是变量的定义。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量在头部就已经被声明，但是定义与初始化在主函数内</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 函数外定义变量 x 和 y</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addtwonum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 函数内声明变量 x 和 y 为外部变量</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="comment">// 给外部变量（全局变量）x 和 y 赋值</span></span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="comment">// 调用函数 addtwonum</span></span><br><span class="line">    result = addtwonum();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result 为: %d&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">result 为: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*外部变量声明*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x ;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> y ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addtwonum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/*定义两个全局变量*/</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addtwonum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    result = addtwonum();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result 为: %d\n&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a class="header-anchor" href="#C-中的左值（Lvalues）和右值（Rvalues）">¶</a>C 中的左值（Lvalues）和右值（Rvalues）</h2><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：<strong>指向</strong>内存位置</strong>的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：<strong>术语右值（rvalue）指的是存储在内存中某些地址的</strong>数值</strong>。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。</p><h1>C 常量</h1><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p><p>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。</p><p><strong>常量</strong>就像是常规的变量，只不过常量的值在定义后不能进行修改。</p><h2 id="整数常量"><a class="header-anchor" href="#整数常量">¶</a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p><p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p><h2 id="浮点常量"><a class="header-anchor" href="#浮点常量">¶</a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。</p><p>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p><h2 id="字符常量"><a class="header-anchor" href="#字符常量">¶</a>字符常量</h2><p>字符常量是括在单引号中，例如，‘x’ 可以存储在 <strong>char</strong> 类型的简单变量中。</p><p>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\t’），或一个通用的字符（例如 ‘\u02C0’）。</p><p>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。</p><p>下表列出了一些这样的转义序列码：</p><table><thead><tr><th style="text-align:left">转义序列</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">\</td><td style="text-align:left">\ 字符</td></tr><tr><td style="text-align:left">’</td><td style="text-align:left">’ 字符</td></tr><tr><td style="text-align:left">&quot;</td><td style="text-align:left">&quot; 字符</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">? 字符</td></tr><tr><td style="text-align:left">\a</td><td style="text-align:left">警报铃声</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格键</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页符</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行符</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">水平制表符</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">垂直制表符</td></tr><tr><td style="text-align:left">\ooo</td><td style="text-align:left">一到三位的八进制数</td></tr><tr><td style="text-align:left">\xhh . . .</td><td style="text-align:left">一个或多个数字的十六进制数</td></tr></tbody></table><h2 id="字符串常量"><a class="header-anchor" href="#字符串常量">¶</a>字符串常量</h2><p>字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p><p>可以使用空格做分隔符，把一个很长的字符串常量进行分行。</p><h2 id="定义常量"><a class="header-anchor" href="#定义常量">¶</a>定义常量</h2><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用 <strong>#define</strong> 预处理器。</li><li>使用 <strong>const</strong> 关键字。</li></ol><h3 id="define-预处理器"><a class="header-anchor" href="#define-预处理器">¶</a>#define 预处理器</h3><p>下面是使用 #define 预处理器定义常量的形式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> identifier value</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 10   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH  5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NEWLINE <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> area;  </span><br><span class="line">  </span><br><span class="line">   area = LENGTH * WIDTH;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;value of area : %d&quot;</span>, area);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, NEWLINE);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>%c是char类型，输出单个字符</p></blockquote><h3 id="const-关键字"><a class="header-anchor" href="#const-关键字">¶</a>const 关键字</h3><p>可以使用 <strong>const</strong> 前缀声明指定类型的常量，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> type variable = value;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">int</span>  LENGTH = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">int</span>  WIDTH  = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> NEWLINE = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   <span class="keyword">int</span> area;  </span><br><span class="line">   </span><br><span class="line">   area = LENGTH * WIDTH;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;value of area : %d&quot;</span>, area);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, NEWLINE);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C 存储类</h1><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p><ul><li>auto</li><li>register</li><li>static</li><li>extern</li></ul><h2 id="auto-存储类"><a class="header-anchor" href="#auto-存储类">¶</a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有局部变量<strong>默认</strong>的存储类。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> mount;</span><br><span class="line">   <span class="keyword">auto</span> <span class="keyword">int</span> month;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例定义了两个带有<strong>相同</strong>存储类的变量，auto <strong>只能</strong>用在<font color='red'><strong>函数内</strong></font>，即 auto 只能<strong>修饰</strong><font color='red'>局部变量</font>。</p><h2 id="register-存储类"><a class="header-anchor" href="#register-存储类">¶</a>register 存储类</h2><p><strong>register</strong> 存储类用于定义存储在<strong>寄存器</strong>中而<strong>不是 RAM</strong> 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">register</span> <span class="keyword">int</span>  miles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p><h2 id="static-存储类"><a class="header-anchor" href="#static-存储类">¶</a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰<strong>局部变量</strong>可以在函数调用之间保持局部变量的值。<br>static 修饰符也可以应用于<strong>全局变量</strong>。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。<br>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p><p>以下实例演示了 static 修饰全局变量和局部变量的应用：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">10</span>;        <span class="comment">/* 全局变量 - static 是默认的 */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">      func1();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* &#x27;thingy&#x27; 是 &#x27;func1&#x27; 的局部变量 - 只初始化一次</span></span><br><span class="line"><span class="comment"> * 每次调用函数 &#x27;func1&#x27; &#x27;thingy&#x27; 值不会被重置。</span></span><br><span class="line"><span class="comment"> */</span>                </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> thingy=<span class="number">5</span>;</span><br><span class="line">  thingy++;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot; thingy 为 %d ， count 为 %d\n&quot;</span>, thingy, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例中 count 作为全局变量可以在函数内使用，thingy 使用 static 修饰后，不会在每次调用时重置。</p><h2 id="extern-存储类"><a class="header-anchor" href="#extern-存储类">¶</a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p><p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p><p><strong>第一个文件：main.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> count ;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">write_extern</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   count = <span class="number">5</span>;</span><br><span class="line">   write_extern();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二个文件：support.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> count;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_extern</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;count is %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.c 中定义的 <em>count</em>。</p><p>执行结果</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">count is <span class="number">5</span></span><br></pre></td></tr></table></figure><h1>C 运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul><h2 id="算术运算符"><a class="header-anchor" href="#算术运算符">¶</a>算术运算符</h2><p>下表显示了 C 语言支持的所有算术运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">把两个操作数相加</td><td style="text-align:left">A + B 将得到 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">从第一个操作数中减去第二个操作数</td><td style="text-align:left">A - B 将得到 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">把两个操作数相乘</td><td style="text-align:left">A * B 将得到 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">分子除以分母</td><td style="text-align:left">B / A 将得到 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模运算符，整除后的余数</td><td style="text-align:left">B % A 将得到 0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增运算符，整数值增加 1</td><td style="text-align:left">A++ 将得到 11</td></tr><tr><td style="text-align:left">–</td><td style="text-align:left">自减运算符，整数值减少 1</td><td style="text-align:left">A-- 将得到 9</td></tr></tbody></table><h3 id="实例"><a class="header-anchor" href="#实例">¶</a>实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">21</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">int</span> c ;</span><br><span class="line"> </span><br><span class="line">   c = a + b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a - b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a * b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a / b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a % b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a++;  <span class="comment">// 赋值后再加 1 ，c 为 21，a 为 22</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   c = a--;  <span class="comment">// 赋值后再减 1 ，c 为 22 ，a 为 21</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - c 的值是 31</span><br><span class="line">Line 2 - c 的值是 11</span><br><span class="line">Line 3 - c 的值是 210</span><br><span class="line">Line 4 - c 的值是 2</span><br><span class="line">Line 5 - c 的值是 1</span><br><span class="line">Line 6 - c 的值是 21</span><br><span class="line">Line 7 - c 的值是 22</span><br></pre></td></tr></table></figure><p>以下实例演示了 a++ 与 ++a 的区别：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> c;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">   c = a++; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;先赋值后运算：\n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - a 的值是 %d\n&quot;</span>, a );</span><br><span class="line">   a = <span class="number">10</span>;</span><br><span class="line">   c = a--; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - a 的值是 %d\n&quot;</span>, a );</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;先运算后赋值：\n&quot;</span>);</span><br><span class="line">   a = <span class="number">10</span>;</span><br><span class="line">   c = ++a; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 6 - a 的值是 %d\n&quot;</span>, a );</span><br><span class="line">   a = <span class="number">10</span>;</span><br><span class="line">   c = --a; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 8 - a 的值是 %d\n&quot;</span>, a );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序执行输出结果为：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">先赋值后运算：</span><br><span class="line">Line 1 - c 的值是 10</span><br><span class="line">Line 2 - a 的值是 11</span><br><span class="line">Line 3 - c 的值是 10</span><br><span class="line">Line 4 - a 的值是 9</span><br><span class="line">先运算后赋值：</span><br><span class="line">Line 5 - c 的值是 11</span><br><span class="line">Line 6 - a 的值是 11</span><br><span class="line">Line 7 - c 的值是 9</span><br><span class="line">Line 8 - a 的值是 9</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a class="header-anchor" href="#关系运算符">¶</a>关系运算符</h2><p>下表显示了 C 语言支持的所有关系运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">(A == B) 为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt; B) 为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt; B) 为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt;= B) 为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt;= B) 为真。</td></tr></tbody></table><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2">¶</a>实例</h3><p>看下面的实例，了解 C 语言中所有可用的关系运算符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">21</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">int</span> c ;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>( a == b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - a 等于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - a 不等于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a &lt; b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - a 小于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - a 不小于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a &gt; b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - a 大于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - a 不大于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 改变 a 和 b 的值 */</span></span><br><span class="line">   a = <span class="number">5</span>;</span><br><span class="line">   b = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">if</span> ( a &lt;= b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - a 小于或等于 b\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( b &gt;= a )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - b 大于或等于 a\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - a 不等于 b</span><br><span class="line">Line 2 - a 不小于 b</span><br><span class="line">Line 3 - a 大于 b</span><br><span class="line">Line 4 - a 小于或等于 b</span><br><span class="line">Line 5 - b 大于或等于 a</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符">¶</a>逻辑运算符</h2><p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量 <strong>A</strong> 的值为 1，变量 <strong>B</strong> 的值为 0，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:left">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:left">||</td><td style="text-align:left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td style="text-align:left">(A || B) 为真。</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3">¶</a>实例</h3><p>看下面的实例，了解 C 语言中所有可用的关系运算符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> c ;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> ( a &amp;&amp; b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - 条件为真\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a || b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - 条件为真\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 改变 a 和 b 的值 */</span></span><br><span class="line">   a = <span class="number">0</span>;</span><br><span class="line">   b = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">if</span> ( a &amp;&amp; b )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - 条件为真\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - 条件为假\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( !(a &amp;&amp; b) )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - 条件为真\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - 条件为真</span><br><span class="line">Line 2 - 条件为真</span><br><span class="line">Line 3 - 条件为假</span><br><span class="line">Line 4 - 条件为真</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a class="header-anchor" href="#位运算符">¶</a>位运算符</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th style="text-align:left">p</th><th style="text-align:left">q</th><th style="text-align:left">p &amp; q</th><th style="text-align:left">p | q</th><th style="text-align:left">p ^ q</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr></tbody></table><blockquote><p>“^”:<strong>按位异或</strong></p></blockquote><p>下表显示了 C 语言支持的位运算符。假设变量 <strong>A</strong> 的值为 60，变量 <strong>B</strong> 的值为 13，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与操作，按二进制位进行&quot;与&quot;运算。运算规则：<code>0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</code></td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或运算符，按二进制位进行&quot;或&quot;运算。运算规则：<code>0|0=0;    0|1=1;    1|0=1;     1|1=1;</code></td><td style="text-align:left">(A | B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">异或运算符，按二进制位进行&quot;异或&quot;运算。运算规则：<code>0^0=0;    0^1=1;    1^0=1;   1^1=0;</code></td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">取反运算符，按二进制位进行&quot;取反&quot;运算。运算规则：<code>~1=0;    ~0=1;</code></td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><h3 id="实例-v4"><a class="header-anchor" href="#实例-v4">¶</a>实例</h3><p>看下面的实例，了解 C 语言中所有可用的位运算符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">60</span>;    <span class="comment">/* 60 = 0011 1100 */</span>  </span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> b = <span class="number">13</span>;    <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">   <span class="keyword">int</span> c = <span class="number">0</span>;           </span><br><span class="line"> </span><br><span class="line">   c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c );</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - c 的值是 12</span><br><span class="line">Line 2 - c 的值是 61</span><br><span class="line">Line 3 - c 的值是 49</span><br><span class="line">Line 4 - c 的值是 -61</span><br><span class="line">Line 5 - c 的值是 240</span><br><span class="line">Line 6 - c 的值是 15</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a class="header-anchor" href="#赋值运算符">¶</a>赋值运算符</h2><p>下表列出了 C 语言支持的赋值运算符：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C *= A 相当于 C = C * A</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:left">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:left">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:left">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:left">|=</td><td style="text-align:left">按位或且赋值运算符</td><td style="text-align:left">C |= 2 等同于 C = C | 2</td></tr></tbody></table><blockquote><p>&quot;&gt;&gt;(右移)&quot;按二进制形式把所有的数字向右移动对应位移位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。</p></blockquote><h3 id="实例-v5"><a class="header-anchor" href="#实例-v5">¶</a>实例</h3><p>请看下面的实例，了解 C 语言中所有可用的赋值运算符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">21</span>;</span><br><span class="line">   <span class="keyword">int</span> c ;</span><br><span class="line"> </span><br><span class="line">   c =  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - =  运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c +=  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - += 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c -=  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - -= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c *=  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - *= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c /=  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - /= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c  = <span class="number">200</span>;</span><br><span class="line">   c %=  a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 6 - %%= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c &lt;&lt;=  <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 7 - &lt;&lt;= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c &gt;&gt;=  <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 8 - &gt;&gt;= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c &amp;=  <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 9 - &amp;= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c ^=  <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 10 - ^= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">   c |=  <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 11 - |= 运算符实例，c 的值 = %d\n&quot;</span>, c );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - =  运算符实例，c 的值 = 21</span><br><span class="line">Line 2 - += 运算符实例，c 的值 = 42</span><br><span class="line">Line 3 - -= 运算符实例，c 的值 = 21</span><br><span class="line">Line 4 - <span class="emphasis">*= 运算符实例，c 的值 = 441</span></span><br><span class="line"><span class="emphasis">Line 5 - /= 运算符实例，c 的值 = 21</span></span><br><span class="line"><span class="emphasis">Line 6 - %= 运算符实例，c 的值 = 11</span></span><br><span class="line"><span class="emphasis">Line 7 - <span class="xml"><span class="tag">&lt;&lt;= <span class="string">运算符实例，c</span> 的值 = <span class="string">44</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="xml">Line 8 - &gt;</span>&gt;= 运算符实例，c 的值 = 11</span></span><br><span class="line"><span class="emphasis">Line 9 - &amp;= 运算符实例，c 的值 = 2</span></span><br><span class="line"><span class="emphasis">Line 10 - ^= 运算符实例，c 的值 = 0</span></span><br><span class="line"><span class="emphasis">Line 11 - |= 运算符实例，c 的值 = 2</span></span><br></pre></td></tr></table></figure><h2 id="杂项运算符-↦-sizeof-三元"><a class="header-anchor" href="#杂项运算符-↦-sizeof-三元">¶</a>杂项运算符 ↦ sizeof &amp; 三元</h2><p>下表列出了 C 语言支持的其他一些重要的运算符，包括 <strong>sizeof</strong> 和 <strong>? :</strong></p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">sizeof()</td><td style="text-align:left">返回变量的大小。</td><td style="text-align:left">sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&amp;a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">指向一个变量。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:left">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table><h3 id="实例-v6"><a class="header-anchor" href="#实例-v6">¶</a>实例</h3><p>请看下面的实例，了解 C 语言中所有可用的杂项运算符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">short</span> b;</span><br><span class="line">   <span class="keyword">double</span> c;</span><br><span class="line">   <span class="keyword">int</span>* ptr;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* sizeof 运算符实例 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - 变量 a 的大小 = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(a) );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - 变量 b 的大小 = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(b) );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - 变量 c 的大小 = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(c) );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* &amp; 和 * 运算符实例 */</span></span><br><span class="line">   ptr = &amp;a;    <span class="comment">/* &#x27;ptr&#x27; 现在包含 &#x27;a&#x27; 的地址 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;a 的值是 %d\n&quot;</span>, a);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;*ptr 是 %d\n&quot;</span>, *ptr);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 三元运算符实例 */</span></span><br><span class="line">   a = <span class="number">10</span>;</span><br><span class="line">   b = (a == <span class="number">1</span>) ? <span class="number">20</span>: <span class="number">30</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;b 的值是 %d\n&quot;</span>, b );</span><br><span class="line"> </span><br><span class="line">   b = (a == <span class="number">10</span>) ? <span class="number">20</span>: <span class="number">30</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;b 的值是 %d\n&quot;</span>, b );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line 1 - 变量 a 的大小 = 4</span><br><span class="line">Line 2 - 变量 b 的大小 = 2</span><br><span class="line">Line 3 - 变量 c 的大小 = 8</span><br><span class="line">a 的值是 4</span><br><span class="line"><span class="emphasis">*ptr 是 4</span></span><br><span class="line"><span class="emphasis">b 的值是 30</span></span><br><span class="line"><span class="emphasis">b 的值是 20</span></span><br></pre></td></tr></table></figure><h2 id="C-中的运算符优先级"><a class="header-anchor" href="#C-中的运算符优先级">¶</a>C 中的运算符优先级</h2><p>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。</p><table><thead><tr><th style="text-align:left">类别</th><th style="text-align:left">运算符</th><th style="text-align:left">结合性</th></tr></thead><tbody><tr><td style="text-align:left">后缀</td><td style="text-align:left">() [] -&gt; . ++ - -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">一元</td><td style="text-align:left">+ - ! ~ ++ - - (type)* &amp; sizeof</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">乘除</td><td style="text-align:left">* / %</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">加减</td><td style="text-align:left">+ -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">移位</td><td style="text-align:left">&lt;&lt; &gt;&gt;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">关系</td><td style="text-align:left">&lt; &lt;= &gt; &gt;=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">相等</td><td style="text-align:left">== !=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位与 AND</td><td style="text-align:left">&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位异或 XOR</td><td style="text-align:left">^</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位或 OR</td><td style="text-align:left">|</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑与 AND</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑或 OR</td><td style="text-align:left">||</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">条件</td><td style="text-align:left">?:</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">赋值</td><td style="text-align:left">= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">逗号</td><td style="text-align:left">,</td><td style="text-align:left">从左到右</td></tr></tbody></table><h3 id="实例-v7"><a class="header-anchor" href="#实例-v7">¶</a>实例</h3><p>请看下面的实例，了解 C 语言中运算符的优先级：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">int</span> c = <span class="number">15</span>;</span><br><span class="line">   <span class="keyword">int</span> d = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">int</span> e;</span><br><span class="line"> </span><br><span class="line">   e = (a + b) * c / d;      <span class="comment">// ( 30 * 15 ) / 5</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;(a + b) * c / d 的值是 %d\n&quot;</span>,  e );</span><br><span class="line"> </span><br><span class="line">   e = ((a + b) * c) / d;    <span class="comment">// (30 * 15 ) / 5</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;((a + b) * c) / d 的值是 %d\n&quot;</span> ,  e );</span><br><span class="line"> </span><br><span class="line">   e = (a + b) * (c / d);   <span class="comment">// (30) * (15/5)</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;(a + b) * (c / d) 的值是 %d\n&quot;</span>,  e );</span><br><span class="line"> </span><br><span class="line">   e = a + (b * c) / d;     <span class="comment">//  20 + (150/5)</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;a + (b * c) / d 的值是 %d\n&quot;</span> ,  e );</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">(a + b) <span class="emphasis">* c / d 的值是 90</span></span><br><span class="line"><span class="emphasis">((a + b) *</span> c) / d 的值是 90</span><br><span class="line">(a + b) <span class="emphasis">* (c / d) 的值是 90</span></span><br><span class="line"><span class="emphasis">a + (b *</span> c) / d 的值是 50</span><br></pre></td></tr></table></figure><h1>C 判断</h1><p>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><h2 id="判断语句"><a class="header-anchor" href="#判断语句">¶</a>判断语句</h2><table><thead><tr><th style="text-align:left">语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">if 语句</td><td style="text-align:left">一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td style="text-align:left">if…else语句</td><td style="text-align:left">一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td></tr><tr><td style="text-align:left">嵌套 if 语句</td><td style="text-align:left">您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td style="text-align:left">switch 语句</td><td style="text-align:left">一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td style="text-align:left">嵌套 switch 语句</td><td style="text-align:left">您可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch</strong> 语句。</td></tr></tbody></table><h3 id="if-语句"><a class="header-anchor" href="#if-语句">¶</a>if 语句</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if(boolean<span class="emphasis">_expression)</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">   /* 如果布尔表达式为真将执行的语句 */</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p>如果布尔表达式为 <strong>true</strong>，则 if 语句内的代码块将被执行。如果布尔表达式为 <strong>false</strong>，则 if 语句结束后的第一组代码（闭括号后）将被执行。</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><h3 id="if…else语句"><a class="header-anchor" href="#if…else语句">¶</a>if…else语句</h3><p>一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为 false 时执行。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if(boolean<span class="emphasis">_expression)</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">   /* 如果布尔表达式为真将执行的语句 */</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">else</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">   /* 如果布尔表达式为假将执行的语句 */</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p>一个 <strong>if</strong> 语句后可跟一个可选的 <strong>else if…else</strong> 语句，这可用于测试多种条件。</p><p>当使用 if…else if…else 语句时，以下几点需要注意：</p><ul><li>一个 if 后可跟零个或一个 else，else 必须在所有 else if 之后。</li><li>一个 if 后可跟零个或多个 else if，else if 必须在 else 之前。</li><li>一旦某个 else if 匹配成功，其他的 else if 或 else 将不会被测试。</li></ul><h3 id="嵌套-if-语句"><a class="header-anchor" href="#嵌套-if-语句">¶</a>嵌套 if 语句</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if( boolean<span class="emphasis">_expression 1)</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">   /* 当布尔表达式 1 为真时执行 */</span></span><br><span class="line"><span class="emphasis">   if(boolean_</span>expression 2)</span><br><span class="line">   &#123;</span><br><span class="line"><span class="code">      /* 当布尔表达式 2 为真时执行 */</span></span><br><span class="line"><span class="code">   &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a class="header-anchor" href="#switch-语句">¶</a>switch 语句</h3><p>一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。每个值称为一个 case，且被测试的变量会对每个 <strong>switch case</strong> 进行检查。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">switch(expression)&#123;</span><br><span class="line"><span class="code">    case constant-expression  :</span></span><br><span class="line"><span class="code">       statement(s);</span></span><br><span class="line"><span class="code">       break; /* 可选的 */</span></span><br><span class="line"><span class="code">    case constant-expression  :</span></span><br><span class="line"><span class="code">       statement(s);</span></span><br><span class="line"><span class="code">       break; /* 可选的 */</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">    /* 您可以有任意数量的 case 语句 */</span></span><br><span class="line"><span class="code">    default : /* 可选的 */</span></span><br><span class="line"><span class="code">       statement(s);</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>switch</strong> 语句必须遵循下面的规则：</p><ul><li><strong>switch</strong> 语句中的 <strong>expression</strong> 是一个常量表达式，必须是一个整型或枚举类型。</li><li>在一个 switch 中可以有任意数量的 case 语句。每个 case 后跟一个要比较的值和一个冒号。</li><li>case 的 <strong>constant-expression</strong> 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量。</li><li>当被测试的变量等于 case 中的常量时，case 后跟的语句将被执行，直到遇到 <strong>break</strong> 语句为止。</li><li>当遇到 <strong>break</strong> 语句时，switch 终止，控制流将跳转到 switch 语句后的下一行。</li><li>不是每一个 case 都需要包含 <strong>break</strong>。如果 case 语句不包含 <strong>break</strong>，控制流将会 <em>继续</em> 后续的 case，直到遇到 break 为止。</li><li>一个 <strong>switch</strong> 语句可以有一个可选的 <strong>default</strong> case，出现在 switch 的结尾。default case 可用于在上面所有 case 都不为真时执行一个任务。default case 中的 <strong>break</strong> 语句不是必需的。</li></ul><h3 id="嵌套-switch-语句"><a class="header-anchor" href="#嵌套-switch-语句">¶</a>嵌套 switch 语句</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">switch(ch1) &#123;</span><br><span class="line">   case &#x27;A&#x27;: </span><br><span class="line"><span class="code">      printf(&quot;这个 A 是外部 switch 的一部分&quot; );</span></span><br><span class="line"><span class="code">      switch(ch2) &#123;</span></span><br><span class="line"><span class="code">         case &#x27;A&#x27;:</span></span><br><span class="line"><span class="code">            printf(&quot;这个 A 是内部 switch 的一部分&quot; );</span></span><br><span class="line"><span class="code">            break;</span></span><br><span class="line"><span class="code">         case &#x27;B&#x27;: /* 内部 B case 代码 */</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">      break;</span></span><br><span class="line"><span class="code">   case &#x27;B&#x27;: /* 外部 B case 代码 */</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="运算符-三元运算符"><a class="header-anchor" href="#运算符-三元运算符">¶</a>? : 运算符(三元运算符)</h2><p><strong>条件运算符 ? :</strong>，可以用来替代 <strong>if…else</strong> 语句。它的一般形式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Exp1 ? Exp2 : Exp3;</span><br></pre></td></tr></table></figure><blockquote><p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p></blockquote><p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值。</p><h3 id="实例-v8"><a class="header-anchor" href="#实例-v8">¶</a>实例</h3><p>以下实例通过输入一个数字来判断它是否为奇数或偶数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个数字 : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line"> </span><br><span class="line">    (num%<span class="number">2</span>==<span class="number">0</span>)?<span class="built_in">printf</span>(<span class="string">&quot;偶数&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C 循环</h1><p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><p>循环语句允许我们多次执行一个语句或语句组。</p><h2 id="循环类型"><a class="header-anchor" href="#循环类型">¶</a>循环类型</h2><table><thead><tr><th style="text-align:left">循环类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">while 循环</td><td style="text-align:left">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td style="text-align:left">for 循环</td><td style="text-align:left">多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td style="text-align:left">do…while 循环</td><td style="text-align:left">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td style="text-align:left">嵌套循环</td><td style="text-align:left">可以在 while、for 或 do…while 循环内使用一个或多个循环。</td></tr></tbody></table><h3 id="while-循环"><a class="header-anchor" href="#while-循环">¶</a>while 循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，<strong>statement(s)</strong> 可以是一个单独的语句，也可以是几个语句组成的代码块。</p><p><strong>condition</strong> 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。 当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。</p><p><em>while</em> 循环的关键点是循环可能一次都不会执行。当条件为 false 时，会跳过循环主体，直接执行紧接着 while 循环的下一条语句。</p><h3 id="for-循环"><a class="header-anchor" href="#for-循环">¶</a>for 循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment )</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 for 循环的控制流：</p><ol><li><strong>init</strong> 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。</li><li>接下来，会判断 <strong>condition</strong>。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。</li><li>在执行完 for 循环主体后，控制流会跳回上面的 <strong>increment</strong> 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。</li><li>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</li></ol><h3 id="do…while-循环"><a class="header-anchor" href="#do…while-循环">¶</a><strong>do…while</strong> 循环</h3><p>不像 <strong>for</strong> 和 <strong>while</strong> 循环，它们是在循环头部测试循环条件。在 C 语言中，<strong>do…while</strong> 循环是在循环的尾部检查它的条件。</p><p><strong>do…while</strong> 循环与 while 循环类似，但是 do…while 循环会确保至少执行一次循环。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>( condition );</span><br></pre></td></tr></table></figure><p>请注意，条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。</p><p>如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement(s)。这个过程会不断重复，直到给定条件变为假为止。</p><h3 id="嵌套循环"><a class="header-anchor" href="#嵌套循环">¶</a>嵌套循环</h3><p>C 语言中 <strong>嵌套 for 循环</strong> 语句的语法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; increment/decrement)</span><br><span class="line">&#123;</span><br><span class="line">    statement(s);</span><br><span class="line">    <span class="keyword">for</span> (initialization; condition; increment/decrement)</span><br><span class="line">    &#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200910164012.png" alt=""></p><p>C 语言中 <strong>嵌套 while 循环</strong> 语句的语法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    statement(s);</span><br><span class="line">    <span class="keyword">while</span> (condition2)</span><br><span class="line">    &#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200910164059.png" alt=""></p><p>C 语言中 <strong>嵌套 do…while 循环</strong> 语句的语法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    statement(s);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;<span class="keyword">while</span> (condition2);</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;<span class="keyword">while</span> (condition1);</span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200910171229.png" alt=""></p><p>关于嵌套循环有一点值得注意，您可以在任何类型的循环内嵌套其他任何类型的循环。比如，一个 for 循环可以嵌套在一个 while 循环内，反之亦然。</p><h3 id="实例-v9"><a class="header-anchor" href="#实例-v9">¶</a>实例</h3><h4 id="for-循环-v2"><a class="header-anchor" href="#for-循环-v2">¶</a>for 循环</h4><p>下面的程序使用了一个嵌套的 for 循环来查找 2 到 100 中的质数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">   <span class="keyword">int</span> i, j;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">2</span>; j &lt;= (i/j); j++)</span><br><span class="line">        <span class="keyword">if</span>(!(i%j)) <span class="keyword">break</span>; <span class="comment">// 如果找到，则不是质数</span></span><br><span class="line">      <span class="keyword">if</span>(j &gt; (i/j)) <span class="built_in">printf</span>(<span class="string">&quot;%d 是质数\n&quot;</span>, i);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="number">2</span> 是质数</span><br><span class="line"><span class="number">3</span> 是质数</span><br><span class="line"><span class="number">5</span> 是质数</span><br><span class="line"><span class="number">7</span> 是质数</span><br><span class="line"><span class="number">11</span> 是质数</span><br><span class="line"><span class="number">13</span> 是质数</span><br><span class="line"><span class="number">17</span> 是质数</span><br><span class="line"><span class="number">19</span> 是质数</span><br><span class="line"><span class="number">23</span> 是质数</span><br><span class="line"><span class="number">29</span> 是质数</span><br><span class="line"><span class="number">31</span> 是质数</span><br><span class="line"><span class="number">37</span> 是质数</span><br><span class="line"><span class="number">41</span> 是质数</span><br><span class="line"><span class="number">43</span> 是质数</span><br><span class="line"><span class="number">47</span> 是质数</span><br><span class="line"><span class="number">53</span> 是质数</span><br><span class="line"><span class="number">59</span> 是质数</span><br><span class="line"><span class="number">61</span> 是质数</span><br><span class="line"><span class="number">67</span> 是质数</span><br><span class="line"><span class="number">71</span> 是质数</span><br><span class="line"><span class="number">73</span> 是质数</span><br><span class="line"><span class="number">79</span> 是质数</span><br><span class="line"><span class="number">83</span> 是质数</span><br><span class="line"><span class="number">89</span> 是质数</span><br><span class="line"><span class="number">97</span> 是质数</span><br></pre></td></tr></table></figure><h4 id="while-嵌套实例"><a class="header-anchor" href="#while-嵌套实例">¶</a>while 嵌套实例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= i )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="do-while-嵌套实例"><a class="header-anchor" href="#do-while-嵌套实例">¶</a>do-while 嵌套实例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(j &lt;= i);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt;= <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="循环控制语句"><a class="header-anchor" href="#循环控制语句">¶</a>循环控制语句</h2><p>循环控制语句改变代码的执行顺序。通过它可以实现代码的跳转。</p><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">break 语句</td><td style="text-align:left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td style="text-align:left">continue 语句</td><td style="text-align:left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td style="text-align:left">goto 语句</td><td style="text-align:left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table><h3 id="break-语句"><a class="header-anchor" href="#break-语句">¶</a>break 语句</h3><p>C 语言中 <strong>break</strong> 语句有以下两种用法：</p><ol><li>当 <strong>break</strong> 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。</li><li>它可用于终止 <strong>switch</strong> 语句中的一个 case。</li></ol><p>如果使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。</p><h3 id="continue-语句"><a class="header-anchor" href="#continue-语句">¶</a>continue 语句</h3><p>C 语言中的 <strong>continue</strong> 语句有点像 <strong>break</strong> 语句。但它不是强制终止，continue 会跳过当前循环中的代码，强迫开始下一次循环。</p><p>对于 <strong>for</strong> 循环，<strong>continue</strong> 语句执行后自增语句仍然会执行。对于 <strong>while</strong> 和 <strong>do…while</strong> 循环，<strong>continue</strong> 语句重新执行条件判断语句。</p><h3 id="goto-语句"><a class="header-anchor" href="#goto-语句">¶</a>goto 语句</h3><p>C 语言中的 <strong>goto</strong> 语句允许把控制无条件转移到同一函数内的被标记的语句。</p><blockquote><p>**注意：**在任何编程语言中，都不建议使用 goto 语句。因为它使得程序的控制流难以跟踪，使程序难以理解和难以修改。任何使用 goto 语句的程序可以改写成不需要使用 goto 语句的写法。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;</span><br><span class="line">..</span><br><span class="line">.</span><br><span class="line">label: statement;</span><br></pre></td></tr></table></figure><p>在这里，<strong>label</strong> 可以是任何除 C 关键字以外的纯文本，它可以设置在 C 程序中 <strong>goto</strong> 语句的前面或者后面。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200910171220.png" alt=""></p><h1>C 函数</h1><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p><p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><p>函数<strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。</p><p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置。</p><p>函数还有很多叫法，比如方法、子例程或程序，等等。</p><h2 id="定义函数"><a class="header-anchor" href="#定义函数">¶</a>定义函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><ul><li>**返回类型：**一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li><li>**函数名称：**这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li><li>**参数：**参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li><li>**函数主体：**函数主体包含一组定义函数执行任务的语句。</li></ul><h3 id="实例-v10"><a class="header-anchor" href="#实例-v10">¶</a>实例</h3><p>以下是 <strong>max()</strong> 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 函数返回两个数中较大的那个数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">   <span class="keyword">int</span> result;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数声明"><a class="header-anchor" href="#函数声明">¶</a>函数声明</h2><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数声明包括以下几个部分：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br></pre></td></tr></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>当在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><h2 id="调用函数"><a class="header-anchor" href="#调用函数">¶</a>调用函数</h2><p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p><p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p><p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 调用函数来获取最大值 */</span></span><br><span class="line">   ret = max(a, b);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Max value is : %d\n&quot;</span>, ret );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数返回两个数中较大的那个数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">   <span class="keyword">int</span> result;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Max value is : <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="函数参数"><a class="header-anchor" href="#函数参数">¶</a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p><p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有两种向函数传递参数的方式：</p><table><thead><tr><th style="text-align:left">调用类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">传值调用</td><td style="text-align:left">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</td></tr><tr><td style="text-align:left">引用调用</td><td style="text-align:left">通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</td></tr></tbody></table><h3 id="传值方式调用函数"><a class="header-anchor" href="#传值方式调用函数">¶</a>传值方式调用函数</h3><p>向函数传递参数的<strong>传值调用</strong>方法，把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</p><p>默认情况下，C 语言使用<em>传值调用</em>方法来传递参数。一般来说，这意味着函数内的代码不会改变用于调用函数的实际参数。函数 <strong>swap()</strong> 定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 函数定义 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">   temp = x; <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">   x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">   y = temp; <span class="comment">/* 把 temp 赋值给 y */</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过传递实际参数来调用函数 <strong>swap()</strong>：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，b 的值： %d\n&quot;</span>, b );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">   swap(a, b);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，b 的值： %d\n&quot;</span>, b );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">交换前，a 的值： <span class="number">100</span></span><br><span class="line">交换前，b 的值： <span class="number">200</span></span><br><span class="line">交换后，a 的值： <span class="number">100</span></span><br><span class="line">交换后，b 的值： <span class="number">200</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的实例表明了，虽然在函数内改变了 a 和 b 的值，但是实际上 a 和 b 的值没有发生变化。</p></blockquote><h3 id="引用方式调用函数"><a class="header-anchor" href="#引用方式调用函数">¶</a>引用方式调用函数</h3><p>通过引用传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</p><p>传递指针可以让多个函数访问指针所引用的对象，而不用把对象声明为全局可访问。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 函数定义 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> temp;</span><br><span class="line">   temp = *x;    <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">   *x = *y;      <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">   *y = temp;    <span class="comment">/* 把 temp 赋值给 y */</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过引用传值来调用函数 <strong>swap()</strong>：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，b 的值： %d\n&quot;</span>, b );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 调用函数来交换值</span></span><br><span class="line"><span class="comment">    * &amp;a 表示指向 a 的指针，即变量 a 的地址</span></span><br><span class="line"><span class="comment">    * &amp;b 表示指向 b 的指针，即变量 b 的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   swap(&amp;a, &amp;b);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，b 的值： %d\n&quot;</span>, b );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">交换前，a 的值： <span class="number">100</span></span><br><span class="line">交换前，b 的值： <span class="number">200</span></span><br><span class="line">交换后，a 的值： <span class="number">200</span></span><br><span class="line">交换后，b 的值： <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的实例表明了，与传值调用不同，引用调用在函数内改变了 a 和 b 的值，实际上也改变了函数外 a 和 b 的值。</p></blockquote><h1>C 作用域规则</h1><p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p><ol><li>在函数或块内部的<strong>局部</strong>变量</li><li>在所有函数外部的<strong>全局</strong>变量</li><li>在<strong>形式</strong>参数的函数参数定义中</li></ol><h2 id="局部变量"><a class="header-anchor" href="#局部变量">¶</a>局部变量</h2><p>在某个函数或块的内部声明的变量称为局部变量。它们只能被该函数或该代码块内部的语句使用。局部变量在函数外部是不可知的。下面是使用局部变量的实例。在这里，所有的变量 a、b 和 c 是 main() 函数的局部变量。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">  <span class="keyword">int</span> a, b;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 实际初始化 */</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  c = a + b;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;value of a = %d, b = %d and c = %d\n&quot;</span>, a, b, c);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局变量"><a class="header-anchor" href="#全局变量">¶</a>全局变量</h2><p>全局变量是定义在函数外部，通常是在程序的顶部。全局变量在整个程序生命周期内都是有效的，在任意的函数内部能访问全局变量。</p><p>全局变量可以被任何函数访问。也就是说，全局变量在声明后整个程序中都是可用的。下面是使用全局变量和局部变量的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 全局变量声明 */</span></span><br><span class="line"><span class="keyword">int</span> g;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">  <span class="keyword">int</span> a, b;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 实际初始化 */</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  g = a + b;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;value of a = %d, b = %d and g = %d\n&quot;</span>, a, b, g);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，如果两个名字相同，会使用局部变量值，全局变量不会被使用。下面是一个实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 全局变量声明 */</span></span><br><span class="line"><span class="keyword">int</span> g = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">  <span class="keyword">int</span> g = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;value of g = %d\n&quot;</span>,  g);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="形式参数"><a class="header-anchor" href="#形式参数">¶</a>形式参数</h2><p>函数的参数，形式参数，被当作该函数内的局部变量，如果与全局变量同名它们会优先使用。下面是一个实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 全局变量声明 */</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 在主函数中的局部变量声明 */</span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;value of a in main() = %d\n&quot;</span>,  a);</span><br><span class="line">  c = sum( a, b);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;value of c in main() = %d\n&quot;</span>,  c);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 添加两个整数的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;value of a in sum() = %d\n&quot;</span>,  a);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;value of b in sum() = %d\n&quot;</span>,  b);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">value of a in <span class="title">main</span><span class="params">()</span> </span>= <span class="number">10</span></span><br><span class="line"><span class="function">value of a in <span class="title">sum</span><span class="params">()</span> </span>= <span class="number">10</span></span><br><span class="line"><span class="function">value of b in <span class="title">sum</span><span class="params">()</span> </span>= <span class="number">20</span></span><br><span class="line"><span class="function">value of c in <span class="title">main</span><span class="params">()</span> </span>= <span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>全局变量与局部变量在内存中的区别</strong>：</p></blockquote><blockquote><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元；</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</li></ul></blockquote><h2 id="初始化局部变量和全局变量"><a class="header-anchor" href="#初始化局部变量和全局变量">¶</a>初始化局部变量和全局变量</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化，如下所示：</p><table><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left">初始化默认值</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">‘\0’</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">pointer</td><td style="text-align:left">NULL</td></tr></tbody></table><p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果，因为未初始化的变量会导致一些在内存位置中已经可用的垃圾值。</p><h1>C 数组</h1><p>C 语言支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p><p>数组的声明并不是声明一个个单独的变量，比如 number0、number1、…、number99，而是声明一个数组变量，比如 numbers，然后使用 numbers[0]、numbers[1]、…、numbers[99] 来代表一个个单独的变量。数组中的特定元素可以通过索引访问。</p><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200913162129.jpg" alt="C 中的数组"></p><h2 id="声明数组"><a class="header-anchor" href="#声明数组">¶</a>声明数组</h2><p>在 C 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type arrayName [ arraySize ];</span><br></pre></td></tr></table></figure><p>这叫做一维数组。<strong>arraySize</strong> 必须是一个大于零的整数常量，<strong>type</strong> 可以是任意有效的 C 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组 <strong>balance</strong>，声明语句如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> balance[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>现在 <em>balance</em> 是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p><h2 id="初始化数组"><a class="header-anchor" href="#初始化数组">¶</a>初始化数组</h2><p>在 C 中，可以逐个初始化数组，也可以使用一个初始化语句，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p><p>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> balance[] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">balance[<span class="number">4</span>] = <span class="number">50.0</span>;</span><br></pre></td></tr></table></figure><p>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：<img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200914213845.jpg" alt="数组表示"></p><h2 id="访问数组元素"><a class="header-anchor" href="#访问数组元素">¶</a>访问数组元素</h2><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure><p>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n[ <span class="number">10</span> ]; <span class="comment">/* n 是一个包含 10 个整数的数组 */</span></span><br><span class="line">   <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 初始化数组元素 */</span>         </span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">      n[ i ] = i + <span class="number">100</span>; <span class="comment">/* 设置元素 i 为 i + 100 */</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 输出数组中每个元素的值 */</span></span><br><span class="line">   <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] );</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure><h2 id="C-中数组详解"><a class="header-anchor" href="#C-中数组详解">¶</a>C 中数组详解</h2><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">多维数组</td><td style="text-align:left">C 支持多维数组。多维数组最简单的形式是二维数组。</td></tr><tr><td style="text-align:left">传递数组给函数</td><td style="text-align:left">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td></tr><tr><td style="text-align:left">从函数返回数组</td><td style="text-align:left">C 允许从函数返回数组。</td></tr><tr><td style="text-align:left">指向数组的指针</td><td style="text-align:left">可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td></tr></tbody></table><h3 id="多维数组"><a class="header-anchor" href="#多维数组">¶</a>多维数组</h3><p>多维数组声明的一般形式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type name[size1][size2]...[sizeN];</span><br></pre></td></tr></table></figure><p>例如，下面的声明创建了一个三维 5 . 10 . 4 整型数组：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> threedim[<span class="number">5</span>][<span class="number">10</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h4 id="二维数组"><a class="header-anchor" href="#二维数组">¶</a>二维数组</h4><p>多维数组最简单的形式是二维数组。一个二维数组，在本质上，是一个一维数组的列表。声明一个 x 行 y 列的二维整型数组，形式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type arrayName [ x ][ y ];</span><br></pre></td></tr></table></figure><p>其中，<strong>type</strong> 可以是任意有效的 C 数据类型，<strong>arrayName</strong> 是一个有效的 C 标识符。一个二维数组可以被认为是一个带有 x 行和 y 列的表格。下面是一个二维数组，包含 3 行和 4 列：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200914214340.jpg" alt=""></p><p>因此，数组中的每个元素是使用形式为 a[ i , j ] 的元素名称来标识的，其中 a 是数组名称，i 和 j 是唯一标识 a 中每个元素的下标。</p><h4 id="初始化二维数组"><a class="header-anchor" href="#初始化二维数组">¶</a>初始化二维数组</h4><p>多维数组可以通过在括号内为每行指定值来进行初始化。下面是一个带有 3 行 4 列的数组。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;  </span><br><span class="line"> &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; ,   <span class="comment">/*  初始化索引号为 0 的行 */</span></span><br><span class="line"> &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; ,   <span class="comment">/*  初始化索引号为 1 的行 */</span></span><br><span class="line"> &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;   <span class="comment">/*  初始化索引号为 2 的行 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内部嵌套的括号是可选的，下面的初始化与上面是等同的：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="访问二维数组元素"><a class="header-anchor" href="#访问二维数组元素">¶</a>访问二维数组元素</h4><p>二维数组中的元素是通过使用下标（即数组的行索引和列索引）来访问的。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> val = a[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>上面的语句将获取数组中第 3 行第 4 个元素。可以通过上面的示意图来进行验证。来看看下面的程序，将使用嵌套循环来处理二维数组：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 一个带有 5 行 2 列的数组 */</span></span><br><span class="line">   <span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">4</span>&#125;, &#123;<span class="number">3</span>,<span class="number">6</span>&#125;,&#123;<span class="number">4</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">   <span class="keyword">int</span> i, j;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出数组中每个元素的值 */</span></span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ )</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d] = %d\n&quot;</span>, i,j, a[i][j] );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">a[<span class="number">4</span>][<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">a[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="传递数组给函数"><a class="header-anchor" href="#传递数组给函数">¶</a>传递数组给函数</h3><p>如果想要在函数中传递一个一维数组作为参数，必须以下面三种方式来声明函数形式参数，这三种声明方式的结果是一样的，因为每种方式都会告诉编译器将要接收一个整型指针。同样地，也可以传递一个多维数组作为形式参数。</p><h4 id="方式-1"><a class="header-anchor" href="#方式-1">¶</a>方式 1</h4><p>形式参数是一个指针:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(<span class="keyword">int</span> *param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式-2"><a class="header-anchor" href="#方式-2">¶</a>方式 2</h4><p>形式参数是一个已定义大小的数组：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(<span class="keyword">int</span> param[<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式-3"><a class="header-anchor" href="#方式-3">¶</a>方式 3</h4><p>形式参数是一个未定义大小的数组：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(<span class="keyword">int</span> param[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-v11"><a class="header-anchor" href="#实例-v11">¶</a>实例</h4><p>来看下面这个函数，它把数组作为参数，同时还传递了另一个参数，根据所传的参数，会返回数组中各元素的平均值：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>    i;</span><br><span class="line">  <span class="keyword">double</span> avg;</span><br><span class="line">  <span class="keyword">double</span> sum;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg = sum / size;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用上面的函数，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 带有 5 个元素的整型数组 */</span></span><br><span class="line">   <span class="keyword">int</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">50</span>&#125;;</span><br><span class="line">   <span class="keyword">double</span> avg;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 传递一个指向数组的指针作为参数 */</span></span><br><span class="line">   avg = getAverage( balance, <span class="number">5</span> ) ;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出返回值 */</span></span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;平均值是： %f &quot;</span>, avg );</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>    i;</span><br><span class="line">  <span class="keyword">double</span> avg;</span><br><span class="line">  <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg = sum / size;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">平均值是： <span class="number">214.400000</span></span><br></pre></td></tr></table></figure><h3 id="从函数返回数组"><a class="header-anchor" href="#从函数返回数组">¶</a>从函数返回数组</h3><p>C 语言不允许返回一个完整的数组作为函数的参数。但是，可以通过指定不带索引的数组名来返回一个指向数组的指针。</p><p>如果想要从函数返回一个一维数组，必须声明一个返回指针的函数，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">myFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，C 不支持在函数外返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量。</p><p>来看下面的函数，它会生成 10 个随机数，并使用数组来返回它们，具体如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 要生成和返回随机数的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">getRandom</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span>  r[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 设置种子 */</span></span><br><span class="line">  srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">     r[i] = rand();</span><br><span class="line">     <span class="built_in">printf</span>( <span class="string">&quot;r[%d] = %d\n&quot;</span>, i, r[i]);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 要调用上面定义函数的主函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 一个指向整数的指针 */</span></span><br><span class="line">   <span class="keyword">int</span> *p;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   p = getRandom();</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>( <span class="string">&quot;*(p + %d) : %d\n&quot;</span>, i, *(p + i));</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">r[<span class="number">0</span>] = <span class="number">313959809</span></span><br><span class="line">r[<span class="number">1</span>] = <span class="number">1759055877</span></span><br><span class="line">r[<span class="number">2</span>] = <span class="number">1113101911</span></span><br><span class="line">r[<span class="number">3</span>] = <span class="number">2133832223</span></span><br><span class="line">r[<span class="number">4</span>] = <span class="number">2073354073</span></span><br><span class="line">r[<span class="number">5</span>] = <span class="number">167288147</span></span><br><span class="line">r[<span class="number">6</span>] = <span class="number">1827471542</span></span><br><span class="line">r[<span class="number">7</span>] = <span class="number">834791014</span></span><br><span class="line">r[<span class="number">8</span>] = <span class="number">1901409888</span></span><br><span class="line">r[<span class="number">9</span>] = <span class="number">1990469526</span></span><br><span class="line">*(p + <span class="number">0</span>) : <span class="number">313959809</span></span><br><span class="line">*(p + <span class="number">1</span>) : <span class="number">1759055877</span></span><br><span class="line">*(p + <span class="number">2</span>) : <span class="number">1113101911</span></span><br><span class="line">*(p + <span class="number">3</span>) : <span class="number">2133832223</span></span><br><span class="line">*(p + <span class="number">4</span>) : <span class="number">2073354073</span></span><br><span class="line">*(p + <span class="number">5</span>) : <span class="number">167288147</span></span><br><span class="line">*(p + <span class="number">6</span>) : <span class="number">1827471542</span></span><br><span class="line">*(p + <span class="number">7</span>) : <span class="number">834791014</span></span><br><span class="line">*(p + <span class="number">8</span>) : <span class="number">1901409888</span></span><br><span class="line">*(p + <span class="number">9</span>) : <span class="number">1990469526</span></span><br></pre></td></tr></table></figure><h3 id="指向数组的指针"><a class="header-anchor" href="#指向数组的指针">¶</a>指向数组的指针</h3><p>数组名是一个指向数组中第一个元素的常量指针。因此，在下面的声明中：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> balance[<span class="number">50</span>];</span><br></pre></td></tr></table></figure><p><strong>balance</strong> 是一个指向 &amp;balance[0] 的指针，即数组 balance 的第一个元素的地址。因此，下面的程序片段把 <strong>p</strong> 赋值为 <strong>balance</strong> 的第一个元素的地址：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line"><span class="keyword">double</span> balance[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">p = balance;</span><br></pre></td></tr></table></figure><p>使用数组名作为常量指针是合法的，反之亦然。因此，*(balance + 4) 是一种访问 balance[4] 数据的合法方式。</p><p>一旦把第一个元素的地址存储在 p 中，就可以使用 <em>p、</em>(p+1)、*(p+2) 等来访问数组元素。下面的实例演示了上面讨论到的这些概念：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 带有 5 个元素的整型数组 */</span></span><br><span class="line">   <span class="keyword">double</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">17.0</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line">   <span class="keyword">double</span> *p;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   p = balance;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出数组中每个元素的值 */</span></span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;使用指针的数组值\n&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*(p + %d) : %f\n&quot;</span>,  i, *(p + i) );</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;使用 balance 作为地址的数组值\n&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*(balance + %d) : %f\n&quot;</span>,  i, *(balance + i) );</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">使用指针的数组值</span><br><span class="line">*(p + <span class="number">0</span>) : <span class="number">1000.000000</span></span><br><span class="line">*(p + <span class="number">1</span>) : <span class="number">2.000000</span></span><br><span class="line">*(p + <span class="number">2</span>) : <span class="number">3.400000</span></span><br><span class="line">*(p + <span class="number">3</span>) : <span class="number">17.000000</span></span><br><span class="line">*(p + <span class="number">4</span>) : <span class="number">50.000000</span></span><br><span class="line">使用 balance 作为地址的数组值</span><br><span class="line">*(balance + <span class="number">0</span>) : <span class="number">1000.000000</span></span><br><span class="line">*(balance + <span class="number">1</span>) : <span class="number">2.000000</span></span><br><span class="line">*(balance + <span class="number">2</span>) : <span class="number">3.400000</span></span><br><span class="line">*(balance + <span class="number">3</span>) : <span class="number">17.000000</span></span><br><span class="line">*(balance + <span class="number">4</span>) : <span class="number">50.000000</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面的实例中，p 是一个指向 double 型的指针，这意味着它可以存储一个 double 类型的变量。一旦有了 p 中的地址，*<strong>p</strong> 将给出存储在 p 中相应地址的值，正如上面实例中所演示的。</p></blockquote><h1>C enum(枚举)</h1><p>枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。</p><p>枚举语法定义格式为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span>　枚举名　&#123;枚举元素<span class="number">1</span>,枚举元素<span class="number">2</span>,……&#125;;</span><br></pre></td></tr></table></figure><p>举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MON  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TUE  2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WED  3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THU  4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FRI  5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAT  6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUN  7</span></span><br></pre></td></tr></table></figure><p>使用枚举的方式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> DAY</span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>**注意：**第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p></blockquote><p><em>可以在定义枚举类型时改变枚举元素的值：</em></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> season &#123;spring, summer=<span class="number">3</span>, autumn, winter&#125;;</span><br></pre></td></tr></table></figure><p><em>没有指定值的枚举元素，其值为前一元素加 1。也就说 spring 的值为 0，summer 的值为 3，autumn 的值为 4，winter 的值为 5</em></p><h2 id="枚举变量的定义"><a class="header-anchor" href="#枚举变量的定义">¶</a>枚举变量的定义</h2><p>前面只是声明了枚举类型，接下来看看如何定义枚举变量。</p><p>可以通过以下三种方式来定义枚举变量</p><p><strong>1、先定义枚举类型，再定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> DAY</span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> DAY day;</span><br></pre></td></tr></table></figure><p><strong>2、定义枚举类型的同时定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> DAY</span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure><p><strong>3、省略枚举名称，直接定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">enum</span> DAY</span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> DAY day;</span><br><span class="line">    day = WED;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：3</p><p>在C 语言中，枚举类型是被当做 int 或者 unsigned int 类型来处理的，所以按照 C 语言规范是没有办法遍历枚举类型的。</p><p>不过在一些特殊的情况下，枚举类型必须连续是可以实现有条件的遍历。</p><p>以下实例使用 for 来遍历枚举的元素：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">enum</span> DAY</span><br><span class="line">&#123;</span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历枚举元素</span></span><br><span class="line">    <span class="keyword">for</span> (day = MON; day &lt;= SUN; day++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下枚举类型<strong>不连续</strong>，这种枚举无法遍历。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    ENUM_0,</span><br><span class="line">    ENUM_10 = <span class="number">10</span>,</span><br><span class="line">    ENUM_11</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>枚举在 switch 中的使用：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">enum</span> color &#123; red=<span class="number">1</span>, green, blue &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">enum</span>  color favorite_color;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 用户输入数字来选择颜色 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你喜欢的颜色: (1. red, 2. green, 3. blue): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;favorite_color);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 输出结果 */</span></span><br><span class="line">    <span class="keyword">switch</span> (favorite_color)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> red:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你喜欢的颜色是红色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> green:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你喜欢的颜色是绿色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> blue:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你喜欢的颜色是蓝色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你没有选择你喜欢的颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">请输入你喜欢的颜色: (<span class="number">1.</span> red, <span class="number">2.</span> green, <span class="number">3.</span> blue): <span class="number">1</span></span><br><span class="line">你喜欢的颜色是红色</span><br></pre></td></tr></table></figure><h2 id="将整数转换为枚举"><a class="header-anchor" href="#将整数转换为枚举">¶</a>将整数转换为枚举</h2><p>以下实例将整数转换为枚举：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">enum</span> day</span><br><span class="line">    &#123;</span><br><span class="line">        saturday,</span><br><span class="line">        sunday,</span><br><span class="line">        monday,</span><br><span class="line">        tuesday,</span><br><span class="line">        wednesday,</span><br><span class="line">        thursday,</span><br><span class="line">        friday</span><br><span class="line">    &#125; workday;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">enum</span> day weekend;</span><br><span class="line">    weekend = ( <span class="keyword">enum</span> day ) a;  <span class="comment">//类型转换</span></span><br><span class="line">    <span class="comment">//weekend = a; //错误</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;weekend:%d&quot;</span>,weekend);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">weekend:<span class="number">1</span></span><br></pre></td></tr></table></figure><h1>C 指针</h1><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var1;</span><br><span class="line">   <span class="keyword">char</span> var2[<span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;var1 变量的地址： %p\n&quot;</span>, &amp;var1  );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;var2 变量的地址： %p\n&quot;</span>, &amp;var2  );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">var1 变量的地址： <span class="number">0x7fff5cc109d4</span></span><br><span class="line">var2 变量的地址： <span class="number">0x7fff5cc109de</span></span><br></pre></td></tr></table></figure><h2 id="什么是指针？"><a class="header-anchor" href="#什么是指针？">¶</a>什么是指针？</h2><p><strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type *var-name;</span><br></pre></td></tr></table></figure><p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C 数据类型，<strong>var-name</strong> 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>    *ip;    <span class="comment">/* 一个整型的指针 */</span></span><br><span class="line"><span class="keyword">double</span> *dp;    <span class="comment">/* 一个 double 型的指针 */</span></span><br><span class="line"><span class="keyword">float</span>  *fp;    <span class="comment">/* 一个浮点型的指针 */</span></span><br><span class="line"><span class="keyword">char</span>   *ch;     <span class="comment">/* 一个字符型的指针 */</span></span><br></pre></td></tr></table></figure><p>所有实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，对应指针的值的类型都是一样的，都是一个代表内存地址的长的十六进制数。</p><p>不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p><h2 id="如何使用指针？"><a class="header-anchor" href="#如何使用指针？">¶</a>如何使用指针？</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var = <span class="number">20</span>;   <span class="comment">/* 实际变量的声明 */</span></span><br><span class="line">   <span class="keyword">int</span>  *ip;        <span class="comment">/* 指针变量的声明 */</span></span><br><span class="line"> </span><br><span class="line">   ip = &amp;var;  <span class="comment">/* 在指针变量中存储 var 的地址 */</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Address of var variable: %p\n&quot;</span>, &amp;var  );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 在指针变量中存储的地址 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Address stored in ip variable: %p\n&quot;</span>, ip );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value of *ip variable: %d\n&quot;</span>, *ip );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Address of var variable: bffd8b3c</span><br><span class="line">Address stored in ip variable: bffd8b3c</span><br><span class="line">Value of *ip variable: <span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>%p是用来打印地址值的</p></blockquote><h2 id="C-中的-NULL-指针"><a class="header-anchor" href="#C-中的-NULL-指针">¶</a>C 中的 NULL 指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  *ptr = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;ptr 的地址是 %p\n&quot;</span>, ptr  );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ptr 的地址是 <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。</p><p>如需检查一个空指针，您可以使用 if 语句，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ptr)     <span class="comment">/* 如果 p 非空，则完成 */</span></span><br><span class="line"><span class="keyword">if</span>(!ptr)    <span class="comment">/* 如果 p 为空，则完成 */</span></span><br></pre></td></tr></table></figure><h2 id="C-指针详解"><a class="header-anchor" href="#C-指针详解">¶</a>C 指针详解</h2><p>在 C 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C 程序员必须清楚的一些与指针相关的重要概念：</p><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">指针的算术运算</td><td style="text-align:left">可以对指针进行四种算术运算：++、–、+、-</td></tr><tr><td style="text-align:left">指针数组</td><td style="text-align:left">可以定义用来存储指针的数组。</td></tr><tr><td style="text-align:left">指向指针的指针</td><td style="text-align:left">C 允许指向指针的指针。</td></tr><tr><td style="text-align:left">传递指针给函数</td><td style="text-align:left">通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td></tr><tr><td style="text-align:left">从函数返回指针</td><td style="text-align:left">C 允许函数返回指针到局部变量、静态变量和动态内存分配。</td></tr></tbody></table><h3 id="指针的算术运算"><a class="header-anchor" href="#指针的算术运算">¶</a>指针的算术运算</h3><p>C 指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、–、+、-。</p><p>假设 <strong>ptr</strong> 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ptr++</span><br></pre></td></tr></table></figure><p>在执行完上述的运算之后，<strong>ptr</strong> 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即当前位置往后移 4 字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。如果 <strong>ptr</strong> 指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。</p><ul><li>指针的每一次递增，它其实会指向下一个元素的存储单元。</li><li>指针的每一次递减，它都会指向前一个元素的存储单元。</li><li>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</li></ul><h4 id="递增一个指针"><a class="header-anchor" href="#递增一个指针">¶</a>递增一个指针</h4><p>在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，数组可以看成一个指针常量。下面的程序递增变量指针，以便顺序访问数组中的每一个元素：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  i, *ptr;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 指针中的数组地址 */</span></span><br><span class="line">   ptr = var;</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;存储地址：var[%d] = %x\n&quot;</span>, i, ptr );</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;存储值：var[%d] = %d\n&quot;</span>, i, *ptr );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">/* 移动到下一个位置 */</span></span><br><span class="line">      ptr++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">存储地址：var[<span class="number">0</span>] = bf882b30</span><br><span class="line">存储值：var[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">存储地址：of var[<span class="number">1</span>] = bf882b34</span><br><span class="line">存储值： var[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">存储地址：of var[<span class="number">2</span>] = bf882b38</span><br><span class="line">存储值：var[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><h4 id="递减一个指针"><a class="header-anchor" href="#递减一个指针">¶</a>递减一个指针</h4><p>同样地，对指针进行递减运算，即把值减去其数据类型的字节数，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  i, *ptr;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 指针中最后一个元素的地址 */</span></span><br><span class="line">   ptr = &amp;var[MAX<span class="number">-1</span>];</span><br><span class="line">   <span class="keyword">for</span> ( i = MAX; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">   &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;存储地址：var[%d] = %x\n&quot;</span>, i<span class="number">-1</span>, ptr );</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;存储值：var[%d] = %d\n&quot;</span>, i<span class="number">-1</span>, *ptr );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">/* 移动到下一个位置 */</span></span><br><span class="line">      ptr--;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">存储地址：var[<span class="number">2</span>] = <span class="number">518</span>a0ae4</span><br><span class="line">存储值：var[<span class="number">2</span>] = <span class="number">200</span></span><br><span class="line">存储地址：var[<span class="number">1</span>] = <span class="number">518</span>a0ae0</span><br><span class="line">存储值：var[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">存储地址：var[<span class="number">0</span>] = <span class="number">518</span>a0adc</span><br><span class="line">存储值：var[<span class="number">0</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="指针的比较"><a class="header-anchor" href="#指针的比较">¶</a>指针的比较</h4><p>指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。</p><p>下面的程序修改了上面的实例，只要变量指针所指向的地址小于或等于数组的最后一个元素的地址 &amp;var[MAX - 1]，则把变量指针进行递增：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  i, *ptr;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 指针中第一个元素的地址 */</span></span><br><span class="line">   ptr = var;</span><br><span class="line">   i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> ( ptr &lt;= &amp;var[MAX - <span class="number">1</span>] )</span><br><span class="line">   &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Address of var[%d] = %p\n&quot;</span>, i, ptr );</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Value of var[%d] = %d\n&quot;</span>, i, *ptr );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">/* 指向上一个位置 */</span></span><br><span class="line">      ptr++;</span><br><span class="line">      i++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Address of var[<span class="number">0</span>] = bfdbcb20</span><br><span class="line">Value of var[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">Address of var[<span class="number">1</span>] = bfdbcb24</span><br><span class="line">Value of var[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">Address of var[<span class="number">2</span>] = bfdbcb28</span><br><span class="line">Value of var[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="指针数组"><a class="header-anchor" href="#指针数组">¶</a>指针数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Value of var[%d] = %d\n&quot;</span>, i, var[i] );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Value of var[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">Value of var[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">Value of var[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><p>可能有一种情况，想要让数组存储指向 int 或 char 或其他数据类型的指针。下面是一个指向整数的指针数组的声明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr[MAX];</span><br></pre></td></tr></table></figure><p>在这里，把 <strong>ptr</strong> 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。下面的实例用到了三个整数，它们将存储在一个指针数组中，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> i, *ptr[MAX];</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      ptr[i] = &amp;var[i]; <span class="comment">/* 赋值为整数的地址 */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Value of var[%d] = %d\n&quot;</span>, i, *ptr[i] );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Value of var[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">Value of var[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">Value of var[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><p>也可以用一个指向字符的指针数组来存储一个字符串列表，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *names[] = &#123;</span><br><span class="line">                   <span class="string">&quot;Zara Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Hina Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Nuha Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Sara Ali&quot;</span>,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Value of names[%d] = %s\n&quot;</span>, i, names[i] );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Value of names[<span class="number">0</span>] = Zara Ali</span><br><span class="line">Value of names[<span class="number">1</span>] = Hina Ali</span><br><span class="line">Value of names[<span class="number">2</span>] = Nuha Ali</span><br><span class="line">Value of names[<span class="number">3</span>] = Sara Ali</span><br></pre></td></tr></table></figure><h3 id="指向指针的指针"><a class="header-anchor" href="#指向指针的指针">¶</a>指向指针的指针</h3><p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200915165900.jpg" alt="C 中指向指针的指针"></p><p>一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> **var;</span><br></pre></td></tr></table></figure><p>当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符，如下面实例所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var;</span><br><span class="line">   <span class="keyword">int</span>  *ptr;</span><br><span class="line">   <span class="keyword">int</span>  **pptr;</span><br><span class="line"></span><br><span class="line">   var = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 获取 var 的地址 */</span></span><br><span class="line">   ptr = &amp;var;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用运算符 &amp; 获取 ptr 的地址 */</span></span><br><span class="line">   pptr = &amp;ptr;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用 pptr 获取值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value of var = %d\n&quot;</span>, var );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value available at *ptr = %d\n&quot;</span>, *ptr );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value available at **pptr = %d\n&quot;</span>, **pptr);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Value of var = <span class="number">3000</span></span><br><span class="line">Value available at *ptr = <span class="number">3000</span></span><br><span class="line">Value available at **pptr = <span class="number">3000</span></span><br></pre></td></tr></table></figure><h3 id="传递指针给函数"><a class="header-anchor" href="#传递指针给函数">¶</a>传递指针给函数</h3><p>只需要简单地声明函数参数为指针类型即可。</p><p>下面的实例中，传递一个无符号的 long 型指针给函数，并在函数内改变这个值：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSeconds</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *par)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> sec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   getSeconds( &amp;sec );</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 输出实际值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Number of seconds: %ld\n&quot;</span>, sec );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSeconds</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 获取当前的秒数 */</span></span><br><span class="line">   *par = time( <span class="literal">NULL</span> );</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Number of seconds :<span class="number">1294450468</span></span><br></pre></td></tr></table></figure><p>能接受指针作为参数的函数，也能接受数组作为参数，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 带有 5 个元素的整型数组  */</span></span><br><span class="line">   <span class="keyword">int</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">50</span>&#125;;</span><br><span class="line">   <span class="keyword">double</span> avg;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 传递一个指向数组的指针作为参数 */</span></span><br><span class="line">   avg = getAverage( balance, <span class="number">5</span> ) ;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出返回值  */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Average value is: %f\n&quot;</span>, avg );</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>    i, sum = <span class="number">0</span>;      </span><br><span class="line">  <span class="keyword">double</span> avg;          </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg = (<span class="keyword">double</span>)sum / size;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Average value is: <span class="number">214.40000</span></span><br></pre></td></tr></table></figure><h3 id="从函数返回指针"><a class="header-anchor" href="#从函数返回指针">¶</a>从函数返回指针</h3><p>C 允许从函数返回指针。为了做到这点，必须声明一个返回指针的函数，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">myFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，C 语言不支持在调用函数时返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量。</p><p>现在，来看下面的函数，它会生成 10 个随机数，并使用表示指针的数组名（即第一个数组元素的地址）来返回它们，具体如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 要生成和返回随机数的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">getRandom</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">int</span>  r[<span class="number">10</span>];</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 设置种子 */</span></span><br><span class="line">   srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">      r[i] = rand();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r[i] );</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 要调用上面定义函数的主函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 一个指向整数的指针 */</span></span><br><span class="line">   <span class="keyword">int</span> *p;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   p = getRandom();</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*(p + [%d]) : %d\n&quot;</span>, i, *(p + i) );</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1523198053</span></span><br><span class="line"><span class="number">1187214107</span></span><br><span class="line"><span class="number">1108300978</span></span><br><span class="line"><span class="number">430494959</span></span><br><span class="line"><span class="number">1421301276</span></span><br><span class="line"><span class="number">930971084</span></span><br><span class="line"><span class="number">123250484</span></span><br><span class="line"><span class="number">106932140</span></span><br><span class="line"><span class="number">1604461820</span></span><br><span class="line"><span class="number">149169022</span></span><br><span class="line">*(p + [<span class="number">0</span>]) : <span class="number">1523198053</span></span><br><span class="line">*(p + [<span class="number">1</span>]) : <span class="number">1187214107</span></span><br><span class="line">*(p + [<span class="number">2</span>]) : <span class="number">1108300978</span></span><br><span class="line">*(p + [<span class="number">3</span>]) : <span class="number">430494959</span></span><br><span class="line">*(p + [<span class="number">4</span>]) : <span class="number">1421301276</span></span><br><span class="line">*(p + [<span class="number">5</span>]) : <span class="number">930971084</span></span><br><span class="line">*(p + [<span class="number">6</span>]) : <span class="number">123250484</span></span><br><span class="line">*(p + [<span class="number">7</span>]) : <span class="number">106932140</span></span><br><span class="line">*(p + [<span class="number">8</span>]) : <span class="number">1604461820</span></span><br><span class="line">*(p + [<span class="number">9</span>]) : <span class="number">149169022</span></span><br></pre></td></tr></table></figure><h1>C 函数指针与回调函数</h1><h2 id="函数指针"><a class="header-anchor" href="#函数指针">¶</a>函数指针</h2><p>函数指针是指向函数的指针变量。</p><p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p><p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p><p>函数指针变量的声明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun_ptr)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">// 声明一个指向同样参数、返回值的函数指针类型</span></span><br></pre></td></tr></table></figure><h3 id="实例-v12"><a class="header-anchor" href="#实例-v12">¶</a>实例</h3><p>以下实例声明了函数指针变量 p，指向函数 max：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* p 是函数指针 */</span></span><br><span class="line">    <span class="keyword">int</span> (* p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = &amp; max; <span class="comment">// &amp;可以省略</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个数字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp; a, &amp; b, &amp; c);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span></span><br><span class="line">    d = p(p(a, b), c); </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大的数字是: %d\n&quot;</span>, d);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行，输出结果如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">请输入三个数字:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">最大的数字是: <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="回调函数"><a class="header-anchor" href="#回调函数">¶</a>回调函数</h2><h3 id="函数指针作为某个函数的参数"><a class="header-anchor" href="#函数指针作为某个函数的参数">¶</a>函数指针作为某个函数的参数</h3><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。</p><p>简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p><blockquote><p>例子：<em>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</em></p></blockquote><h3 id="实例-v13"><a class="header-anchor" href="#实例-v13">¶</a>实例</h3><p>实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。</p><p>实例中我们定义了回调函数 getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给 populate_array 函数。</p><p>populate_array 将调用 10 次回调函数，并将回调函数的返回值赋值给数组。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate_array</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">size_t</span> arraySize, <span class="keyword">int</span> (*getNextValue)(<span class="keyword">void</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;arraySize; i++)</span><br><span class="line">        <span class="built_in">array</span>[i] = getNextValue();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取随机值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNextRandomValue</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myarray[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span></span><br><span class="line">    populate_array(myarray, <span class="number">10</span>, getNextRandomValue);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, myarray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行，输出结果如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">16807</span> <span class="number">282475249</span> <span class="number">1622650073</span> <span class="number">984943658</span> <span class="number">1144108930</span> <span class="number">470211272</span> <span class="number">101027544</span> <span class="number">1457850878</span> <span class="number">1458777923</span> <span class="number">2007237709</span></span><br></pre></td></tr></table></figure><h1>C 字符串</h1><p>在 C 语言中，字符串实际上是使用 <strong>null</strong> 字符 ‘\0’ 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p><p>下面的声明和初始化创建了一个 “Hello” 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 “Hello” 的字符数多一个。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[] = <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>以下是 C/C++ 中定义的字符串的内存表示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200915171750.jpg" alt="C/C++ 中的字符串表示"></p><p>其实，不需要把 <em>null</em> 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把 ‘\0’ 放在字符串的末尾。让我们尝试输出上面的字符串：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Greeting message: %s\n&quot;</span>, greeting );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Greeting message: Hello</span><br></pre></td></tr></table></figure><p>C 中有大量操作字符串的函数</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数 &amp; 目的</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table><p>下面的实例使用了上述的一些函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str1[<span class="number">12</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">   <span class="keyword">char</span> str2[<span class="number">12</span>] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">   <span class="keyword">char</span> str3[<span class="number">12</span>];</span><br><span class="line">   <span class="keyword">int</span>  len ;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 复制 str1 到 str3 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>(str3, str1);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;strcpy( str3, str1) :  %s\n&quot;</span>, str3 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 连接 str1 和 str2 */</span></span><br><span class="line">   <span class="built_in">strcat</span>( str1, str2);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;strcat( str1, str2):   %s\n&quot;</span>, str1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 连接后，str1 的总长度 */</span></span><br><span class="line">   len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;strlen(str1) :  %d\n&quot;</span>, len );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>( str3, str1) :  Hello</span><br><span class="line"><span class="built_in">strcat</span>( str1, str2):   HelloWorld</span><br><span class="line"><span class="built_in">strlen</span>(str1) :  <span class="number">10</span></span><br></pre></td></tr></table></figure><h1>C 结构体</h1><p>C 数组允许定义可存储相同类型数据项的变量，<strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p><p>结构用于表示一条记录，假设您想要跟踪图书馆中书本的动态，您可能需要跟踪每本书的下列属性：</p><ul><li>Title</li><li>Author</li><li>Subject</li><li>Book ID</li></ul><h2 id="定义结构"><a class="header-anchor" href="#定义结构">¶</a>定义结构</h2><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span> </span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    member-<span class="built_in">list</span> </span><br><span class="line">    member-<span class="built_in">list</span>  </span><br><span class="line">    ...</span><br><span class="line">&#125; variable-<span class="built_in">list</span> ;</span><br></pre></td></tr></table></figure><p><strong>tag</strong> 是结构体标签。</p><p><strong>member-list</strong> 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</p><p><strong>variable-list</strong> 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。下面是声明 Book 结构的方式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125; book;</span><br></pre></td></tr></table></figure><p>在一般情况下，<strong>tag、member-list、variable-list</strong> 这 3 部分至少要出现 2 个。以下为实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span></span><br><span class="line"><span class="comment">//同时又声明了结构体变量s1</span></span><br><span class="line"><span class="comment">//这个结构体并没有标明其标签</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125; s1;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span></span><br><span class="line"><span class="comment">//结构体的标签被命名为SIMPLE,没有声明变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">t1</span>, <span class="title">t2</span>[20], *<span class="title">t3</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//也可以用typedef创建新类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125; Simple2;</span><br><span class="line"><span class="comment">//现在可以用Simple2作为类型声明新的结构体变量</span></span><br><span class="line">Simple2 u1, u2[<span class="number">20</span>], *u3;</span><br></pre></td></tr></table></figure><p>在上面的声明中，第一个和第二声明被编译器当作两个完全不同的类型，即使他们的成员列表是一样的，如果令 t3=&amp;s1，则是非法的。</p><p>结构体的成员可以包含其他结构体，也可以包含指向自己结构体类型的指针，而通常这种指针的应用是为了实现一些更高级的数据结构如链表和树等。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此结构体的声明包含了其他的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">COMPLEX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">a</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此结构体的声明包含了指向自己类型的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">next_node</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>;</span>    <span class="comment">//对结构体B进行不完整声明</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//结构体A中包含指向结构体B的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">B</span> *<span class="title">partner</span>;</span></span><br><span class="line">    <span class="comment">//other members;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> *<span class="title">partner</span>;</span></span><br><span class="line">    <span class="comment">//other members;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结构体变量的初始化"><a class="header-anchor" href="#结构体变量的初始化">¶</a>结构体变量的初始化</h2><p>和其它类型变量一样，对结构体变量可以在定义时指定初始值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125; book = &#123;<span class="string">&quot;C 语言&quot;</span>, <span class="string">&quot;RUNOOB&quot;</span>, <span class="string">&quot;编程语言&quot;</span>, <span class="number">123456</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;</span>, book.title, book.author, book.subject, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行输出结果为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">title : C 语言</span><br><span class="line">author: RUNOOB</span><br><span class="line">subject: 编程语言</span><br><span class="line">book_id: <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="访问结构成员"><a class="header-anchor" href="#访问结构成员">¶</a>访问结构成员</h2><p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。您可以使用 <strong>struct</strong> 关键字来定义结构类型的变量。下面的实例演示了结构的用法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book1</span>;</span>        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book2</span>;</span>        <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book1 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C Programming&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Nuha Ali&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;C Programming Tutorial&quot;</span>);</span><br><span class="line">   Book1.book_id = <span class="number">6495407</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book2 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;Telecom Billing&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Zara Ali&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;Telecom Billing Tutorial&quot;</span>);</span><br><span class="line">   Book2.book_id = <span class="number">6495700</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出 Book1 信息 */</span></span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 1 title : %s\n&quot;</span>, Book1.title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 1 author : %s\n&quot;</span>, Book1.author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 1 subject : %s\n&quot;</span>, Book1.subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 1 book_id : %d\n&quot;</span>, Book1.book_id);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出 Book2 信息 */</span></span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 2 title : %s\n&quot;</span>, Book2.title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 2 author : %s\n&quot;</span>, Book2.author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 2 subject : %s\n&quot;</span>, Book2.subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book 2 book_id : %d\n&quot;</span>, Book2.book_id);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Book <span class="number">1</span> title : C Programming</span><br><span class="line">Book <span class="number">1</span> author : Nuha Ali</span><br><span class="line">Book <span class="number">1</span> subject : C Programming Tutorial</span><br><span class="line">Book <span class="number">1</span> book_id : <span class="number">6495407</span></span><br><span class="line">Book <span class="number">2</span> title : Telecom Billing</span><br><span class="line">Book <span class="number">2</span> author : Zara Ali</span><br><span class="line">Book <span class="number">2</span> subject : Telecom Billing Tutorial</span><br><span class="line">Book <span class="number">2</span> book_id : <span class="number">6495700</span></span><br></pre></td></tr></table></figure><h2 id="结构作为函数参数"><a class="header-anchor" href="#结构作为函数参数">¶</a>结构作为函数参数</h2><p>可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。可以使用上面实例中的方式来访问结构变量：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book1</span>;</span>        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book2</span>;</span>        <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book1 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C Programming&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Nuha Ali&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;C Programming Tutorial&quot;</span>);</span><br><span class="line">   Book1.book_id = <span class="number">6495407</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book2 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;Telecom Billing&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Zara Ali&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;Telecom Billing Tutorial&quot;</span>);</span><br><span class="line">   Book2.book_id = <span class="number">6495700</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出 Book1 信息 */</span></span><br><span class="line">   printBook( Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 输出 Book2 信息 */</span></span><br><span class="line">   printBook( Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book title : %s\n&quot;</span>, book.title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book author : %s\n&quot;</span>, book.author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book subject : %s\n&quot;</span>, book.subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Book title : C Programming</span><br><span class="line">Book author : Nuha Ali</span><br><span class="line">Book subject : C Programming Tutorial</span><br><span class="line">Book book_id : 6495407</span><br><span class="line">Book title : Telecom Billing</span><br><span class="line">Book author : Zara Ali</span><br><span class="line">Book subject : Telecom Billing Tutorial</span><br><span class="line">Book book_id : 6495700</span><br></pre></td></tr></table></figure><h2 id="指向结构的指针"><a class="header-anchor" href="#指向结构的指针">¶</a>指向结构的指针</h2><p>可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> *<span class="title">struct_pointer</span>;</span></span><br></pre></td></tr></table></figure><p>现在，可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">struct_pointer = &amp;Book1;</span><br></pre></td></tr></table></figure><p>为了使用指向该结构的指针访问结构的成员，必须使用 -&gt; 运算符，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">struct_pointer-&gt;title;</span><br></pre></td></tr></table></figure><p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books *book )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book1</span>;</span>        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book2</span>;</span>        <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book1 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C Programming&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Nuha Ali&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;C Programming Tutorial&quot;</span>);</span><br><span class="line">   Book1.book_id = <span class="number">6495407</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* Book2 详述 */</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;Telecom Billing&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Zara Ali&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;Telecom Billing Tutorial&quot;</span>);</span><br><span class="line">   Book2.book_id = <span class="number">6495700</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span></span><br><span class="line">   printBook( &amp;Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span></span><br><span class="line">   printBook( &amp;Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books *book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book title : %s\n&quot;</span>, book-&gt;title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book author : %s\n&quot;</span>, book-&gt;author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book subject : %s\n&quot;</span>, book-&gt;subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Book book_id : %d\n&quot;</span>, book-&gt;book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Book title : C Programming</span><br><span class="line">Book author : Nuha Ali</span><br><span class="line">Book subject : C Programming Tutorial</span><br><span class="line">Book book_id : <span class="number">6495407</span></span><br><span class="line">Book title : Telecom Billing</span><br><span class="line">Book author : Zara Ali</span><br><span class="line">Book subject : Telecom Billing Tutorial</span><br><span class="line">Book book_id : <span class="number">6495700</span></span><br></pre></td></tr></table></figure><h2 id="位域"><a class="header-anchor" href="#位域">¶</a>位域</h2><p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为&quot;位域&quot;或&quot;位段&quot;。</p><p>所谓&quot;位域&quot;是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。</p><p>典型的实例：</p><ul><li>用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。</li><li>读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。</li></ul><h3 id="位域的定义和位域变量的说明"><a class="header-anchor" href="#位域的定义和位域变量的说明">¶</a>位域的定义和位域变量的说明</h3><p>位域定义与结构定义相仿，其形式为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 位域结构名 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"> 位域列表</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中位域列表的形式为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">类型说明符 位域名: 位域长度 </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bs</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">6</span>;</span><br><span class="line">&#125;data;</span><br></pre></td></tr></table></figure><blockquote><p>说明 data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。</p></blockquote><p>再来看一个实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">packed_struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f1:<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f2:<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f3:<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f4:<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> type:<span class="number">4</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> my_int:<span class="number">9</span>;</span><br><span class="line">&#125; pack;</span><br></pre></td></tr></table></figure><blockquote><p>在这里，packed_struct 包含了 6 个成员：四个 1 位的标识符 f1…f4、一个 4 位的 type 和一个 9 位的 my_int。</p></blockquote><p><strong>对于位域的定义尚有以下几点说明：</strong></p><ul><li><p>一个位域存储在同一个字节中，如一个字节所剩空间不够存放另一位域时，则会从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bs</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> a:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>  :<span class="number">4</span>;    <span class="comment">/* 空域 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> b:<span class="number">4</span>;    <span class="comment">/* 从下一单元开始存放 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> c:<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个位域定义中，a 占第一字节的 4 位，后 4 位填 0 表示不使用，b 从第二字节开始，占用 4 位，c 占用 4 位。</p></li><li><p>由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中。</p></li><li><p>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>  :<span class="number">2</span>;    <span class="comment">/* 该 2 位不能使用 */</span></span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>从以上分析可以看出，位域在本质上就是一种结构类型，不过其成员是按二进位分配的。</p></blockquote><h3 id="位域的使用"><a class="header-anchor" href="#位域的使用">¶</a>位域的使用</h3><p>位域的使用和结构成员的使用相同，其一般形式为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">位域变量名.位域名</span><br><span class="line">位域变量名-&gt;位域名</span><br></pre></td></tr></table></figure><p>位域允许用各种格式输出。</p><p>请看下面的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bs</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> a:<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> b:<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> c:<span class="number">4</span>;</span><br><span class="line">    &#125; bit,*pbit;</span><br><span class="line">    bit.a=<span class="number">1</span>;    <span class="comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span></span><br><span class="line">    bit.b=<span class="number">7</span>;    <span class="comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span></span><br><span class="line">    bit.c=<span class="number">15</span>;    <span class="comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,bit.a,bit.b,bit.c);    <span class="comment">/* 以整型量格式输出三个域的内容 */</span></span><br><span class="line">    pbit=&amp;bit;    <span class="comment">/* 把位域变量 bit 的地址送给指针变量 pbit */</span></span><br><span class="line">    pbit-&gt;a=<span class="number">0</span>;    <span class="comment">/* 用指针方式给位域 a 重新赋值，赋为 0 */</span></span><br><span class="line">    pbit-&gt;b&amp;=<span class="number">3</span>;    <span class="comment">/* 使用了复合的位运算符 &quot;&amp;=&quot;，相当于：pbit-&gt;b=pbit-&gt;b&amp;3，位域 b 中原有值为 7，与 3 作按位与运算的结果为 3（111&amp;011=011，十进制值为 3） */</span></span><br><span class="line">    pbit-&gt;c|=<span class="number">1</span>;    <span class="comment">/* 使用了复合位运算符&quot;|=&quot;，相当于：pbit-&gt;c=pbit-&gt;c|1，其结果为 15 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,pbit-&gt;a,pbit-&gt;b,pbit-&gt;c);    <span class="comment">/* 用指针方式输出了这三个域的值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上例程序中定义了位域结构 bs，三个位域为 a、b、c。说明了 bs 类型的变量 bit 和指向 bs 类型的指针变量 pbit。这表示位域也是可以使用指针的。</p></blockquote><h1>C 共用体</h1><p><strong>共用体</strong>是一种特殊的数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</p><h2 id="定义共用体"><a class="header-anchor" href="#定义共用体">¶</a>定义共用体</h2><p>为了定义共用体，您必须使用 <strong>union</strong> 语句，方式与定义结构类似。union 语句定义了一个新的数据类型，带有多个成员。union 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> [<span class="keyword">union</span> tag]</span><br><span class="line">&#123;</span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125; [one <span class="keyword">or</span> more <span class="keyword">union</span> variables];</span><br></pre></td></tr></table></figure><p><strong>union tag</strong> 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。下面定义一个名为 Data 的共用体类型，有三个成员 i、f 和 str：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125; data;</span><br></pre></td></tr></table></figure><p>现在，<strong>Data</strong> 类型的变量可以存储一个整数、一个浮点数，或者一个字符串。这意味着一个变量（相同的内存位置）可以存储多个多种类型的数据。您可以根据需要在一个共用体内使用任何内置的或者用户自定义的数据类型。</p><p>共用体占用的内存应足够存储共用体中最大的成员。例如，在上面的实例中，Data 将占用 20 个字节的内存空间，因为在各个成员中，字符串所占用的空间是最大的。下面的实例将显示上面的共用体占用的总内存大小：</p><div class='tip success'><p>由于data占用最大的字节数是char str[20]占用20个字节<p></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">union</span> Data data;        </span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Memory size occupied by data : %d\n&quot;</span>, <span class="keyword">sizeof</span>(data));</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Memory size occupied by data : <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="访问共用体成员"><a class="header-anchor" href="#访问共用体成员">¶</a>访问共用体成员</h2><p>为了访问共用体的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是共用体变量名称和我们要访问的共用体成员之间的一个句号。您可以使用 <strong>union</strong> 关键字来定义共用体类型的变量。下面的实例演示了共用体的用法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">union</span> Data data;        </span><br><span class="line"> </span><br><span class="line">   data.i = <span class="number">10</span>;</span><br><span class="line">   data.f = <span class="number">220.5</span>;</span><br><span class="line">   <span class="built_in">strcpy</span>( data.str, <span class="string">&quot;C Programming&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.i : %d\n&quot;</span>, data.i);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.f : %f\n&quot;</span>, data.f);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.str : %s\n&quot;</span>, data.str);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">data.i : <span class="number">1917853763</span></span><br><span class="line">data.f : <span class="number">4122360580327794860452759994368.000000</span></span><br><span class="line">data.str : C Programming</span><br></pre></td></tr></table></figure><p>在这里，可以看到共用体的 <strong>i</strong> 和 <strong>f</strong> 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 <strong>str</strong> 成员能够完好输出的原因。现在让我们再来看一个相同的实例，这次在同一时间只使用一个变量，这也演示了使用共用体的主要目的:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">union</span> Data data;        </span><br><span class="line"> </span><br><span class="line">   data.i = <span class="number">10</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.i : %d\n&quot;</span>, data.i);</span><br><span class="line">   </span><br><span class="line">   data.f = <span class="number">220.5</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.f : %f\n&quot;</span>, data.f);</span><br><span class="line">   <span class="comment">//strcpy是字符串复制，接受两个参数,一个是被复制字符串,另一个新字符串</span></span><br><span class="line">   <span class="built_in">strcpy</span>( data.str, <span class="string">&quot;C Programming&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;data.str : %s\n&quot;</span>, data.str);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">data.i : <span class="number">10</span></span><br><span class="line">data.f : <span class="number">220.500000</span></span><br><span class="line">data.str : C Programming</span><br></pre></td></tr></table></figure><blockquote><p>在这里，所有的成员都能完好输出，因为同一时间只用到一个成员。</p></blockquote><h1>C 位域</h1><p>如果程序的结构中包含多个开关量，只有 TRUE/FALSE 变量，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> widthValidated;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> heightValidated;</span><br><span class="line">&#125; status;</span><br></pre></td></tr></table></figure><p>这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1。在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，可以定义变量的宽度来告诉编译器，将只使用这些字节。例如，上面的结构可以重写成：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> widthValidated : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> heightValidated : <span class="number">1</span>;</span><br><span class="line">&#125; status;</span><br></pre></td></tr></table></figure><p>现在，上面的结构中，status 变量将占用 4 个字节的内存空间，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 status 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节。让我们看看下面的实例来理解这个概念：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 定义简单的结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> widthValidated;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> heightValidated;</span><br><span class="line">&#125; status1;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 定义位域结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> widthValidated : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> heightValidated : <span class="number">1</span>;</span><br><span class="line">&#125; status2;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Memory size occupied by status1 : %d\n&quot;</span>, <span class="keyword">sizeof</span>(status1));</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Memory size occupied by status2 : %d\n&quot;</span>, <span class="keyword">sizeof</span>(status2));</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Memory size occupied by status1 : <span class="number">8</span></span><br><span class="line">Memory size occupied by status2 : <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="位域声明"><a class="header-anchor" href="#位域声明">¶</a>位域声明</h2><p>在结构内声明位域的形式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  type [member_name] : width ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是有关位域中变量元素的描述：</p><table><thead><tr><th style="text-align:left">元素</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">只能为 int(整型)，unsigned int(无符号整型)，signed int(有符号整型) 三种类型，决定了如何解释位域的值。</td></tr><tr><td style="text-align:left">member_name</td><td style="text-align:left">位域的名称。</td></tr><tr><td style="text-align:left">width</td><td style="text-align:left">位域中位的数量。宽度必须小于或等于指定类型的位宽度。</td></tr></tbody></table><p>带有预定义宽度的变量被称为<strong>位域</strong>。位域可以存储多于 1 位的数，例如，需要一个变量来存储从 0 到 7 的值，您可以定义一个宽度为 3 位的位域，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> age : <span class="number">3</span>;</span><br><span class="line">&#125; Age;</span><br></pre></td></tr></table></figure><p>上面的结构定义指示 C 编译器，age 变量将只使用 3 位来存储这个值，如果试图使用超过 3 位，则无法完成。让我们来看下面的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> age : <span class="number">3</span>;</span><br><span class="line">&#125; Age;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Age.age = <span class="number">4</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Sizeof( Age ) : %d\n&quot;</span>, <span class="keyword">sizeof</span>(Age) );</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Age.age : %d\n&quot;</span>, Age.age );</span><br><span class="line"> </span><br><span class="line">   Age.age = <span class="number">7</span>;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Age.age : %d\n&quot;</span>, Age.age );</span><br><span class="line"> </span><br><span class="line">   Age.age = <span class="number">8</span>; <span class="comment">// 二进制表示为 1000 有四位，超出</span></span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Age.age : %d\n&quot;</span>, Age.age );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译时，它会带有警告，当上面的代码被执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Sizeof( Age ) : <span class="number">4</span></span><br><span class="line">Age.age : <span class="number">4</span></span><br><span class="line">Age.age : <span class="number">7</span></span><br><span class="line">Age.age : <span class="number">0</span></span><br></pre></td></tr></table></figure><h1>C typedef</h1><p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 <strong>BYTE</strong>：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BYTE;</span><br></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BYTE  b1, b2;</span><br></pre></td></tr></table></figure><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但也可以使用小写字母，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> byte;</span><br></pre></td></tr></table></figure><p>也可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125; Book;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Book book;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>( book.title, <span class="string">&quot;C 教程&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( book.author, <span class="string">&quot;Runoob&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( book.subject, <span class="string">&quot;编程语言&quot;</span>);</span><br><span class="line">   book.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书标题 : %s\n&quot;</span>, book.title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书作者 : %s\n&quot;</span>, book.author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书类目 : %s\n&quot;</span>, book.subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书 ID : %d\n&quot;</span>, book.book_id);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">书标题 : C 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 编程语言</span><br><span class="line">书 ID : <span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="typedef-vs-define"><a class="header-anchor" href="#typedef-vs-define">¶</a>typedef vs #define</h2><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><strong>typedef</strong> 仅限于为类型定义符号名称，<strong>#define</strong> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li><li><strong>typedef</strong> 是由编译器执行解释的，<strong>#define</strong> 语句是由预编译器进行处理的。</li></ul><p>下面是 #define 的最简单的用法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;TRUE 的值: %d\n&quot;</span>, TRUE);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;FALSE 的值: %d\n&quot;</span>, FALSE);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TRUE 的值: <span class="number">1</span></span><br><span class="line">FALSE 的值: <span class="number">0</span></span><br></pre></td></tr></table></figure><h1>C 输入 &amp; 输出</h1><p>当我们提到<strong>输入</strong>时，这意味着要向程序填充一些数据。输入可以是以文件的形式或从命令行中进行。C 语言提供了一系列内置的函数来读取给定的输入，并根据需要填充到程序中。</p><p>当我们提到<strong>输出</strong>时，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。C 语言提供了一系列内置的函数来输出数据到计算机屏幕上和保存数据到文本文件或二进制文件中。</p><h2 id="标准文件"><a class="header-anchor" href="#标准文件">¶</a>标准文件</h2><p>C 语言把所有的设备都当作文件。所以设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕。</p><table><thead><tr><th style="text-align:left">标准文件</th><th style="text-align:left">文件指针</th><th style="text-align:left">设备</th></tr></thead><tbody><tr><td style="text-align:left">标准输入</td><td style="text-align:left">stdin</td><td style="text-align:left">键盘</td></tr><tr><td style="text-align:left">标准输出</td><td style="text-align:left">stdout</td><td style="text-align:left">屏幕</td></tr><tr><td style="text-align:left">标准错误</td><td style="text-align:left">stderr</td><td style="text-align:left">您的屏幕</td></tr></tbody></table><p>文件指针是访问文件的方式，本节将讲解如何从屏幕读取值以及如何把结果输出到屏幕上。</p><p>C 语言中的 I/O (输入/输出) 通常使用 printf() 和 scanf() 两个函数。</p><p>scanf() 函数用于从标准输入（键盘）读取并格式化， printf() 函数发送格式化输出到标准输出（屏幕）。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      // 执行 printf() 函数需要该库</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;菜鸟教程&quot;</span>);  <span class="comment">//显示引号中的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上程序，输出结果为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">菜鸟教程</span><br></pre></td></tr></table></figure><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) and <strong>#include</strong> 是一个预处理命令，用来引入头文件。 当编译器遇到 <strong>printf()</strong> 函数时，如果没有找到 <strong>stdio.h</strong> 头文件，会发生编译错误。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> testInteger = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number = %d&quot;</span>, testInteger);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上程序，输出结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number &#x3D; 5</span><br></pre></td></tr></table></figure><p>在 printf() 函数的引号中使用 “%d” (整型) 来匹配整型变量 testInteger 并输出到屏幕。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number: &quot;</span>);</span><br><span class="line">    <span class="comment">// %f 匹配浮点型数据</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Value = %f&quot;</span>, f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getchar-putchar-函数"><a class="header-anchor" href="#getchar-putchar-函数">¶</a>getchar() &amp; putchar() 函数</h2><p><strong>int getchar(void)</strong> 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。可以在循环内使用这个方法，以便从屏幕上读取多个字符。</p><p><strong>int putchar(int c)</strong> 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。可以在循环内使用这个方法，以便在屏幕上输出多个字符。</p><p>请看下面的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> c;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Enter a value :&quot;</span>);</span><br><span class="line">   c = getchar( );</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;\nYou entered: &quot;</span>);</span><br><span class="line">   <span class="built_in">putchar</span>( c );</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并只会读取一个单一的字符，显示如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out</span><br><span class="line">Enter a value :runoob</span><br><span class="line"></span><br><span class="line">You entered: r</span><br></pre></td></tr></table></figure><h2 id="gets-puts-函数"><a class="header-anchor" href="#gets-puts-函数">¶</a>gets() &amp; puts() 函数</h2><p><strong>char *gets(char *s)</strong> 函数从 <strong>stdin</strong> 读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。</p><p><strong>int puts(const char *s)</strong> 函数把字符串 s 和一个尾随的换行符写入到 <strong>stdout</strong>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Enter a value :&quot;</span>);</span><br><span class="line">   gets( str );</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;\nYou entered: &quot;</span>);</span><br><span class="line">   <span class="built_in">puts</span>( str );</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当输入一个文本并按下回车键时，程序会继续并读取一整行直到该行结束，显示如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out</span><br><span class="line">Enter a value :runoob</span><br><span class="line"></span><br><span class="line">You entered: runoob</span><br></pre></td></tr></table></figure><h2 id="scanf-和-printf-函数"><a class="header-anchor" href="#scanf-和-printf-函数">¶</a>scanf() 和 printf() 函数</h2><p><strong>int scanf(const char *format, …)</strong> 函数从标准输入流 <strong>stdin</strong> 读取输入，并根据提供的 <strong>format</strong> 来浏览输入。</p><p><strong>int printf(const char *format, …)</strong> 函数把输出写入到标准输出流 <strong>stdout</strong> ，并根据提供的格式产生输出。</p><p><strong>format</strong> 可以是一个简单的常量字符串，但是您可以分别指定 %s、%d、%c、%f 等来输出或读取字符串、整数、字符或浮点数。还有许多其他可用的格式选项，可以根据需要使用。如需了解完整的细节，可以查看这些函数的参考手册。现在让我们通过下面这个简单的实例来加深理解：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Enter a value :&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, str, &amp;i);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;\nYou entered: %s %d &quot;</span>, str, i);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会等待输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取输入，显示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.&#x2F;a.out</span><br><span class="line">Enter a value :runoob 123</span><br><span class="line"></span><br><span class="line">You entered: runoob 123 </span><br></pre></td></tr></table></figure><blockquote><p>在这里，应当指出的是，scanf() 期待输入的格式与给出的 %s 和 %d 相同，这意味着您必须提供有效的输入，比如 “string integer”，如果提供的是 “string string” 或 “integer integer”，它会被认为是错误的输入。另外，在读取字符串时，只要遇到一个空格，scanf() 就会停止读取，所以 “this is test” 对 scanf() 来说是三个字符串。</p></blockquote><h1>C 文件读写</h1><h2 id="打开文件"><a class="header-anchor" href="#打开文件">¶</a>打开文件</h2><p>可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。下面是这个函数调用的原型：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * filename, <span class="keyword">const</span> <span class="keyword">char</span> * mode )</span></span>;</span><br></pre></td></tr></table></figure><p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">r</td><td style="text-align:left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文本文件，允许读写文件。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</span><br></pre></td></tr></table></figure><h2 id="关闭文件"><a class="header-anchor" href="#关闭文件">¶</a>关闭文件</h2><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int fclose( FILE *fp );</span><br></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量。</p><p>C 标准库提供了各种函数来按字符或者以固定长度字符串的形式读写文件。</p><h2 id="写入文件"><a class="header-anchor" href="#写入文件">¶</a>写入文件</h2><p>下面是把字符写入到流中的最简单的函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">( <span class="keyword">int</span> c, FILE *fp )</span></span>;</span><br></pre></td></tr></table></figure><p>函数 <strong>fputc()</strong> 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 <strong>EOF</strong>。您可以使用下面的函数来把一个以 null 结尾的字符串写入到流中：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *s, FILE *fp )</span></span>;</span><br></pre></td></tr></table></figure><p>函数 <strong>fputs()</strong> 把字符串 <strong>s</strong> 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 <strong>EOF</strong>。您也可以使用 <strong>int fprintf(FILE *fp,const char *format, …)</strong> 函数来写把一个字符串写入到文件中。尝试下面的实例：</p><blockquote><p>**注意：**请确保您有可用的 <strong>tmp</strong> 目录，如果不存在该目录，则需要在您的计算机上先创建该目录。</p><p><strong>/tmp</strong> 一般是 Linux 系统上的临时目录，如果你在 Windows 系统上运行，则需要修改为本地环境中已存在的目录，例如: <strong>C:\tmp</strong>、<strong>D:\tmp</strong>等。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;/tmp/test.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(fp, <span class="string">&quot;This is testing for fprintf...\n&quot;</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;This is testing for fputs...\n&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会在 /tmp 目录中创建一个新的文件 <strong>test.txt</strong>，并使用两个不同的函数写入两行。接下来让我们来读取这个文件。</p><h2 id="读取文件"><a class="header-anchor" href="#读取文件">¶</a>读取文件</h2><p>下面是从文件读取单个字符的最简单的函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span><span class="params">( FILE * fp )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 <strong>EOF</strong>。下面的函数允许您从流中读取一个字符串：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">( <span class="keyword">char</span> *buf, <span class="keyword">int</span> n, FILE *fp )</span></span>;</span><br></pre></td></tr></table></figure><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;/tmp/test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;1: %s\n&quot;</span>, buff );</span><br><span class="line"> </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;2: %s\n&quot;</span>, buff );</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">255</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;3: %s\n&quot;</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: This</span><br><span class="line">2: is testing for fprintf...</span><br><span class="line"></span><br><span class="line">3: This is testing for fputs...</span><br></pre></td></tr></table></figure><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>This</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h2 id="二进制-I-O-函数"><a class="header-anchor" href="#二进制-I-O-函数">¶</a>二进制 I/O 函数</h2><p>下面两个函数用于二进制输入和输出：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fread</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size_of_elements, </span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">size_t</span> number_of_elements, FILE *a_file)</span></span>;</span><br><span class="line">              </span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size_of_elements, </span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">size_t</span> number_of_elements, FILE *a_file)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。</p></blockquote><h1>C 预处理器</h1><p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令：</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">#define</td><td style="text-align:left">定义宏</td></tr><tr><td style="text-align:left">#include</td><td style="text-align:left">包含一个源代码文件</td></tr><tr><td style="text-align:left">#undef</td><td style="text-align:left">取消已定义的宏</td></tr><tr><td style="text-align:left">#ifdef</td><td style="text-align:left">如果宏已经定义，则返回真</td></tr><tr><td style="text-align:left">#ifndef</td><td style="text-align:left">如果宏没有定义，则返回真</td></tr><tr><td style="text-align:left">#if</td><td style="text-align:left">如果给定条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#else</td><td style="text-align:left">#if 的替代方案</td></tr><tr><td style="text-align:left">#elif</td><td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#endif</td><td style="text-align:left">结束一个 #if……#else 条件编译块</td></tr><tr><td style="text-align:left">#error</td><td style="text-align:left">当遇到标准错误时，输出错误消息</td></tr><tr><td style="text-align:left">#pragma</td><td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table><h2 id="预处理器实例"><a class="header-anchor" href="#预处理器实例">¶</a>预处理器实例</h2><p>分析下面的实例来理解不同的指令。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ARRAY_LENGTH 20</span></span><br></pre></td></tr></table></figure><p>这个指令告诉 CPP 把所有的 MAX_ARRAY_LENGTH 替换为 20。使用 <em>#define</em> 定义常量来增强可读性。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>这些指令告诉 CPP 从<strong>系统库</strong>中获取 stdio.h，并添加文本到当前的源文件中。下一行告诉 CPP 从本地目录中获取 <strong>myheader.h</strong>，并添加内容到当前的源文件中。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span>  FILE_SIZE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 42</span></span><br></pre></td></tr></table></figure><p>这个指令告诉 CPP 取消已定义的 FILE_SIZE，并定义它为 42。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MESSAGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> MESSAGE <span class="meta-string">&quot;You wish!&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这个指令告诉 CPP 只有当 MESSAGE 未定义时，才定义 MESSAGE。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">   <span class="comment">/* Your debugging statements here */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这个指令告诉 CPP 如果定义了 DEBUG，则执行处理语句。在编译时，如果您向 gcc 编译器传递了 <em>-DDEBUG</em> 开关量，这个指令就非常有用。它定义了 DEBUG，您可以在编译期间随时开启或关闭调试。</p><h2 id="预定义宏"><a class="header-anchor" href="#预定义宏">¶</a>预定义宏</h2><p>ANSI C 定义了许多宏。在编程中您可以使用这些宏，但是不能直接修改这些预定义的宏。</p><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>DATE</strong></td><td style="text-align:left">当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。</td></tr><tr><td style="text-align:left"><strong>TIME</strong></td><td style="text-align:left">当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。</td></tr><tr><td style="text-align:left"><strong>FILE</strong></td><td style="text-align:left">这会包含当前文件名，一个字符串常量。</td></tr><tr><td style="text-align:left"><strong>LINE</strong></td><td style="text-align:left">这会包含当前行号，一个十进制常量。</td></tr><tr><td style="text-align:left"><strong>STDC</strong></td><td style="text-align:left">当编译器以 ANSI 标准编译时，则定义为 1。</td></tr></tbody></table><p>让我们来尝试下面的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;File :%s\n&quot;</span>, __FILE__ );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Date :%s\n&quot;</span>, __DATE__ );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Time :%s\n&quot;</span>, __TIME__ );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Line :%d\n&quot;</span>, __LINE__ );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;ANSI :%d\n&quot;</span>, __STDC__ );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码（在文件 <strong>test.c</strong> 中）被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">File :test.c</span><br><span class="line">Date :Jun <span class="number">2</span> <span class="number">2012</span></span><br><span class="line">Time :<span class="number">03</span>:<span class="number">36</span>:<span class="number">24</span></span><br><span class="line">Line :<span class="number">8</span></span><br><span class="line">ANSI :<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="预处理器运算符"><a class="header-anchor" href="#预处理器运算符">¶</a>预处理器运算符</h2><p>C 预处理器提供了下列的运算符来帮助您创建宏：</p><h5 id="宏延续运算符（-）"><a class="header-anchor" href="#宏延续运算符（-）">¶</a>宏延续运算符（\）</h5><p>一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\）。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  message_for(a, b)  \</span></span><br><span class="line">    <span class="built_in">printf</span>(#a <span class="string">&quot; and &quot;</span> #b <span class="string">&quot;: We love you!\n&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串常量化运算符（-）"><a class="header-anchor" href="#字符串常量化运算符（-）">¶</a>字符串常量化运算符（#）</h5><p>在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  message_for(a, b)  \</span></span><br><span class="line">    <span class="built_in">printf</span>(#a <span class="string">&quot; and &quot;</span> #b <span class="string">&quot;: We love you!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   message_for(Carole, Debra);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Carole <span class="keyword">and</span> Debra: We love you!</span><br></pre></td></tr></table></figure><h5 id="标记粘贴运算符（-）"><a class="header-anchor" href="#标记粘贴运算符（-）">¶</a>标记粘贴运算符（##）</h5><p>宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tokenpaster(n) printf (<span class="meta-string">&quot;token&quot;</span> #n <span class="meta-string">&quot; = %d&quot;</span>, token##n)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> token34 = <span class="number">40</span>;</span><br><span class="line">   </span><br><span class="line">   tokenpaster(<span class="number">34</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">token34 = <span class="number">40</span></span><br></pre></td></tr></table></figure><p>这是怎么发生的，因为这个实例会从编译器产生下列的实际输出：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;token34 = %d&quot;</span>, token34);</span><br></pre></td></tr></table></figure><p>这个实例演示了 token##n 会连接到 token34 中，在这里，我们使用了<strong>字符串常量化运算符（#）<strong>和</strong>标记粘贴运算符（##）</strong>。</p><h5 id="defined-运算符"><a class="header-anchor" href="#defined-运算符">¶</a>defined() 运算符</h5><p>预处理器 <strong>defined</strong> 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 #define 定义过。如果指定的标识符已定义，则值为真（非零）。如果指定的标识符未定义，则值为假（零）。下面的实例演示了 defined() 运算符的用法：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined (MESSAGE)</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> MESSAGE <span class="meta-string">&quot;You wish!&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Here is the message: %s\n&quot;</span>, MESSAGE);  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Here is the message: You wish!</span><br></pre></td></tr></table></figure><h2 id="参数化的宏"><a class="header-anchor" href="#参数化的宏">¶</a>参数化的宏</h2><p>CPP 一个强大的功能是可以使用参数化的宏来模拟函数。例如，下面的代码是计算一个数的平方：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用宏重写上面的代码，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> square(x) ((x) * (x))</span></span><br></pre></td></tr></table></figure><p>在使用带有参数的宏之前，必须使用 <strong>#define</strong> 指令定义。参数列表是括在圆括号内，且必须紧跟在宏名称的后边。宏名称和左圆括号之间不允许有空格。例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(x,y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Max between 20 and 10 is %d\n&quot;</span>, MAX(<span class="number">10</span>, <span class="number">20</span>));  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Max between <span class="number">20</span> <span class="keyword">and</span> <span class="number">10</span> is <span class="number">20</span></span><br></pre></td></tr></table></figure><h1>C 头文件</h1><p>头文件是扩展名为 <strong>.h</strong> 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。</p><p>在程序中要使用头文件，需要使用 C 预处理指令 <strong>#include</strong> 来引用它。前面我们已经看过 <strong>stdio.h</strong> 头文件，它是编译器自带的头文件。</p><p>引用头文件相当于复制头文件的内容，但是我们不会直接在源文件中复制头文件的内容，因为这么做很容易出错，特别在程序是由多个源文件组成的时候。</p><p>A simple practice in C 或 C++ 程序中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。</p><h2 id="引用头文件的语法"><a class="header-anchor" href="#引用头文件的语法">¶</a>引用头文件的语法</h2><p>使用预处理指令 <strong>#include</strong> 可以引用用户和系统头文件。它的形式有以下两种：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;file&gt;</span></span></span><br></pre></td></tr></table></figure><p>这种形式用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;file&quot;</span></span></span><br></pre></td></tr></table></figure><p>这种形式用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><h2 id="引用头文件的操作"><a class="header-anchor" href="#引用头文件的操作">¶</a>引用头文件的操作</h2><p><strong>#include</strong> 指令会指示 C 预处理器浏览指定的文件作为输入。预处理器的输出包含了已经生成的输出，被引用文件生成的输出以及 <strong>#include</strong> 指令之后的文本输出。例如，如果您有一个头文件 header.h，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">test</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>和一个使用了头文件的主程序 <em>program.c</em>，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;header.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">puts</span> (test ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会看到如下的代码信息：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">test</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">puts</span> (test ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只引用一次头文件"><a class="header-anchor" href="#只引用一次头文件">¶</a>只引用一次头文件</h2><p>如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEADER_FILE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEADER_FILE</span></span><br><span class="line"></span><br><span class="line">the entire header file file</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这种结构就是通常所说的包装器 <strong>#ifndef</strong>。当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。</p><h2 id="有条件引用"><a class="header-anchor" href="#有条件引用">¶</a>有条件引用</h2><p>有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。您可以通过一系列条件来实现这点，如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_1</span></span><br><span class="line">   <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;system_1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SYSTEM_2</span></span><br><span class="line">   <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;system_2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SYSTEM_3</span></span><br><span class="line">   ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。这就是所谓的<strong>有条件引用</strong>。它不是用头文件的名称作为 <strong>#include</strong> 的直接参数，您只需要使用宏名称代替即可：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_H <span class="meta-string">&quot;system_1.h&quot;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> SYSTEM_H</span></span><br></pre></td></tr></table></figure><p>SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 <strong>#include</strong> 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。</p><h1>C 强制类型转换</h1><p>强制类型转换是把变量从一种类型转换为另一种数据类型。例如，如果您想存储一个 long 类型的值到一个简单的整型中，您需要把 long 类型强制转换为 int 类型。您可以使用<strong>强制类型转换运算符</strong>来把值显式地从一种类型转换为另一种类型，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(type_name) expression</span><br></pre></td></tr></table></figure><p>请看下面的实例，使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">17</span>, count = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">double</span> mean;</span><br><span class="line"> </span><br><span class="line">   mean = (<span class="keyword">double</span>) sum / count;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value of mean : %f\n&quot;</span>, mean );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Value of mean : 3.400000</span><br></pre></td></tr></table></figure><p>这里要注意的是强制类型转换运算符的优先级大于除法，因此 <strong>sum</strong> 的值首先被转换为 <strong>double</strong> 型，然后除以 count，得到一个类型为 double 的值。</p><p>类型转换可以是隐式的，由编译器自动执行，也可以是显式的，通过使用<strong>强制类型转换运算符</strong>来指定。在编程时，有需要类型转换的时候都用上强制类型转换运算符，是一种良好的编程习惯。</p><h2 id="整数提升"><a class="header-anchor" href="#整数提升">¶</a>整数提升</h2><p>整数提升是指把小于 <strong>int</strong> 或 <strong>unsigned int</strong> 的整数类型转换为 <strong>int</strong> 或 <strong>unsigned int</strong> 的过程。请看下面的实例，在 int 中添加一个字符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  i = <span class="number">17</span>;</span><br><span class="line">   <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>; <span class="comment">/* ascii 值是 99 */</span></span><br><span class="line">   <span class="keyword">int</span> sum;</span><br><span class="line"> </span><br><span class="line">   sum = i + c;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value of sum : %d\n&quot;</span>, sum );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Value of sum : 116</span><br></pre></td></tr></table></figure><p>在这里，sum 的值为 116，因为编译器进行了整数提升，在执行实际加法运算时，把 ‘c’ 的值转换为对应的 ascii 值。</p><h2 id="常用的算术转换"><a class="header-anchor" href="#常用的算术转换">¶</a>常用的算术转换</h2><p><strong>常用的算术转换</strong>是隐式地把值强制转换为相同的类型。编译器首先执行<strong>整数提升</strong>，如果操作数类型不同，则它们会被转换为下列层次中出现的最高层次的类型：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916210142.png" alt="Usual Arithmetic Conversion"></p><p>常用的算术转换不适用于赋值运算符、逻辑运算符 &amp;&amp; 和 ||。让我们看看下面的实例来理解这个概念：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  i = <span class="number">17</span>;</span><br><span class="line">   <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>; <span class="comment">/* ascii 值是 99 */</span></span><br><span class="line">   <span class="keyword">float</span> sum;</span><br><span class="line"> </span><br><span class="line">   sum = i + c;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Value of sum : %f\n&quot;</span>, sum );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Value of sum : 116.000000</span><br></pre></td></tr></table></figure><blockquote><p>在这里，c 首先被转换为整数，但是由于最后的值是 float 型的，所以会应用常用的算术转换，编译器会把 i 和 c 转换为浮点型，并把它们相加得到一个浮点数。</p></blockquote><h1>C 错误处理</h1><p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 <strong>errno</strong>，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 errno.h 头文件中找到各种各样的错误代码。</p><p>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p><h2 id="errno、perror-和-strerror"><a class="header-anchor" href="#errno、perror-和-strerror">¶</a>errno、perror() 和 strerror()</h2><p>C 语言提供了 <strong>perror()</strong> 和 <strong>strerror()</strong> 函数来显示与 <strong>errno</strong> 相关的文本消息。</p><ul><li><strong>perror()</strong> 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。</li><li><strong>strerror()</strong> 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。</li></ul><p>让我们来模拟一种错误情况，尝试打开一个不存在的文件。可以使用多种方式来输出错误消息，在这里我们使用函数来演示用法。另外有一点需要注意，应该使用 <strong>stderr</strong> 文件流来输出所有的错误。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> errno ;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE * pf;</span><br><span class="line">   <span class="keyword">int</span> errnum;</span><br><span class="line">   pf = fopen (<span class="string">&quot;unexist.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (pf == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      errnum = errno;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误号: %d\n&quot;</span>, errno);</span><br><span class="line">      perror(<span class="string">&quot;通过 perror 输出错误&quot;</span>);</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;打开文件错误: %s\n&quot;</span>, strerror( errnum ));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      fclose (pf);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">错误号: <span class="number">2</span></span><br><span class="line">通过 perror 输出错误: No such file <span class="keyword">or</span> directory</span><br><span class="line">打开文件错误: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><h2 id="被零除的错误"><a class="header-anchor" href="#被零除的错误">¶</a>被零除的错误</h2><p>在进行除法运算时，如果不检查除数是否为零，则会导致一个运行时错误。</p><p>为了避免这种情况发生，下面的代码在进行除法运算前会先检查除数是否为零：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> dividend = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> divisor = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> quotient;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>( divisor == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;除数为 0 退出运行...\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   quotient = dividend / divisor;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;quotient 变量的值为 : %d\n&quot;</span>, quotient );</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">除数为 0 退出运行...</span><br></pre></td></tr></table></figure><h2 id="程序退出状态"><a class="header-anchor" href="#程序退出状态">¶</a>程序退出状态</h2><p>通常情况下，程序成功执行完一个操作正常退出的时候会带有值 EXIT_SUCCESS。在这里，EXIT_SUCCESS 是宏，它被定义为 0。</p><p>如果程序中存在一种错误情况，当您退出程序时，会带有状态值 EXIT_FAILURE，被定义为 -1。所以，上面的程序可以写成：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> dividend = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> divisor = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">int</span> quotient;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>( divisor == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;除数为 0 退出运行...\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">   &#125;</span><br><span class="line">   quotient = dividend / divisor;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;quotient 变量的值为: %d\n&quot;</span>, quotient );</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">quotient 变量的值为 : <span class="number">4</span></span><br></pre></td></tr></table></figure><h1>C 递归</h1><p>递归指的是在函数的定义中使用函数自身的方法。</p><blockquote><p>举个例子：<br>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？“从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？‘从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”</p></blockquote><p>语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">void recursion()</span><br><span class="line">&#123;</span><br><span class="line">   statements;</span><br><span class="line">   ... ... ...</span><br><span class="line">   recursion(); /<span class="emphasis">* 函数调用自身 *</span>/</span><br><span class="line">   ... ... ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   recursion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916210456.png" alt="img"></p><p>C 语言支持递归，即一个函数可以调用其自身。但在使用递归时，程序员需要注意定义一个从函数退出的条件，否则会进入死循环。</p><p>递归函数在解决许多数学问题上起了至关重要的作用，比如计算一个数的阶乘、生成斐波那契数列，等等。</p><h2 id="数的阶乘"><a class="header-anchor" href="#数的阶乘">¶</a>数的阶乘</h2><p>下面的实例使用递归函数计算一个给定的数的阶乘：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">factorial</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(i &lt;= <span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> i * factorial(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d 的阶乘为 %f\n&quot;</span>, i, factorial(i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 的阶乘为 1307674368000.000000</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a class="header-anchor" href="#斐波那契数列">¶</a>斐波那契数列</h2><p>下面的实例使用递归函数生成一个给定的数的斐波那契数列：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonaci</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fibonaci(i<span class="number">-1</span>) + fibonaci(i<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t\n&quot;</span>, fibonaci(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    </span><br><span class="line"><span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    </span><br><span class="line"><span class="number">2</span>    </span><br><span class="line"><span class="number">3</span>    </span><br><span class="line"><span class="number">5</span>    </span><br><span class="line"><span class="number">8</span>    </span><br><span class="line"><span class="number">13</span>    </span><br><span class="line"><span class="number">21</span>    </span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure><h1>C 可变参数</h1><p>有时，可能会碰到这样的情况，希望函数带有可变数量的参数，而不是预定义数量的参数。C 语言为这种情况提供了一个解决方案，它允许定义一个函数，能根据具体的需求接受可变数量的参数。下面的实例演示了这种函数的定义。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>, ... )</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   func(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   func(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，函数 <strong>func()</strong> 最后一个参数写成省略号，即三个点号（<strong>…</strong>），省略号之前的那个参数是 <strong>int</strong>，代表了要传递的可变参数的总数。为了使用这个功能，您需要使用 <strong>stdarg.h</strong> 头文件，该文件提供了实现可变参数功能的函数和宏。具体步骤如下：</p><ul><li>定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li>在函数定义中创建一个 <strong>va_list</strong> 类型变量，该类型是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>int</strong> 参数和 <strong>va_start</strong> 宏来初始化 <strong>va_list</strong> 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li>使用宏 <strong>va_end</strong> 来清理赋予 <strong>va_list</strong> 变量的内存。</li></ul><p>现在让我们按照上面的步骤，来编写一个带有可变数量参数的函数，并返回它们的平均值：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">int</span> num,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    va_list valist;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 为 num 个参数初始化 valist */</span></span><br><span class="line">    va_start(valist, num);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 访问所有赋给 valist 的参数 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       sum += va_arg(valist, <span class="keyword">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 清理为 valist 保留的内存 */</span></span><br><span class="line">    va_end(valist);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> sum/num;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Average of 2, 3, 4, 5 = %f\n&quot;</span>, average(<span class="number">4</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Average of 5, 10, 15 = %f\n&quot;</span>, average(<span class="number">3</span>, <span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果。应该指出的是，函数 <strong>average()</strong> 被调用两次，每次第一个参数都是表示被传的可变参数的总数。省略号被用来传递可变数量的参数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Average of <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> = <span class="number">3.500000</span></span><br><span class="line">Average of <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span> = <span class="number">10.000000</span></span><br></pre></td></tr></table></figure><h1>C 内存管理</h1><p>C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <strong>&lt;stdlib.h&gt;</strong> 头文件中找到。</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数和描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>void *calloc(int num, int size);</strong> 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>void free(void *address);</strong> 该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>void *malloc(int num);</strong> 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>void *realloc(void *address, int newsize);</strong> 该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td></tr></tbody></table><p>**注意：**void * 类型表示未确定类型的指针。C、C++ 规定 void * 类型可以通过类型转换强制转换为任何其它类型的指针。</p><h2 id="动态分配内存"><a class="header-anchor" href="#动态分配内存">¶</a>动态分配内存</h2><p>编程时，如果预先知道数组的大小，那么定义数组时就比较容易。例如，一个存储人名的数组，它最多容纳 100 个字符，所以您可以定义数组，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>但是，如果预先不知道需要存储的文本长度，例如想存储有关一个主题的详细描述。在这里，需要定义一个指针，该指针指向未定义所需内存大小的字符，后续再根据需求来分配内存，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">char</span> *description;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(name, <span class="string">&quot;Zara Ali&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 动态分配内存 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">200</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error - unable to allocate required memory\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>( description, <span class="string">&quot;Zara ali a DPS student in class 10th&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Name = %s\n&quot;</span>, name );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Description: %s\n&quot;</span>, description );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Name = Zara Ali</span><br><span class="line">Description: Zara ali a DPS student in class <span class="number">10</span>th</span><br></pre></td></tr></table></figure><p>上面的程序也可以使用 <strong>calloc()</strong> 来编写，只需要把 malloc 替换为 calloc 即可，如下所示：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">calloc</span>(<span class="number">200</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br></pre></td></tr></table></figure><p>当动态分配内存时，有完全控制权，可以传递任何大小的值。而那些预先定义了大小的数组，一旦定义则无法改变大小。</p><h2 id="重新调整内存的大小和释放内存"><a class="header-anchor" href="#重新调整内存的大小和释放内存">¶</a>重新调整内存的大小和释放内存</h2><p>当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 <strong>free()</strong> 来释放内存。</p><p>或者，可以通过调用函数 <strong>realloc()</strong> 来增加或减少已分配的内存块的大小。让我们使用 realloc() 和 free() 函数，再次查看上面的实例：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">char</span> *description;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(name, <span class="string">&quot;Zara Ali&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 动态分配内存 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error - unable to allocate required memory\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>( description, <span class="string">&quot;Zara ali a DPS student.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 假设您想要存储更大的描述信息 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *) <span class="built_in">realloc</span>( description, <span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error - unable to allocate required memory\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcat</span>( description, <span class="string">&quot;She is in class 10th&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Name = %s\n&quot;</span>, name );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Description: %s\n&quot;</span>, description );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用 free() 函数释放内存 */</span></span><br><span class="line">   <span class="built_in">free</span>(description);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Name = Zara Ali</span><br><span class="line">Description: Zara ali a DPS student.She is in class <span class="number">10</span>th</span><br></pre></td></tr></table></figure><p>可以尝试一下不重新分配额外的内存，strcat() 函数会生成一个错误，因为存储 description 时可用的内存不足。</p><h1>C 命令行参数</h1><p>执行程序时，可以从命令行传值给 C 程序。这些值被称为<strong>命令行参数</strong>，它们对程序很重要，特别是当您想从外部控制程序，而不是在代码内对这些值进行硬编码时，就显得尤为重要了。</p><p>命令行参数是使用 main() 函数参数来处理的，其中，<strong>argc</strong> 是指传入参数的个数，<strong>argv[]</strong> 是一个指针数组，指向传递给程序的每个参数。下面是一个简单的实例，检查命令行是否有提供参数，并根据参数执行相应的动作：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>( argc == <span class="number">2</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The argument supplied is %s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>( argc &gt; <span class="number">2</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Too many arguments supplied.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;One argument expected.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个参数，编译并执行上面的代码，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out testing</span><br><span class="line">The argument supplied is testing</span><br></pre></td></tr></table></figure><p>使用两个参数，编译并执行上面的代码，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out testing1 testing2</span><br><span class="line">Too many arguments supplied.</span><br></pre></td></tr></table></figure><p>不传任何参数，编译并执行上面的代码，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out</span><br><span class="line">One argument expected</span><br></pre></td></tr></table></figure><p>应当指出的是，<strong>argv[0]</strong> 存储程序的名称，<strong>argv[1]</strong> 是一个指向第一个命令行参数的指针，*argv[n] 是最后一个参数。如果没有提供任何参数，argc 将为 1，否则，如果传递了一个参数，<strong>argc</strong> 将被设置为 2。</p><p>多个命令行参数之间用空格分隔，但是如果参数本身带有空格，那么传递参数的时候应把参数放置在双引号 “” 或单引号 ‘’ 内部。让我们重新编写上面的实例，有一个空间，那么你可以通过这样的观点，把它们放在双引号或单引号&quot;&quot;&quot;&quot;。让我们重新编写上面的实例，向程序传递一个放置在双引号内部的命令行参数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Program name %s\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>( argc == <span class="number">2</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The argument supplied is %s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>( argc &gt; <span class="number">2</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Too many arguments supplied.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;One argument expected.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个用空格分隔的简单参数，参数括在双引号中，编译并执行上面的代码，它会产生下列结果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$./a.out <span class="string">&quot;testing1 testing2&quot;</span></span><br><span class="line"></span><br><span class="line">Progranm name ./a.out</span><br><span class="line">The argument supplied is testing1 testing2</span><br></pre></td></tr></table></figure><h1>C 排序算法</h1><h3 id="冒泡排序"><a class="header-anchor" href="#冒泡排序">¶</a>冒泡排序</h3><p>冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。</p><p>过程演示:</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916211627.gif" alt="img"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line">    bubble_sort(arr, len);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a class="header-anchor" href="#选择排序">¶</a>选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>过程演示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916211934.gif" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916211942.gif" alt="img"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span> <span class="comment">//交換兩個變數</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span> ; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)     <span class="comment">//走訪未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])    <span class="comment">//找到目前最小值</span></span><br><span class="line">                min = j;    <span class="comment">//紀錄最小值</span></span><br><span class="line">           swap(&amp;arr[min], &amp;arr[i]);    <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a class="header-anchor" href="#插入排序">¶</a>插入排序</h3><p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到 {\displaystyle O(1)} {\displaystyle O(1)}的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后</p><p>挪位，为最新元素提供插入空间。</p><p>过程演示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916212129.gif" alt="img"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j=i;j&gt;<span class="number">0</span> &amp;&amp; arr[j<span class="number">-1</span>]&gt;temp;j--)</span><br><span class="line">                    arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a class="header-anchor" href="#希尔排序">¶</a>希尔排序</h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>过程演示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916212044.gif" alt="img"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap, i, j;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap = gap &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a class="header-anchor" href="#归并排序">¶</a>归并排序</h3><p>把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。</p><p>可从上到下或从下到上进行。</p><p>过程演示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916212112.gif" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916212119.gif" alt="img"></p><h4 id="迭代法"><a class="header-anchor" href="#迭代法">¶</a>迭代法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* a = arr;</span><br><span class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</span><br><span class="line">            <span class="keyword">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="keyword">int</span> k = low;</span><br><span class="line">            <span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>* temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归法"><a class="header-anchor" href="#递归法">¶</a>递归法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> reg[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</span><br><span class="line">    <span class="keyword">int</span> start1 = start, end1 = mid;</span><br><span class="line">    <span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = end;</span><br><span class="line">    merge_sort_recursive(arr, reg, start1, end1);</span><br><span class="line">    merge_sort_recursive(arr, reg, start2, end2);</span><br><span class="line">    <span class="keyword">int</span> k = start;</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</span><br><span class="line">        reg[k++] = arr[start1++];</span><br><span class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start2++];</span><br><span class="line">    <span class="keyword">for</span> (k = start; k &lt;= end; k++)</span><br><span class="line">        arr[k] = reg[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reg[len];</span><br><span class="line">    merge_sort_recursive(arr, reg, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a class="header-anchor" href="#快速排序">¶</a>快速排序</h3><p>在区间中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。</p><p>过程演示：</p><p><img src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200916213114.gif" alt="img"></p><h4 id="迭代法-v2"><a class="header-anchor" href="#迭代法-v2">¶</a>迭代法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line"><span class="function">Range <span class="title">new_Range</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 避免len等於負值時引發段錯誤（Segment Fault）</span></span><br><span class="line">    <span class="comment">// r[]模擬列表,p為數量,r[p++]為push,r[--p]為pop且取得元素</span></span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">// 選取中間點為基準點</span></span><br><span class="line">        <span class="keyword">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid) ++left;   <span class="comment">// 檢測基準點左側是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid) --right; <span class="comment">//檢測基準點右側是否符合要求</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;arr[left],&amp;arr[right]);</span><br><span class="line">                left++;right--;               <span class="comment">// 移動指針以繼續</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right) r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left) r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归法-v2"><a class="header-anchor" href="#递归法-v2">¶</a>递归法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = arr[end];</span><br><span class="line">    <span class="keyword">int</span> left = start, right = end - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</span><br><span class="line">            left++;</span><br><span class="line">        <span class="keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</span><br><span class="line">            right--;</span><br><span class="line">        swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[left] &gt;= arr[end])</span><br><span class="line">        swap(&amp;arr[left], &amp;arr[end]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        left++;</span><br><span class="line">    <span class="keyword">if</span> (left)</span><br><span class="line">        quick_sort_recursive(arr, start, left - <span class="number">1</span>);</span><br><span class="line">    quick_sort_recursive(arr, left + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    quick_sort_recursive(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;基于VS2019版，编写练习代码，基础中的基础。通过菜鸟教程上的知识学习。&lt;/p&gt;
&lt;h1&gt;C语言基本&lt;/h1&gt;
&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基本语法&quot;&gt;¶&lt;/a&gt;基本语法&lt;/h2&gt;
&lt;h3 id=&quot;标识符&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#标识符&quot;&gt;¶&lt;/a&gt;标识符&lt;/h3&gt;
&lt;p&gt;C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。&lt;/p&gt;
&lt;p&gt;C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是&lt;strong&gt;区分大小写&lt;/strong&gt;的编程语言。因此，在 C 中，&lt;em&gt;Manpower&lt;/em&gt; 和 &lt;em&gt;manpower&lt;/em&gt; 是两个不同的标识符。下面列出几个有效的标识符：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mohd       zara    abc   move&lt;span class=&quot;emphasis&quot;&gt;_name  a_&lt;/span&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myname50   &lt;span class=&quot;emphasis&quot;&gt;_temp   j     a23b9      retVal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关键字&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#关键字&quot;&gt;¶&lt;/a&gt;关键字&lt;/h3&gt;</summary>
    
    
    
    <category term="C" scheme="http://stardust14.com/categories/C/"/>
    
    
    <category term="C" scheme="http://stardust14.com/tags/C/"/>
    
  </entry>
  
</feed>
