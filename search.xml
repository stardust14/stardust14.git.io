<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python学习</title>
    <url>/stardust14.github.io/2020/07/28/Python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>first blog</title>
    <url>/stardust14.github.io/2020/01/04/first-blog/</url>
    <content><![CDATA[<p>first blog</p>
<p>内容：又重新来了一遍！</p>
<hr>
<p>second</p>
<p>内容：太不容易了。</p>
<hr>
<p>参考：</p>
<p>来自B站codecheeep</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/stardust14.github.io/2020/08/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo出现的问题</title>
    <url>/stardust14.github.io/2020/07/06/hexo%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="在进行博客编写过程中，出现了一些问题。"><a href="#在进行博客编写过程中，出现了一些问题。" class="headerlink" title="在进行博客编写过程中，出现了一些问题。"></a>在进行博客编写过程中，出现了一些问题。</h1><h2 id="1、出现hexo无法识别"><a href="#1、出现hexo无法识别" class="headerlink" title="1、出现hexo无法识别"></a>1、出现hexo无法识别</h2><p>  ‘hexo’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。<br>  或着是<code>bash: hexo: command not found</code></p>
<p>  参考网上的经验贴,修改环境变量</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707174137.png" alt="image-20200707174134036"></p>
<h2 id="2、出现cnpm不能识别"><a href="#2、出现cnpm不能识别" class="headerlink" title="2、出现cnpm不能识别"></a>2、出现cnpm不能识别</h2><p>  ‘cnpm’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。</p>
<p>  把C盘的一些文件复制到博客安装的目录中去</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707174434.png" alt="image-20200707174432439"></p>
<h2 id="3、图片无法加载"><a href="#3、图片无法加载" class="headerlink" title="3、图片无法加载"></a>3、图片无法加载</h2><p>使用<strong>typora+picgo</strong>插入图片，部署到github上去。</p>
<p>出现了好多错误，直接剪切上传后正常，保存后在上传加载不出，但是下面也有加载出来的。。。</p>
<p>参考网上的解决方案，修改了hosts文件，配置了一些picgo的设置。</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707175357.png" alt="image-20200707175355687"></p>
<h2 id="4、-出现本地4000端口占用问题"><a href="#4、-出现本地4000端口占用问题" class="headerlink" title="4、  出现本地4000端口占用问题"></a>4、  出现本地4000端口占用问题</h2><p>打开cmd输入 <code>netstat -nao | findstr 4000</code>查询4000端口占用的程序</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707171831.png" alt="Image"></p>
<p>可以看到 PID为 24016 的进程占用了4000端口，如果进一步你想知道它的进程名称，你可以使用如下命令： <code>tasklist | findstr 24016</code> 执行终止程序</p>
<h2 id="5、-git-bush中ctrl-c退出不了（bug）"><a href="#5、-git-bush中ctrl-c退出不了（bug）" class="headerlink" title="5、  git bush中ctrl+c退出不了（bug）"></a>5、  git bush中ctrl+c退出不了（bug）</h2><p>打开cmd，输入：<code>taskkill /F /IM node.exe</code> </p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707171737.png" alt="Image"></p>
<p>搞定<del>~</del></p>
<h2 id="6、部署到GitHub上电脑无法访问的问题"><a href="#6、部署到GitHub上电脑无法访问的问题" class="headerlink" title="6、部署到GitHub上电脑无法访问的问题"></a>6、部署到GitHub上电脑无法访问的问题</h2><p>   这是由于<code>https：//</code>这个格式  </p>
]]></content>
  </entry>
  <entry>
    <title>如何修改blog</title>
    <url>/stardust14.github.io/2020/01/05/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9blog/</url>
    <content><![CDATA[<h1 id="学习怎么进行主题设置"><a href="#学习怎么进行主题设置" class="headerlink" title="学习怎么进行主题设置"></a>学习怎么进行主题设置</h1><h2 id="参考网上的教程，进行学习"><a href="#参考网上的教程，进行学习" class="headerlink" title="参考网上的教程，进行学习"></a>参考网上的教程，进行学习</h2><p>基本的使用:</p>
<h1 id="一级标题（-）"><a href="#一级标题（-）" class="headerlink" title="一级标题（# ）"></a>一级标题（# ）</h1><h2 id="二级标题（-）"><a href="#二级标题（-）" class="headerlink" title="二级标题（## ）"></a>二级标题（## ）</h2><h3 id="三级标题（-）"><a href="#三级标题（-）" class="headerlink" title="三级标题（### ）"></a>三级标题（### ）</h3><blockquote>
<p>以此类推（引用&gt;）</p>
</blockquote>
<p>虚线（—、***）</p>
<ul>
<li>列表1<br>  a 字列表<br><a href="https://www.baidu.com/?tn=98012088_5_dg&ch=12">百度</a><blockquote>
<p>超链接</p>
</blockquote>
</li>
</ul>
<p> <em>斜体</em><br> <strong>粗体</strong> </p>
<p><code>&lt;html&gt;&lt;/html&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;代码引用，直接敲&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
  </entry>
  <entry>
    <title>java学习</title>
    <url>/stardust14.github.io/2020/07/08/java%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1>定义方法</h1>
<h3 id="1、定义一个方法（函数）的格式："><a class="header-anchor" href="#1、定义一个方法（函数）的格式：">¶</a>1、定义一个方法（函数）的格式：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名称()&#123;</span><br><span class="line"></span><br><span class="line">	方法体</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、调用方法（函数），格式："><a class="header-anchor" href="#2、调用方法（函数），格式：">¶</a>2、调用方法（函数），格式：</h3>
<p>方法名称();</p>
<p>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么Java编译器将会自动隐含的为我们补上一个（byte）（short）（char）<!--强制转换--></p>
<h1>循环</h1>
<p><strong>三种循环的区别。</strong></p>
<p>1、如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do-while循环会执行至少一次。</p>
<p>2、for循环的变量在小括号当中定义，只有循环内部才可以使用。while循环和do-while循环初始化语句本来就在外面，所以出来循环之后还可以继续使用。</p>
<p><strong>break关键字的用法有常见的两种:</strong><br>
1.可以用在switch语句当中，一旦执行，整个switch语句立刻结束。<br>
2.还可以用在循环语句当中，-一 旦执行，整个循环语句立刻结束。打断循环。<br>
关于循环的选择，有一个小建议:<br>
凡是次数确定的场景多用for循环;否则多用while循环。|</p>
<p><strong>另一种循环控制语句是continue关键字。</strong><br>
一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环。</p>
<p>永远停不下来的循环，叫做<strong>死循环</strong>。<br>
死循环的标准格式:<br>
while (true) {<br>
循环体</p>
<p>}</p>
<h1>IDEA的常用快捷键</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Alt+Enter</code></td>
<td style="text-align:left">导入包，自动修正代码</td>
</tr>
<tr>
<td><code>Ctrl+Y</code></td>
<td style="text-align:left">删除光标所在行</td>
</tr>
<tr>
<td><code>Ctrl+D</code></td>
<td style="text-align:left">复制光标所在行的内容，插入光标位置下面</td>
</tr>
<tr>
<td><code>Ctrl+Alt+L</code></td>
<td style="text-align:left">格式化代码（使代码规整）</td>
</tr>
<tr>
<td><code>Ctrl+/</code></td>
<td style="text-align:left">单行注释，再按取消注释</td>
</tr>
<tr>
<td><code>Ctrl+Shift+/</code></td>
<td style="text-align:left">选中代码注释，多行注释，再按取消注释</td>
</tr>
<tr>
<td><code>Alt+Ins</code></td>
<td style="text-align:left">自动生成代码，toString, get, set等方法</td>
</tr>
<tr>
<td><code>Alt+Shift+上下箭头</code></td>
<td style="text-align:left">移动当前代码行</td>
</tr>
<tr>
<td><code>Alt+4</code></td>
<td style="text-align:left">控制台调出</td>
</tr>
<tr>
<td><code>Alt+/</code></td>
<td style="text-align:left">缩写提示</td>
</tr>
<tr>
<td><code>shift+F6</code></td>
<td style="text-align:left">对每个相同的变量一次性改变</td>
</tr>
<tr>
<td><code>数字.fori</code></td>
<td style="text-align:left">for循环的快捷方式,【正序】</td>
</tr>
<tr>
<td><code>数字.forr</code></td>
<td style="text-align:left">for循环的快捷方式,【逆序】</td>
</tr>
</tbody>
</table>
<p><strong>注意事项:</strong><br>
对于有返回值的方法，可以使用单独调用、打印调用或者赋值调用。<br>
但是对于无返回值的方法，只能使用单独调用，不能使用打印调用或者赋值调用。</p>
<h1>方法</h1>
<p><strong>使用方法的时候，注意事项:</strong><br>
1、方法应该定义在类当中，但是不能在方法当中再定义方法。不能嵌套。<br>
2、方法定义的前后顺序无所谓。<br>
3、方法定义之后不会执行，如果希望执行，- -定要调用:单独调用、打印调用、赋值调用。<br>
4、如果方法有返回值，那么必须写.上“return 返回值;”，不能没有。</p>
<p>5、return后面的返回值数据，必须和方法的返回值类型，对应起来。<br>
6、对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己。</p>
<p>7、对于void方法，对于方法当中最后一行的return可以省略不写。</p>
<p>8、一个方法当中可以有多个return语句，但是必须保证同时只有一个会被执行到，两个return不能连写。</p>
<p>判断是否一般用Boolean值</p>
<h2 id="方法重载（overload）"><a class="header-anchor" href="#方法重载（overload）">¶</a><strong>方法重载（overload）</strong></h2>
<p>多个方法的名称一样，但是参数列表不一样</p>
<p>好处是只需要记住唯一一个方法名称，就可以实现类似的多个功能。</p>
<p>在调用输出语句的时候，println方法其实就是进行了多种数据类型的重载形式。</p>
<p><strong>方法重载与下列因素相关:</strong><br>
1、参数个数不同<br>
2、参数类型不同<br>
3、参数的多类型顺序不同<br>
<strong>方法重载与下列因素无关:</strong><br>
1、与参数的名称无关<br>
2、与方法的返回值类型无关</p>
<h3 id="练习题（方法重载）"><a class="header-anchor" href="#练习题（方法重载）">¶</a>练习题（方法重载）</h3>
<p>1、这题也包括了Boolean的是否判断的方法<img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200711220604.png" alt="image-20200711220601237"></p>
<p>2、判断是否是重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//正确重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125; <span class="comment">//正确重载.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125; <span class="comment">//代码错误:和第8行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125; <span class="comment">//正确重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span>. a,<span class="keyword">double</span>. b)</span></span>&#123;&#125; <span class="comment">//代码错误:和第6行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">double</span> d)</span></span>&#123;&#125; <span class="comment">//代码错误:和第5行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//代码正确不会报错，但是并不是有效重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>. open(<span class="keyword">int</span> i,<span class="keyword">int</span> j)&#123;&#125; <span class="comment">//代码错误:和第3行冲突</span></span><br></pre></td></tr></table></figure>
<h1>数组</h1>
<h2 id="数组的概念"><a class="header-anchor" href="#数组的概念">¶</a>数组的概念</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的初始化:在内存当中创建一个数组， 并且向其中赋予一些默认值。</span></span><br><span class="line"><span class="comment">两种常见的初始化方式:</span></span><br><span class="line"><span class="comment">1.动态初始化(指定长度)</span></span><br><span class="line"><span class="comment">2.静态初始化(指定内容)</span></span><br><span class="line"><span class="comment">动态初始化数组的格式:</span></span><br><span class="line"><span class="comment">数据类型[]数组名称= new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">解析含义:</span></span><br><span class="line"><span class="comment">左侧数据类型:也就是数组当中保存的数据，全都是统-的什么类型</span></span><br><span class="line"><span class="comment">左侧的中括号:代表我是一个数组</span></span><br><span class="line"><span class="comment">左侧数组名称:给数组取一个名字</span></span><br><span class="line"><span class="comment">右侧的new:代表创建数组的动作</span></span><br><span class="line"><span class="comment">右侧数据类型:必须和左边的数据类型保持-致</span></span><br><span class="line"><span class="comment">右侧中括号的长度:也就是数组当中，到底可以保存多少个数据，是一个int数字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>区别</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态初始化(指定长度) :在创建数组的时候，直接指定数组当中的数据元素个数。</span></span><br><span class="line"><span class="comment">静态初始化(指定内容) :在创建数组的时候，不直接指定数据个数多少，而是直接将具体的数据内容进行指定。</span></span><br><span class="line"><span class="comment">静态初始化基本格式:</span></span><br><span class="line"><span class="comment">数据类型[]数组名称= new 数据类型[] &#123;元素1,元素2，... &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用静态初始化数组的时候，格式还可以省略一下。<br>
标准格式:<br>
数据类型[]数组名称= neW  数据类型[] {元素1,元素2，… };<br>
省略格式:<br>
数据类型[]数组名称= {元素1,元素2，… };</p>
<p><strong>注意事项:</strong><br>
1.静态初始化没有直接指定长度，但是仍然会自动推算得到长度。<br>
2.静态初始化标准格式可以拆分成为两个步骤。<br>
3.动态初始化也可以拆分成为两个步骤。<br>
4.静态初始化一 旦使用省略格式，就不能拆分成为两个步骤了。<br>
<strong>使用建议:</strong><br>
如果不确定数组当中的具体内容，用动态初始化;否则，已经确定了具体的内容，用静态初始化。|</p>
<p>直接打印数组名称，得到的是数组对应的:内存地址哈希值<br>
**访问数组元素的格式:**数组名称[索引值]<br>
索引值:就是一个int数字，代表数组当中元素的编号。<br>
[注意]索引值从开始，- -直到“数组的长度-1为止。</p>
<p>使用<strong>动态初始化数组</strong>的时候，其中的元素将会自动拥有一个默认值。规则如下:<br>
如果是整数类型，那么默认为0;<br>
如果是浮点类型，那么默认为0.0;<br>
如果是字符类型，那么默认为’\u0000’;（看不见）<br>
如果是布尔类型，那么默认为false;<br>
如果是引用类型，那么默认为null。</p>
<p><strong>注意事项:</strong><br>
静态初始化其实也有默认值的过程，只不过系统自动马.上将默认值替换成为了大括号当中的具体数值。</p>
<h2 id="内存划分"><a class="header-anchor" href="#内存划分">¶</a>内存划分</h2>
<p>Java的内存需要划分成为5个部分:<br>
1.<strong>栈(Stack)</strong> :存放的都是方法中的局部变量。<br>
局部变量:方法的参数，或者是方法{}内部的变量<br>
作用域:一旦超出作用域，立刻从栈内存当中消失。<br>
2.<strong>堆(Heap)</strong> :凡是new出来的东西,都在堆当中。<br>
堆内存里面的东西都有一个地址值: 11 6进制<br>
堆内存里面的数据，都有默认值。规则:<br>
如果是整数				默认为0<br>
如果是浮点数			默认为0.0<br>
如果是字符				默认为’\u0000’<br>
如果是布尔				默认为false<br>
如果是引用类型		默认为null<br>
3.<strong>方法区(Method Area)</strong> :存储.class相关信息，包含方法的信息。<br>
4.<strong>本地方法栈(Native Method Stack)</strong> :与操作系统相关。<br>
5.**寄存器(**pc Register) :与CPU相关。</p>
<h2 id="数组的内存图"><a class="header-anchor" href="#数组的内存图">¶</a>数组的内存图</h2>
<p><strong>一个数组的内存图：</strong></p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712164516.png" alt="image-20200712164514236"></p>
<p><strong>两个数组的内存图：</strong></p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712165859.png" alt="image-20200712165123071"></p>
<p><strong>两个引用指向同一个数组的内存图</strong></p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712165840.png" alt="image-20200712165838206"></p>
<h2 id="常见的问题"><a class="header-anchor" href="#常见的问题">¶</a>常见的问题</h2>
<h3 id="1、数组索引越界异常"><a class="header-anchor" href="#1、数组索引越界异常">¶</a><strong>1、数组索引越界异常</strong></h3>
<p>如果访问数组元素的时候，索引编号并不存在，那么将会发生数组索引越界异常<br>
<code>ArrayIndexOutOfBoundsException</code><br>
原因:索引编号写错了。<br>
解决:修改成为存在的正确索引编号。</p>
<h3 id="2、空指针异常"><a class="header-anchor" href="#2、空指针异常">¶</a>2、空指针异常</h3>
<p>所有的引用类型变量，都可以赋值为一-个null值。但是代表其中什么都没有。<br>
数组必须进行new初始化才能使用其中的元素。<br>
如果只是赋值了一个null，没有进行new创建，<br>
那么将会发生:<br>
空指针异常<code>NullPointerException</code><br>
<strong>原因</strong>:忘了new<br>
<strong>解决</strong>:补上new</p>
<h2 id="获取数组的长度"><a class="header-anchor" href="#获取数组的长度">¶</a>获取数组的长度</h2>
<p>如何获取数组的长度，格式:<br>
数组名称. length<br>
这将会得到一个int数字，代表数组的长度。<br>
数组一旦创建，程序运行期间，<em><strong>长度不可改变</strong></em>。</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712171637.png" alt="image-20200712171219524"></p>
<p><strong>数组的遍历输出：使用for循环</strong></p>
<p><strong>数组的最值：使用for循环和if判断</strong></p>
<h2 id="数组元素反转"><a class="header-anchor" href="#数组元素反转">¶</a>数组元素反转</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713111225.png" alt="image-20200713111223768"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Demo07ArrayReverse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line"><span class="comment">//遍历打印数组本来的样子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">System.out. println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化语句: int min =日, max = array. length - 1</span></span><br><span class="line"><span class="comment">条件判断: min &lt; max</span></span><br><span class="line"><span class="comment">步进表达式: min+t, max--</span></span><br><span class="line"><span class="comment">循环体:用第三个变量倒手</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = array.<span class="number">1</span>ength - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = array[min] ;</span><br><span class="line">array[min] = array[max];</span><br><span class="line">array[max] = temp;</span><br><span class="line">&#125;</span><br><span class="line">I</span><br><span class="line"><span class="comment">//再次打印遍历输出数组后来的样子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组作为方法参数"><a class="header-anchor" href="#数组作为方法参数">¶</a>数组作为方法参数</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组可以作为方法的参数。</span></span><br><span class="line"><span class="comment">当调用方法的时候，向方法的小括号进行传参，传递进去的其实是数组的地址值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayParam</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[]array=&#123;_10，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>，<span class="number">50</span>&#125;;</span><br><span class="line">System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line">printArray(array); <span class="comment">//传递进去的就是array当中保存的地址值</span></span><br><span class="line">System . out. println(<span class="string">&quot;==========AAA==========&quot;</span>);</span><br><span class="line">printArray(array);</span><br><span class="line">System. out. println(<span class="string">&quot;==========BBB-=========&quot;</span>);</span><br><span class="line">printArray(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型:只是进行打印而已，不需要进行计算，也没有结果，用void</span></span><br><span class="line"><span class="comment">方法名称: printArray</span></span><br><span class="line"><span class="comment">参数列表:必须给我数组，我才能打印其中的元素。int[] array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">System . out. println(<span class="string">&quot;printArray方法收到的参数是: &quot;</span>);</span><br><span class="line">System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array. length; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的结果：</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713112817.png" alt="image-20200713112816224"></p>
<h2 id="数组作为方法返回值"><a class="header-anchor" href="#数组作为方法返回值">¶</a>数组作为方法返回值</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个方法可以有0、1、多个参数;但是只能有0或者1个返回值，不能有多个返回值。</span></span><br><span class="line"><span class="comment">如果希望一个方法当中产生了多个结果数据进行返回，怎么办?</span></span><br><span class="line"><span class="comment">解决方案:使用一个数组作为返回值类型即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">任何数据类型都能作为方法的参数类型，或者返回值类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组作为方法的参数，传递进去的其实是数组的地址值。</span></span><br><span class="line"><span class="comment">数组作为方法的返回值，返回的其实也是数组的地址值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayReturn</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] result = calculate( a: <span class="number">10</span>，b: <span class="number">20</span>，C: <span class="number">30</span>);</span><br><span class="line">    System. out . println( <span class="string">&quot;main方法接收到的返回值数组是: &quot;</span>);</span><br><span class="line">	System. out. println(result);</span><br><span class="line"></span><br><span class="line">	System. out. println(<span class="string">&quot;总和: &quot;</span> + result[<span class="number">0</span>]);</span><br><span class="line">	System. out. println(<span class="string">&quot;平均数:&quot;</span> + result[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] calculate(<span class="keyword">int</span> a, <span class="keyword">int</span> b，<span class="keyword">int</span> c) &#123;</span><br><span class="line">	intsum=a+b+c;<span class="comment">//总和</span></span><br><span class="line">	intavg=sum/<span class="number">3</span>;<span class="comment">//平均数</span></span><br><span class="line">	<span class="comment">//两个结果都希望进行返回</span></span><br><span class="line">	<span class="comment">//需要一个数组，也就是一个塑料兜，数组可以保存多个结果</span></span><br><span class="line">	<span class="comment">/*这是一种方法</span></span><br><span class="line"><span class="comment">	int[] array = new int[2];</span></span><br><span class="line"><span class="comment">	array[0] = sum; //总和</span></span><br><span class="line"><span class="comment">	array[1] = avg; //平均数</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="comment">//这是另一种方法</span></span><br><span class="line">	<span class="keyword">int</span>[ ] array = &#123; sum， avg &#125;;</span><br><span class="line">    System. out . println(<span class="string">&quot;calculate方法内部数组是: &quot;</span>); </span><br><span class="line">	System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果：</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713113840.png" alt="image-20200713113838924"></p>
<h1>面向对象思想</h1>
<h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">面向过程:当需要实现-个功能的时候，每一一个具体的步骤都要亲力亲为，详细处理每一个细节 。</span></span><br><span class="line"><span class="comment">面向对象:当需要实现一个功能的时候，不关心具体的步骤，而是找一个已经具有该功能的人，来帮我做事儿。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintArray</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array = &#123; <span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>， <span class="number">40</span>， <span class="number">50</span>， <span class="number">60</span> &#125;;</span><br><span class="line">	<span class="comment">//要求打印格式为: [10, 20，30, 40, 50]</span></span><br><span class="line">	<span class="comment">//使用面向过程，每一个步骤细节都要 亲力亲为。</span></span><br><span class="line">		System. out. print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == array. length - <span class="number">1</span>) &#123; <span class="comment">//如果是最后一个元素</span></span><br><span class="line">			System. out . println(array[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不是最后一-个元素</span></span><br><span class="line">			System. out . print(array[i] + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">			System. out . print1n(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">			<span class="comment">//使用面向对象</span></span><br><span class="line">       	 	<span class="comment">//找一个JDk给我们提供好的Arrays类,</span></span><br><span class="line">			<span class="comment">//其中有一个toString方法，直接就能把数组变成想要的格式的字符串</span></span><br><span class="line">			System. out . println(Arrays . toString(array));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●面向过程:强调步骤。<br>
●面向对象:强调对象，这里的对象就是洗衣机。</p>
<p>特点：</p>
<p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。<br>
面向对象的语言中，包含了三大<strong>基本特征</strong>，即封装、继承和多态。</p>
<h2 id="类和对象"><a class="header-anchor" href="#类和对象">¶</a>类和对象</h2>
<h3 id="类"><a class="header-anchor" href="#类">¶</a>类</h3>
<p>●类:是一组相关属性和行为的集合。可以看成是一 类事物的模板,使用事物的属性特征和行为特征来描述该类<br>
事物。<br>
现实中，描述一类事物:<br>
●属性:就是该事物的状态信息。<br>
●行为:就是该事物能够做什么。</p>
<h3 id="对象"><a class="header-anchor" href="#对象">¶</a>对象</h3>
<p>●对象:是一类事物的具体体现。对象是类的一个实例(对象并不是找个女朋友) ,必然具备该类事物的属性和行为。</p>
<h3 id="类和对象的关系"><a class="header-anchor" href="#类和对象的关系">¶</a>类和对象的关系</h3>
<p>●类是对一类事物的描述,是抽象的。<br>
●对象是一类事物的实例，是具体的。<br>
●类是对象的模板，对象是类的实体。</p>
<h2 id="类的定义"><a class="header-anchor" href="#类的定义">¶</a>类的定义</h2>
<h3 id="事物与类的对比"><a class="header-anchor" href="#事物与类的对比">¶</a>事物与类的对比</h3>
<p>现实世界的一类事物:<br>
<strong>属性</strong>:事物的状态信息。<br>
<strong>行为</strong>:事物能够做什么。<br>
Java中用class描述事物也是如此:<br>
<strong>成员变量</strong>:对应事物的属性<br>
<strong>成员方法</strong>:对应事物的行为</p>
<h3 id="类定义的格式"><a class="header-anchor" href="#类定义的格式">¶</a>类定义的格式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●<strong>定义类:<strong>就是定义类的成员，包括成员变量和成员方法。<br>
●</strong>成员量:<strong>和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中，方法外。</strong><br>
●</strong>成员方法:<strong>和以前定义方法几乎是一样的。只不过把</strong>static</strong>去掉， <strong>static</strong>的作用在面向对象后面课程中再详细讲解。</p>
<p><strong>注意事项:</strong><br>
1.成员变量是直接定义在类当中的，在方法外边。<br>
2.成员方法不要写static关键字。</p>
<h2 id="对象的创建及其使用"><a class="header-anchor" href="#对象的创建及其使用">¶</a>对象的创建及其使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通常情况下，一个类并不能直接使用，需要根据类创建一个对象， 才能使用。</span></span><br><span class="line"><span class="comment">1.导包:也就是指出需要使用的类，在什么位置。</span></span><br><span class="line"><span class="comment">import包名称.类名称;</span></span><br><span class="line"><span class="comment">import cn. itcast. day06. demo01. Student;</span></span><br><span class="line"><span class="comment">对于和当前类属于同一-个包的情况，可以省略导包语句不写。</span></span><br><span class="line"><span class="comment">2.创建,格式:</span></span><br><span class="line"><span class="comment">类名称对象名= new</span></span><br><span class="line"><span class="comment">类名称();</span></span><br><span class="line"><span class="comment">Student stu = new Student();</span></span><br><span class="line"><span class="comment">3.使用，分为两种情况:</span></span><br><span class="line"><span class="comment">使用成员变量:对象名.成员变量名</span></span><br><span class="line"><span class="comment">使用成员方法:对象名.成员方法名(参数)</span></span><br><span class="line"><span class="comment">(也就是，想用谁，就用对象名点儿谁。)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.导包。</span></span><br><span class="line">	<span class="comment">//我需要使用的Student类,和我自己Demo02Student位于同一一个包下，所以省略导包语句不写</span></span><br><span class="line">	<span class="comment">// 2.创建，格式:</span></span><br><span class="line">	<span class="comment">//类名称对象名= new类名称();</span></span><br><span class="line">	<span class="comment">//根据Student类，创建了一个名， 为stu的对象</span></span><br><span class="line">	Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 3.使用其中的成员变量，格式:</span></span><br><span class="line">	<span class="comment">//对象名.成员变量名.</span></span><br><span class="line">	System. out. println(stu. name); <span class="comment">// null</span></span><br><span class="line">	System. out . println(stu.age); <span class="comment">//0</span></span><br><span class="line">	System. out . print1n(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//改变对象当中的成员变量数值内容</span></span><br><span class="line">	<span class="comment">//将右侧的字符串，赋值交给stu对象当中的name成员变量</span></span><br><span class="line">	stu.name =“赵丽颖”;</span><br><span class="line">	stu.age = <span class="number">18</span>;</span><br><span class="line">	System. out . println(stu.name); <span class="comment">//赵丽颖</span></span><br><span class="line">	System. out . println(stu.age); <span class="comment">// 18</span></span><br><span class="line">    System. out . print1n(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.使用对象的成员方法，格式:</span></span><br><span class="line">	<span class="comment">//对象名.成员方法名()</span></span><br><span class="line">	stu.eat();<span class="comment">//吃饭饭！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="手机类的练习题"><a class="header-anchor" href="#手机类的练习题">¶</a>手机类的练习题</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是手机类</span></span><br><span class="line"><span class="comment">定义一个类，用来模拟“手机”事物。</span></span><br><span class="line"><span class="comment">属性:品牌、价格、颜色</span></span><br><span class="line"><span class="comment">行为:打电话、发短信</span></span><br><span class="line"><span class="comment">对应到类当中:</span></span><br><span class="line"><span class="comment">成员变量(属性) :</span></span><br><span class="line"><span class="comment">String brand; //品牌</span></span><br><span class="line"><span class="comment">double price; //价格.</span></span><br><span class="line"><span class="comment">String color; //颜色</span></span><br><span class="line"><span class="comment">成员方法(行为) :</span></span><br><span class="line"><span class="comment">public void call(String who) &#123;&#125; //打电话</span></span><br><span class="line"><span class="comment">public void sendMessage() &#123;&#125; //群发短信</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">		<span class="comment">//成员变量</span></span><br><span class="line">		String brand; <span class="comment">//品牌</span></span><br><span class="line">		<span class="keyword">double</span> price; <span class="comment">//价格</span></span><br><span class="line">		String color; <span class="comment">//颜色</span></span><br><span class="line">		<span class="comment">//成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String who)</span> </span>&#123;</span><br><span class="line">		System. out. println(<span class="string">&quot;给&quot;</span> + who + <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System. out . println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用phone</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//根据Phone类，创建一个名为 one的对象</span></span><br><span class="line">	<span class="comment">//格式:类名称对象名= new类名称();</span></span><br><span class="line">	Phone one = <span class="keyword">new</span> Phone();</span><br><span class="line">	System. out. println(one.brand); <span class="comment">// null</span></span><br><span class="line">	System. out . println(one.price); <span class="comment">// 0.0</span></span><br><span class="line">	System. out . println(one.co1or); <span class="comment">// null</span></span><br><span class="line">	System. out. println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	one.brand = <span class="string">&quot;苹果&quot;</span>;</span><br><span class="line">	one.price = <span class="number">8388.0</span>;</span><br><span class="line">	one.color = <span class="string">&quot;黑色&quot;</span>;</span><br><span class="line">	System. out . println(one . brand); <span class="comment">//苹果</span></span><br><span class="line">	System. out. println(one.price); <span class="comment">// 8388.0</span></span><br><span class="line">	System. out . println(one.color); <span class="comment">//黑色</span></span><br><span class="line">    System. out. println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    one.call( who:<span class="string">&quot;乔布斯&quot;</span>) ;</span><br><span class="line">	one.sendMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一个对象的内存图"><a class="header-anchor" href="#一个对象的内存图">¶</a>一个对象的内存图</h2>
<p>new的东西全在堆之中</p>
<p>压栈，先来的在底下，后进先出，先进后出</p>
<p>黑色的X代表出栈</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715185054.png" alt="image-20200715184735566"></p>
<h2 id="两个对象使用同一个方法的内存图"><a class="header-anchor" href="#两个对象使用同一个方法的内存图">¶</a>两个对象使用同一个方法的内存图</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715185842.png" alt="image-20200715185840625"></p>
<h2 id="两个引用指向同一个对象的内存图"><a class="header-anchor" href="#两个引用指向同一个对象的内存图">¶</a>两个引用指向同一个对象的内存图</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715190554.png" alt="image-20200715190552009"></p>
<h2 id="使用对象类型作为方法的参数"><a class="header-anchor" href="#使用对象类型作为方法的参数">¶</a>使用对象类型作为方法的参数</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200716224605.png" alt="image-20200716223939500"></p>
<p><strong>注意：<strong>当一个对象作为参数，传递到方法当中时，实际上传递进去的是对象的</strong>地址值</strong>。</p>
<h2 id="使用对象类型作为方法的返回值"><a class="header-anchor" href="#使用对象类型作为方法的返回值">¶</a>使用对象类型作为方法的返回值</h2>
<p><img data-src="../../../picture/PicGo/copypicture/image-20200717164340634.png" alt="image-20200717164340634"></p>
<h2 id="成员变量和局部变量的区别"><a class="header-anchor" href="#成员变量和局部变量的区别">¶</a>成员变量和局部变量的区别</h2>
<p>局部变量和成员变量<br>
1.定义的位置不一样[重点]<br>
局部变量:在方法的内部<br>
成员变量:在方法的外部，直接写在类当中<br>
2.作用范围不一样[重点]<br>
局部变量:只有方法当中才可以使用，出了方法就不能再用<br>
成员变量:整个类全都可以通用,<br>
3.默认值不一样[重点]<br>
局部变量:没有默认值，如果要想使用，必须手动进行赋值<br>
成员变量:如果没有赋值，会有默认值，规则和数组一样<br>
方法的参数就是局部变量，参数在方法调用的时候，必然会被赋值的<br>
4.内存的位置不一样(了解)<br>
局部变量:位于栈内存<br>
成员变量:位于堆内存<br>
5.生命周期不一样(了解)<br>
局部变量:随着方法进栈而诞生，随着方法出栈而消失<br>
成员变量:随着对象创建而诞生，随着对象被垃圾回收而消失</p>
<h2 id="面向对象三大特征之封装性"><a class="header-anchor" href="#面向对象三大特征之封装性">¶</a>面向对象三大特征之封装性</h2>
<p>面向对象三大特征:封装、继承、多态。<br>
封装性在Java当中的体现:<br>
1.方法就是一种封装<br>
2.关键字private也是一种封装<br>
封装就是将一些细节信息隐藏起来， 对于外界不可见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述:定义Person的年龄时，无法阻止不合理的数值被设置进来。</span></span><br><span class="line"><span class="comment">解决方案:用private关键字将需要保护的成员变量进行修饰。</span></span><br><span class="line"><span class="comment">一旦使用了private进行修饰，那么本类当中仍然可以随意访问。</span></span><br><span class="line"><span class="comment">但是!超出了本类范围之外就不能再直接访问了。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">间接访问private成员变量，就是定义一对儿Getter/Setter方法</span></span><br><span class="line"><span class="comment">必须叫setXxx或者是getXxx命名规则。</span></span><br><span class="line"><span class="comment">对于Getter来说，不能有参数，返回值类型和成员变量对应;</span></span><br><span class="line"><span class="comment">对于Setter来说，不能有返回值，参数类型和成员变量对应。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	String name; <span class="comment">// 姓名.</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">	<span class="function">pub1ic <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System. out . println(<span class="string">&quot;我叫:&quot;</span>+ name + <span class="string">&quot;,年龄:&quot;</span> + age);</span><br><span class="line">	<span class="comment">//这个成员方法，专门用于向age设置数据,往age里放</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//set必须有参数无返回值void</span></span><br><span class="line">			<span class="keyword">if</span>(num&lt;<span class="number">100</span>&amp;&amp;num&gt;=<span class="number">0</span>)&#123;<span class="comment">//如果是合理情况</span></span><br><span class="line">				age = num;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System. out. println( <span class="string">&quot;数据不合理! &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//这个成员方法，专门私语获取age的数据</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="comment">//get必须没有参数，有返回值</span></span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		person. show( ) ;</span><br><span class="line">		person. name =“赵丽颖<span class="string">&quot;;</span></span><br><span class="line"><span class="string">		//person. age= -20; //直接访问private内容，错误写法!</span></span><br><span class="line"><span class="string">		person. setAge(20) ;|</span></span><br><span class="line"><span class="string">		person. show();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="练习题"><a class="header-anchor" href="#练习题">¶</a>练习题</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于基本类型当中的boolean值，Getter方法一 -定 要写成isXxx的形式，而setXxx规则不变。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> male; <span class="comment">//是不是爷们儿</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMale</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">		male=b;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> male ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		name = str;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		age = num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="this关键字的作用"><a class="header-anchor" href="#this关键字的作用">¶</a>this关键字的作用</h2>
<p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。<br>
如果需要访问本类当中的成员变量，需要使用格式:<br>
this.成员变量名<br>
“通过谁调用的方法，谁就是this。”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publiC <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	String name; <span class="comment">//我自己的名字</span></span><br><span class="line">	<span class="comment">//参数name是对方的名字</span></span><br><span class="line">	<span class="comment">//成员变量name是自己的名字</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	System. out . println(name + <span class="string">&quot;,你好。我是&quot;</span>+ <span class="keyword">this</span>. name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法"><a class="header-anchor" href="#构造方法">¶</a>构造方法</h2>
<p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。<br>
格式:<br>
public类名称(参数类型参数名称) {<br>
方法体<br>
注意事项:<br>
1.构造方法的名称必须和所在的类名称完全-样，就连大小写也要一样<br>
2.构造方法不要写返回值类型，连void都不写<br>
3.构造方法不能return一个具体的返回值<br>
4.如果没有编写任何构造方法，那么编译器将会默认赠送一 个构造方法，没有参数、方法体什么事情都不做。<br>
public Student() {}<br>
5.一旦编写了至少一个构造方法，那么编译器将不再赠送。<br>
6.构造方法也是可以进行重载的。<br>
重载:方法名称相同，参数列表不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System. out . print1n(“无参构造方法执行啦! <span class="string">&quot;);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	public Student(String name, int age) &#123;</span></span><br><span class="line"><span class="string">		System. out . println(&quot;</span>全参构造方法执行啦! <span class="string">&quot;);</span></span><br><span class="line"><span class="string">		this.name = name ;</span></span><br><span class="line"><span class="string">		this.age = age;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">    public void setName(String name) &#123;</span></span><br><span class="line"><span class="string">		this.name = name;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	public String getName() &#123;</span></span><br><span class="line"><span class="string">		return name ;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	public void setAge(int age) &#123;</span></span><br><span class="line"><span class="string">		this.age = age;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	public int getAge() &#123;</span></span><br><span class="line"><span class="string">		return age;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Student stul = <span class="keyword">new</span> Student(); <span class="comment">//无参构造</span></span><br><span class="line">		System. out . println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">		Student stu2 = <span class="keyword">new</span> Student( name: “赵丽颖<span class="string">&quot;，age: 20); //全参构造</span></span><br><span class="line"><span class="string">		System. out . println(&quot;</span>姓名:”+ stu2. getName() + <span class="string">&quot;，年龄:”+ stu2.getAge());</span></span><br><span class="line"><span class="string">        //如果需要改变对象当中的成员变量数据内容，仍然还需要使用setXxx方法</span></span><br><span class="line"><span class="string">		stu2. setAge(21); //改变年龄</span></span><br><span class="line"><span class="string">		System. out . println(&quot;</span>姓名:”+ stu2.getName() + <span class="string">&quot;，年龄:”+ stu2.getAge());               </span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="定义一个标准的类"><a class="header-anchor" href="#定义一个标准的类">¶</a>定义一个标准的类</h2>
<p><strong>一个标准的类通常要拥有下面四个组成部分:</strong><br>
<strong>1.所有的成员变量都要使用private关键字修饰</strong><br>
<strong>2.为每一个成员变量编写一对儿Getter/Setter方法</strong><br>
<strong>3.编写一个无参数的构造方法</strong><br>
<strong>4.编写一个全参数的构造方法</strong><br>
<strong>这样标准的类也叫做Java Bean</strong></p>
<p><strong>自动生成</strong>*<u>Getter/Setter方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Getter and Setter------&gt;全部选中（shift）+ok</p>
<p><strong>自动生成</strong>*<u>无参数的构造方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Constructor-------&gt;Select None</p>
<p><strong>自动生成</strong>*<u>全参数的构造方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Constructor-------&gt;全部选中（shift）+ok</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        stu1.setName(<span class="string">&quot;霉霉&quot;</span>);</span><br><span class="line">        stu1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu1.getName() +<span class="string">&quot;年龄：&quot;</span>+stu1.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;水果姐&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu2.getName() +<span class="string">&quot;年龄：&quot;</span>+stu2.getAge());</span><br><span class="line">        stu2.setAge(<span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu2.getName() +<span class="string">&quot;年龄：&quot;</span>+stu2.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>API</h1>
<h2 id="概述-v2"><a class="header-anchor" href="#概述-v2">¶</a>概述</h2>
<p>API(Application Programming Interface),应用程序编程接口。Java API是一本程序员的<code>字典</code>，是JDK中提供给我们使用的类的<strong>说明文档</strong>。这些类将底层的代码实现封装了起来，我们不需要关心这些类是如何实现的,只需要学习这些类如何使用即可。所以我们可以通过查询API的方式，来学习Java提供的类，并得知如何使用它们。</p>
<h2 id="API使用步骤"><a class="header-anchor" href="#API使用步骤">¶</a>API使用步骤</h2>
<p>1.打开帮助文档。<br>
2.点击显示，找到索引，看到输入框。<br>
3.你要找谁?在输入框里输入，然后回车。<br>
4.看包。java.lang 下的类不需要导包，其他需要。<br>
5.看类的解释和说明。<br>
6.学习构造方法。<br>
7.使用成员方法。</p>
<h2 id="Scanner类"><a class="header-anchor" href="#Scanner类">¶</a>Scanner类</h2>
<h3 id="概述-v3"><a class="header-anchor" href="#概述-v3">¶</a>概述</h3>
<p>一个可以解析基本类型和字符串的简单文本扫描器。<br>
例如，以吓代码使用户能够从System.in中读取一个数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sC = <span class="keyword">new</span> Scanner(System. in);</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注: <a href="http://System.in">System.in</a> 系统输入指的是通过键盘录入数据。</p>
</blockquote>
<h3 id="使用步骤"><a class="header-anchor" href="#使用步骤">¶</a>使用步骤</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java. util . Scanner;<span class="comment">// 1.导包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**Scanner类的功能:**可以实现键盘输入数据，到程序当中。</span></span><br><span class="line"><span class="comment">引用类型的一般使用步骤: </span></span><br><span class="line"><span class="comment">**1.导包**</span></span><br><span class="line"><span class="comment">import包路径.类名称;</span></span><br><span class="line"><span class="comment">如果需要使用的目标类，和当前类位于同- -个包下，则可以省略导包语句不写。</span></span><br><span class="line"><span class="comment">只有java. lang包下的内容不需要导包，其他的包都需要import语句。</span></span><br><span class="line"><span class="comment">**2.创建**</span></span><br><span class="line"><span class="comment">类名称对象名= new 类名称();</span></span><br><span class="line"><span class="comment">**3.使用**</span></span><br><span class="line"><span class="comment">对象名.成员方法名()</span></span><br><span class="line"><span class="comment">获取键盘输入的一个int数字: int num = sc. nextInt();</span></span><br><span class="line"><span class="comment">获取键盘输入的一个字符串: String str =sc.next();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Scanner</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 2.创建</span></span><br><span class="line">		<span class="comment">//备注: System. in代表从键盘进行输入</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System. in);</span><br><span class="line">		<span class="comment">// 3.获取键盘输入的int数字</span></span><br><span class="line">		<span class="keyword">int</span> num = sc.nextInt( );</span><br><span class="line">		System. out. println( <span class="string">&quot;输入的int数字是:&quot;</span> + num);</span><br><span class="line">       <span class="comment">// 4.获取键盘输入的字符串</span></span><br><span class="line">		String str = sc.next( );</span><br><span class="line">		System. out . println( <span class="string">&quot;输入的字符串是:&quot;</span> + str);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="练习题-v2"><a class="header-anchor" href="#练习题-v2">¶</a>练习题</h4>
<p>1、键盘输入两个int数字，并求出和值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ScannerSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = src.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = src.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = a + b ;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、键盘输入三个int数字，然后求出其中的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">键盘输入三个int数字，然后求出其中的最大值。</span></span><br><span class="line"><span class="comment">思路，</span></span><br><span class="line"><span class="comment">芯岭:</span></span><br><span class="line"><span class="comment">1.既然是键盘输入，肯定需要用到Scanner</span></span><br><span class="line"><span class="comment">2. Scanner三个步骤:导包、创建、使用nextInt()方法</span></span><br><span class="line"><span class="comment">3. 既然是三个数字，那么调用三次nextInt()方法，得到三个int变量</span></span><br><span class="line"><span class="comment">4.无法同时判断三个数字谁最大，应该转换成为两个步骤:</span></span><br><span class="line"><span class="comment">    4.1首先判断前两个当中谁最大，拿到前两个的最大值</span></span><br><span class="line"><span class="comment">    4.2拿着前两个中的最大值，再和第三个数字比较，得到三个数字当中的最大值</span></span><br><span class="line"><span class="comment">5.打印最终结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ScannerMax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> [] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = src.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = src.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> c = src.nextInt();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> temp = a &gt; b ? a:b;</span><br><span class="line">       <span class="keyword">int</span> max = temp &gt; c ? temp:c;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果：&quot;</span>+max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名对象的说明"><a class="header-anchor" href="#匿名对象的说明">¶</a>匿名对象的说明</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建对象的标准格式:</span></span><br><span class="line"><span class="comment">类名称 对象名= new 类名称();</span></span><br><span class="line"><span class="comment">匿名对象就是只有右边的对象，没有左边的名字和赋值运算符。</span></span><br><span class="line"><span class="comment">new.类名称();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">匿名对象只能使用唯一-的一 次，下次再用不得不再创建一个新对 象。</span></span><br><span class="line"><span class="comment">使用建议:如果确定有一个对象只需要使用唯一 的一 次，就可以用匿名对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Anonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person one = <span class="keyword">new</span> Person();</span><br><span class="line">        one.name = <span class="string">&quot;泰勒斯威夫特&quot;</span>;<span class="comment">//我叫泰勒斯威夫特</span></span><br><span class="line">        one.ShowName();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Person().name=<span class="string">&quot;Rose&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> Person().ShowName();<span class="comment">//我叫null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名对象作为方法的参数和返回值"><a class="header-anchor" href="#匿名对象作为方法的参数和返回值">¶</a>匿名对象作为方法的参数和返回值</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Anonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//普通使用方式</span></span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数值：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = src.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的结果是：&quot;</span>+ num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名对象的方式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数值：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的结果是：&quot;</span>+ num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用一般方法传入参数</span></span><br><span class="line"><span class="comment">//        Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        methodParam(sc);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用匿名对象来进行传递参数</span></span><br><span class="line">        methodParam(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line"></span><br><span class="line">        Scanner sc = methodreturn();</span><br><span class="line">        <span class="keyword">int</span> num3=sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输出：&quot;</span>+num3);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodParam</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的是：&quot;</span>+ num);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">methodreturn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        return sc;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Random"><a class="header-anchor" href="#Random">¶</a>Random</h2>
<h3 id="概述和基本使用"><a class="header-anchor" href="#概述和基本使用">¶</a>概述和基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Random类用来生成随机数字。使用起来也是三个步骤:</span></span><br><span class="line"><span class="comment">1.导包</span></span><br><span class="line"><span class="comment">import java . util . Random;</span></span><br><span class="line"><span class="comment">2.创建</span></span><br><span class="line"><span class="comment">Random r = new Random(); //小括号当中留空即可</span></span><br><span class="line"><span class="comment">3.使用</span></span><br><span class="line"><span class="comment">获取一个随机的int数字(范围是int所有范围，有正负两种) : int num =r.nextInt()</span></span><br><span class="line"><span class="comment">获取一个随机的int数字(参数代表了范围，左闭右开区间) : int num = r. nextInt(3)</span></span><br><span class="line"><span class="comment">实际上代表的含义是: [0,3)， 也就是0~2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;随机数为：&quot;</span>+num);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = r.nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(num1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="练习题-v3"><a class="header-anchor" href="#练习题-v3">¶</a>练习题</h4>
<p>1、生成1-n之间的随机数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目要求:</span></span><br><span class="line"><span class="comment">根据int变量n的值，来获取随机数字，范围是[1,n]， 可以取到1也可以取到n。</span></span><br><span class="line"><span class="comment">思路</span></span><br><span class="line"><span class="comment">1.定义一个int变量n，随意赋值</span></span><br><span class="line"><span class="comment">2.要使用Random: 三个步骤，导包、创建、使用</span></span><br><span class="line"><span class="comment">3.如果写10，那么就是0~9，然而想要的是1~10，可以发现:整体+1即可。</span></span><br><span class="line"><span class="comment">4.打印随机数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(n);</span><br><span class="line">            System.out.println(num + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        <span class="keyword">int</span> result = r.nextInt(n) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(result);<span class="comment">//本来范围是[0,1)，整体+1之后变成了[1,n+1)， 也就是[1,n]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、猜数字小游戏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">用代码模拟猜数字的小游戏。</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.首先需要产生一个随机数字，并且- - 旦产生不再变化。用Random的nextInt方法</span></span><br><span class="line"><span class="comment">2.需要键盘输入，所以用到了Scanner</span></span><br><span class="line"><span class="comment">3.获取键盘输入的数字，用Scanner当中的nextInt方法</span></span><br><span class="line"><span class="comment">4.已经得到了两个数字，判断(if) -下:</span></span><br><span class="line"><span class="comment">    如果太大了，提示太大，并且重试;</span></span><br><span class="line"><span class="comment">    如果太小了，提示太小，并且重试:</span></span><br><span class="line"><span class="comment">    如果猜中了，游戏结束。</span></span><br><span class="line"><span class="comment">5.重试就是再来一次， 循环次数不确定，用while(true)。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03RandomGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;<span class="comment">//范围是在[1，100]区间</span></span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你猜测的数字：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> num1 = sc.nextInt();<span class="comment">//读取键盘输入的数字</span></span><br><span class="line">            <span class="keyword">if</span> (num1 &lt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜测的数字偏小，请重新输入！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &gt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜测的数字偏大，请重新输入！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你猜对了！！！！！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//Game over 退出游戏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象数组"><a class="header-anchor" href="#对象数组">¶</a>对象数组</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义一个数组，用来存储3个Person对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组有一个缺点：一旦创建，程序运行期间长度不可以发生改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先创建一个长度为3的数组，里面用来存放Person类型的对象</span></span><br><span class="line">        Person [] array = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        Person one = <span class="keyword">new</span> Person(<span class="string">&quot;霉霉&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Person two = <span class="keyword">new</span> Person(<span class="string">&quot;水果姐&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Person three = <span class="keyword">new</span> Person(<span class="string">&quot;Rechel&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        array[<span class="number">0</span>] = one;  <span class="comment">//将one当中的地址值赋值到数组的0号元素位置</span></span><br><span class="line">        array[<span class="number">1</span>] = two;<span class="comment">//将two当中的地址值赋值到数组的1号元素位置</span></span><br><span class="line">        array[<span class="number">2</span>] = three;<span class="comment">//将three当中的地址值赋值到数组的2号元素位置</span></span><br><span class="line"></span><br><span class="line">        System.out.println(array[<span class="number">0</span>].getName() + <span class="string">&quot;  &quot;</span>+ array[<span class="number">0</span>].getAge());</span><br><span class="line">        System.out.println(array[<span class="number">1</span>].getName() + <span class="string">&quot;  &quot;</span> + array[<span class="number">1</span>].getAge());</span><br><span class="line">        System.out.println(array[<span class="number">2</span>].getName() + <span class="string">&quot;  &quot;</span> + array[<span class="number">2</span>].getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ArrayList类"><a class="header-anchor" href="#ArrayList类">¶</a>ArrayList类</h2>
<p><code>java.util. Arraylist</code> 是<strong>大小可变的数组</strong>的实现，存储在内的数据称为元素。此类提供一 些方法来操作内部存储的元素。<code>ArrayList</code> 中可不断添加元素，其大小也自动增长。</p>
<blockquote>
<p>和数组的区别：<br>
数组的长度不可以发生改变。<br>
但是ArrayList集合的长度是可以随意变化的。</p>
</blockquote>
<h3 id="基本使用和概述"><a class="header-anchor" href="#基本使用和概述">¶</a>基本使用和概述</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于ArrayList来说，有一个尖括号&lt;E&gt;代表泛型。</span></span><br><span class="line"><span class="comment">泛型:也就是装在集合当中的所有元素，全都是统- -的什么类型。</span></span><br><span class="line"><span class="comment">注意:泛型只能是引用类型，不能是基本类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。</span></span><br><span class="line"><span class="comment">如果内容是空，得到的是空的中括号: []</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建了一个ArrayList集合，集合的名称是list， 里面装的全都是String字符串类型的数据</span></span><br><span class="line">        <span class="comment">//备注:从JDK 1.7+开始，右侧的尖括号内部可以不写内容，但是&lt;&gt;本身还是要写的。</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中放一些数据，需要用到add方法</span></span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Manica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Jeoy&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Phobe&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Bing&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list.add(100);//错误写法!因为创建的时候尖括号泛型已经说了是字符串，</span></span><br><span class="line">                         <span class="comment">// 添加进去的元素就必须都是字符串才行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用方法和遍历"><a class="header-anchor" href="#常用方法和遍历">¶</a>常用方法和遍历</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayL ist当中的常用方法有:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public boolean add(E e): 向集合当中添加元素，参数的类型和泛型一致。</span></span><br><span class="line"><span class="comment">备注:对于ArrayL ist集合来说，add添加动作一定是成功的，所以返回值可用可不用。</span></span><br><span class="line"><span class="comment">但是对于其他集合(今后学习)来说，add添加动作不一定成功。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public E get(int index): 从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public E remove(int index): 从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public int size(): 获取集合的尺寸长度，返回值是集合中包含的元素个数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素：add</span></span><br><span class="line">        <span class="keyword">boolean</span> success = list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加的动作是否成功&quot;</span> + success);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Bing&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Jeoy&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[柳岩, Rose, Rechel, Bing, Jeoy]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合中获取元素: get。 索引值从开始0开始</span></span><br><span class="line">        String name = list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二号位索引值为：&quot;</span> + name);<span class="comment">//Rechel</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合中删除元素：remove。索引值从0开始</span></span><br><span class="line">        String whoRemove = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的是：&quot;</span> + whoRemove);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取集合的长度，也就是集合中的元素数</span></span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;集合的长度是：&quot;</span> + size);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Manica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Chandler&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Pheebs&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Joey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="集合存储基本数据类型"><a class="header-anchor" href="#集合存储基本数据类型">¶</a>集合存储基本数据类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从JDK 1.5+开始， 支持自动装箱、自动拆箱。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自动装箱:基本类型--&gt; 包装类型（引用类型）</span></span><br><span class="line"><span class="comment">自动拆箱:包装类型--&gt;基本类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListBasic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//错误写法!泛型只能是引用类型，不能是基本类型</span></span><br><span class="line">       <span class="comment">//ArrayList&lt;int&gt; listB = new ArrayList&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; listC = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listC.add(<span class="number">1000</span>);</span><br><span class="line">        listC.add(<span class="number">18888</span>);</span><br><span class="line">        listC.add(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">int</span> num = listC.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一号元素是：&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类(引用类型，包装类都位于<code>java. lang</code>包下)</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer          <strong>[特殊]</strong></td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character      <strong>[特殊]</strong></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<h3 id="练习题-v4"><a class="header-anchor" href="#练习题-v4">¶</a>练习题</h3>
<h4 id="1、存储随机数字"><a class="header-anchor" href="#1、存储随机数字">¶</a>1、存储随机数字</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">生成6个1~33之间的随机整数，添加到集合，并遍历集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.需要存储6个数字，创建一个集合， &lt;Integer&gt;</span></span><br><span class="line"><span class="comment">2.产生随机数，需要用到Random</span></span><br><span class="line"><span class="comment">3.用循环6次，来产生6个随机数字: for循环</span></span><br><span class="line"><span class="comment">4.循环内调用r. nextInt(int n)，参数是33，0~32，整体+1才是1~33</span></span><br><span class="line"><span class="comment">5.把数字添加到集合中: add</span></span><br><span class="line"><span class="comment">6.遍历集合: for、size、 get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ArrayListRandom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(<span class="number">33</span>);</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> +j+ <span class="string">&quot;号元素为：&quot;</span> + list.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、存储自定义对象"><a class="header-anchor" href="#2、存储自定义对象">¶</a>2、存储自定义对象</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">自定义4个学生对象，添加到集合，并遍历。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.自定义Student学生类， 四个部分。</span></span><br><span class="line"><span class="comment">2.创建一个集合，用来存储学生对象。泛型: &lt;Student&gt;</span></span><br><span class="line"><span class="comment">3.根据类，创建4个学生对象。</span></span><br><span class="line"><span class="comment">4.将4个学生对象添加到集合中: add</span></span><br><span class="line"><span class="comment">5.遍历集合: for、size、 get</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03ArrayListStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;Pheebs&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">&quot;Manica&quot;</span>,<span class="number">26</span>);</span><br><span class="line">        Student stu4 = <span class="keyword">new</span> Student(<span class="string">&quot;Rayray&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        list.add(stu1);</span><br><span class="line">        list.add(stu2);</span><br><span class="line">        list.add(stu3);</span><br><span class="line">        list.add(stu4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Student one = list.get(i);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;名学生是：&quot;</span> + one.getName() + <span class="string">&quot;，年龄是：&quot;</span> + one.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">#### 3、按指定格式遍历集合</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义以指定格式打印集合的方法(ArrayList类型作为参数)，使用&#123;&#125;扩起集合，使用@分隔每个元素。</span></span><br><span class="line"><span class="comment">格式参照&#123;元素@元素@元素&#125;。</span></span><br><span class="line"><span class="comment">System. out. println(list);     [10, 20, 30]</span></span><br><span class="line"><span class="comment">printArrayList(list);           &#123;10@20@30&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04ArrayListPrint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rachel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Monica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Chandler&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Pheebs&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Joey&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        printArraylist(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义方法的三要素</span></span><br><span class="line"><span class="comment">    返回值类型:只是进行打印而已，没有运算，没有结果，所以用void</span></span><br><span class="line"><span class="comment">    方法名称: printArraylist</span></span><br><span class="line"><span class="comment">    参数列表: Arraylist</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArraylist</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            String name = list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(name + <span class="string">&quot;@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、筛选集合中的随机数"><a class="header-anchor" href="#4、筛选集合中的随机数">¶</a>4、筛选集合中的随机数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">用一个大集合存入20个随机数字，然后筛选其中的偶数元素，放到小集合当中。</span></span><br><span class="line"><span class="comment">要求使用自定义的方法来实现筛选。</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.需要创建一个大集合，用来存储int数字: &lt;Integer&gt;</span></span><br><span class="line"><span class="comment">2.随机数字就用Random nextInt</span></span><br><span class="line"><span class="comment">3.循环20次，把随机数字放入大集合: for循环、add方法</span></span><br><span class="line"><span class="comment">4.定义一个方法，用来进行筛选。</span></span><br><span class="line"><span class="comment">筛选:根据大集合，筛选符合要求的元素，得到小集合。</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型: ArrayLlist小集合(里面元素个数不确定)</span></span><br><span class="line"><span class="comment">方法名称: getSmalllist</span></span><br><span class="line"><span class="comment">参数列表: ArrayList大集合(装着20个随机数字)</span></span><br><span class="line"><span class="comment">5.判断(if)是偶数:num%2==0</span></span><br><span class="line"><span class="comment">6.如果是偶数，就放到小集合当中，否则不放。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05ArrayListReturn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; biglist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">//1~100</span></span><br><span class="line">            biglist.add(num1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大集合是：&quot;</span> + biglist);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，me</span></span><br><span class="line">        selectMethod(biglist);</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//teacher</span></span><br><span class="line">        ArrayList&lt;Integer&gt; SmallList = getsmallList(biglist);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SmallList.size(); i++) &#123;</span><br><span class="line">            System.out.println(SmallList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        System.out.println(SmallList);</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数一共&quot;</span>+ SmallList.size() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义筛选方法，me</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectMethod</span><span class="params">(ArrayList&lt;Integer&gt; biglist)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; smallList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; biglist.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (biglist.get(i) % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> num2 = biglist.get(i);</span><br><span class="line">                smallList.add(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;小集合是：&quot;</span> + smallList);</span><br><span class="line">            System.out.println(<span class="string">&quot;偶数一共&quot;</span> + smallList.size() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收大集合参数，返回小集合结果,teacher</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">getsmallList</span><span class="params">(ArrayList&lt;Integer&gt; biglist)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个小集合，用来装偶数结果</span></span><br><span class="line">        ArrayList&lt;Integer&gt; SmallList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; biglist.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num3 = biglist.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num3%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                SmallList.add(num3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SmallList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串（String）"><a class="header-anchor" href="#字符串（String）">¶</a>字符串（String）</h2>
<h3 id="概述和特点"><a class="header-anchor" href="#概述和特点">¶</a>概述和特点</h3>
<p><code>java. lang. String</code>类代表字符串。<br>
API当中说: Java程序中的所有字符串字面值(如&quot;abc&quot; )都作为此类的实例实现。<br>
其实就是说:程序当中所有的双引号字符串，都是String类的对象。(就算没有new， 也照样是。)<br>
字符串的特点:<br>
1.字符串的内容<strong>永不可变</strong>。[重点]<br>
2.正是因为字符串不可改变，所以字符串是可以共享使用的。<br>
3.字符串效果上相当于是char[ ]字符数组， 但是底层原理是byte[]字节数组。</p>
<h3 id="构造方法和直接创建"><a class="header-anchor" href="#构造方法和直接创建">¶</a>构造方法和直接创建</h3>
<p>创建字符串的常见3+1种方式。<br>
三种构造方法:<br>
public String(): 创建一个空白字符串， 不含有任何内容。<br>
public String(char[] array): 根据字符数组的内容，来创建对应的字符串。<br>
public String(byte[] array): 根据字节数组的内容，来创建对应的字符串。<br>
一种直接创建:<br>
<code>String str = &quot;Hello&quot;; //右边直接用双引号</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用空参构造</span></span><br><span class="line">        String str1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个字符串：&quot;</span> + str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据字符数组创建字符串</span></span><br><span class="line">        <span class="keyword">char</span>[] charArry = &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span> ,<span class="string">&#x27;6&#x27;</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(charArry);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个字符串：&quot;</span> + str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据字节数组创建字符串</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个字符串：&quot;</span> + str3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接创建字符串</span></span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四个字符串：&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串的常量池"><a class="header-anchor" href="#字符串的常量池">¶</a>字符串的常量池</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(charArray);</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(str1 == str3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(str2 == str3);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200726121234.png" alt="image-20200726121231535"></p>
<h3 id="字符串的比较方法"><a class="header-anchor" href="#字符串的比较方法">¶</a>字符串的比较方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">==是进行对象的地址值比较，如果确买需要子符串的内容比较，可以使用两个方法:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public. boolean equals(Object. obj): 参数可以是任何对象，只有参数是一个字符串并 且内容相同的才会给true;否则返回false。</span></span><br><span class="line"><span class="comment">备注:任何对象都能用object进行接收。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.任何对象都能用object进行接收。</span></span><br><span class="line"><span class="comment">2. equals方法具有 对称性，也就是a. equals(b)和b. equals(a)效果-样。</span></span><br><span class="line"><span class="comment">3.如果比较双方一个常量-一个变量，推荐把常量字符串写在前面。</span></span><br><span class="line"><span class="comment">推荐: &quot;abc&quot;. equals(str)不推荐: str. equals(&quot;abc&quot;)</span></span><br><span class="line"><span class="comment">public boolean equalsIgnoreCase(String str): 忽略大小写，进行内容比较。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringEquals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(charArray);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str3.equals(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>.equals(str3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(str1.equals(str4));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str5 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equals(str5));<span class="comment">//推荐：false</span></span><br><span class="line">        <span class="comment">//System.out.println(str5.equals(&quot;abc&quot;));//不推荐，报错，空指针异常NullPointerException</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str4));<span class="comment">//true,忽略大小写</span></span><br><span class="line">        <span class="comment">//注意：只有英文字母区分大小写，汉字不区分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串获取相关方法"><a class="header-anchor" href="#字符串获取相关方法">¶</a>字符串获取相关方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String当中与获取相关的常用方法有:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public int length(); 获取字符串当中含有的字符个数，拿到字符串长度。</span></span><br><span class="line"><span class="comment">public String concat(String str): 将当前字符串和参数字符串拼接成为返回值新的字符串。</span></span><br><span class="line"><span class="comment">public char charAt(int index): 获取指定索引位置的单个字符。( 索引从开始。)</span></span><br><span class="line"><span class="comment">public int index0f(String str): 查找参数字符串在本字符串当中首次出现的索引位置，如果没有返回-1值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="string">&quot;askkjfbakjkjdbajhvbajbvn&quot;</span>.length();</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串的个数：&quot;</span> + length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接字符串</span></span><br><span class="line">        String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        String str3 = str1.concat(str2);</span><br><span class="line">        System.out.println(str1);<span class="comment">//Hello</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//World</span></span><br><span class="line">        System.out.println(str3);<span class="comment">//HelloWorld,新的字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定索引位置的单个字符</span></span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">&quot;Hello&quot;</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第零号索引位置的字符是：&quot;</span> + ch);<span class="comment">//H</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找参数字符串在本来字符串当中出现的第一次索引的位置</span></span><br><span class="line">        <span class="comment">//如果没有，返回-1值</span></span><br><span class="line">        String original = <span class="string">&quot;HelloWorldHelloWorld&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> index = original.indexOf(<span class="string">&quot;llo&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次索引值：&quot;</span> + index);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>.indexOf(<span class="string">&quot;abc&quot;</span>));<span class="comment">//-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串的截取方法"><a class="header-anchor" href="#字符串的截取方法">¶</a>字符串的截取方法</h3>
<blockquote>
<p>字符串的截取方法: .<br>
public String substring(int index): 截取从参数位置- -直到字符串末尾，返回新字符串。<br>
public String substring(int begin, int end): 截取从begin开始， 一直到end结束，中间的字符串。<br>
备注: [begin,end)， 包含左边，不包含右边。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01SubString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String str2 = str1.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(str1);<span class="comment">//原封不动</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//World,新字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str3 = str1.substring(<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line">        System.out.println(str3);<span class="comment">//oWo</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面这种写法，字符串的内容仍然是没有改变的</span></span><br><span class="line">        <span class="comment">//下面有两个字符串: &quot;Hello&quot;，&quot;Java&quot;</span></span><br><span class="line">        <span class="comment">//strA当中保存的是地址值。</span></span><br><span class="line">        <span class="comment">//本来地址值是Hello的0x666,</span></span><br><span class="line">        <span class="comment">//后来地址值变成了Java的0x999</span></span><br><span class="line">        String strA = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(strA);<span class="comment">//Hello</span></span><br><span class="line">        strA = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(strA);<span class="comment">//Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串的转换相关方法"><a class="header-anchor" href="#字符串的转换相关方法">¶</a>字符串的转换相关方法</h3>
<blockquote>
<p>String当中与转换相关的常用方法有:</p>
<p>public char[] toCharArray(): 将当前字符串拆分成为字符数组作为返回值。<br>
public byte[] getBytes(): 获得当前字符串底层的字节数组。<br>
public String replace(CharSequence oldString, CharSequence newString):<br>
将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串。<br>
备注: CharSequence意思就是说可以接受字符串类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringConvert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转换成字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">&quot;Hello&quot;</span>.toCharArray();</span><br><span class="line">        System.out.println(chars[<span class="number">0</span>]);<span class="comment">//H</span></span><br><span class="line">        System.out.println(chars.length);<span class="comment">//5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="string">&quot;abc&quot;</span>.getBytes();</span><br><span class="line">        System.out.println(bytes);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.println(bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串的内容替换</span></span><br><span class="line">        String str1 = <span class="string">&quot;How you doing?&quot;</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;(·——·)&quot;</span>);</span><br><span class="line">        System.out.println(str1);<span class="comment">//How you doing?</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//How you doing(·——·)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String lang1 = <span class="string">&quot;你他妈的会不会玩，我操,我操！！！&quot;</span>;</span><br><span class="line">        String lang2 = lang1.replace(<span class="string">&quot;我操&quot;</span>, <span class="string">&quot;我*&quot;</span>);</span><br><span class="line">        String lang3 = lang2.replace(<span class="string">&quot;他妈的&quot;</span>, <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(lang3);<span class="comment">//你***会不会玩，我*,我*！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串的分割方法"><a class="header-anchor" href="#字符串的分割方法">¶</a>字符串的分割方法</h3>
<p>分割字符串的方法: .<br>
public String[] split(String regex): 按照参数的规则，将字符串切分成为若干部分。</p>
<p><strong>注意事项</strong>:<br>
split方法的参数其实是一个“<strong>正则表达式</strong>”，今后学习。<br>
今天要注意:如果按照英文句点**“.”**进行切分，必须写<code>&quot;\\.&quot;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringSplit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;a,bb,ccc,dddd,eeeee&quot;</span>;</span><br><span class="line">        String[] str2 = str1.split(<span class="string">&quot;,&quot;</span>);<span class="comment">//以逗号为规则进行切割</span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span><br><span class="line">            System.out.println(str2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        String str3 = <span class="string">&quot;A BB CCC DDDD EEEEE FFFFFF&quot;</span>;</span><br><span class="line">        String[] str4 = str3.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为规则进行切割</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str4.length; i++) &#123;</span><br><span class="line">            System.out.println(str4[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以“.”必须用“\\.”表示，比较特殊的切割</span></span><br><span class="line">        String str5 = <span class="string">&quot;XXXX.YYYY.ZZZZ&quot;</span>;</span><br><span class="line">        String[] str6 = str5.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str6.length; i++) &#123;</span><br><span class="line">            System.out.println(str6[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习题-v5"><a class="header-anchor" href="#练习题-v5">¶</a>练习题</h3>
<h4 id="1、按指定格式拼接字符串"><a class="header-anchor" href="#1、按指定格式拼接字符串">¶</a>1、按指定格式拼接字符串</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义一个方法，把数组&#123;1, 2, 3&#125;按照指定格式拼接成一个字符串 。格式参照如下: [word1#word2#word3]。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.首先准备一个int[]数组，内容是: 1、2、3</span></span><br><span class="line"><span class="comment">2.定义一个方法，用来将数组变成字符串</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型: String</span></span><br><span class="line"><span class="comment">方法名称: fromArrayToString</span></span><br><span class="line"><span class="comment">参数列表: int[]</span></span><br><span class="line"><span class="comment">3.格式: [word1 #word2#word3]</span></span><br><span class="line"><span class="comment">用到: for循环、字符串拼接、每个数组元素之前都有-个word字样、分隔使用的是#、区分- -下是不是最后-一个</span></span><br><span class="line"><span class="comment">4.调用方法，得到返回值，并打印结果字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StringPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] Array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String result = fromArrayToString(Array);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fromArrayToString</span><span class="params">(<span class="keyword">int</span>[] Array)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i ==Array.length - <span class="number">1</span> )&#123;</span><br><span class="line">                str += <span class="string">&quot;word&quot;</span> + Array[i] + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">&quot;word&quot;</span> + Array[i] + <span class="string">&quot;#&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、统计输入的字符串中各种字符的个数"><a class="header-anchor" href="#2、统计输入的字符串中各种字符的个数">¶</a>2、统计输入的字符串中各种字符的个数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">键盘输入一个字符串，并且统计其中各种字符出现的次数。</span></span><br><span class="line"><span class="comment">种类有:大写字母、小写字母、数字、其他</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.既然用到键盘输入，肯定是Scanner</span></span><br><span class="line"><span class="comment">2.键盘输入的是字符串，那么: String str = sc.next();</span></span><br><span class="line"><span class="comment">3.定义四个变量，分别代表四种字符各自的出现次数。</span></span><br><span class="line"><span class="comment">4.需要对字符串一个字、一个字检查，String--&gt;char[],方法就是toCharArray()</span></span><br><span class="line"><span class="comment">5.遍历char[ ]字符数组，对当前字符的种类进行判断，并且用四个变量进行++动作。</span></span><br><span class="line"><span class="comment">6.打印输出四个变量，分别代表四种字符出现次数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StringCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String input = sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> countUpper = <span class="number">0</span>;<span class="comment">//大写字母</span></span><br><span class="line">        <span class="keyword">int</span> countLower = <span class="number">0</span>;<span class="comment">//小写字母</span></span><br><span class="line">        <span class="keyword">int</span> countNumber = <span class="number">0</span>;<span class="comment">//数字</span></span><br><span class="line">        <span class="keyword">int</span> countOther = <span class="number">0</span>;<span class="comment">//其他字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] Array = input.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = Array[i];<span class="comment">//当前单个字符</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;A&#x27;</span> &lt;= ch &amp;&amp; ch &lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                countUpper++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;a&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                countLower++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;=ch &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                countNumber++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                countOther++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母的个数：&quot;</span> + countUpper);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母的个数：&quot;</span> + countLower);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字的个数：&quot;</span> + countNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他字符的个数：&quot;</span> + countOther);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入的字符串不能有空格存在</p>
</blockquote>
<h2 id="静态static关键字"><a class="header-anchor" href="#静态static关键字">¶</a>静态static关键字</h2>
<h3 id="概述-v4"><a class="header-anchor" href="#概述-v4">¶</a>概述</h3>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727143324.png" alt="image-20200726215716336"></p>
<h3 id="修饰成员变量"><a class="header-anchor" href="#修饰成员变量">¶</a>修饰成员变量</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个成员变量使用了static关键字， 那么这个变量不再属于对象自己，而是属于所在的类。多个对象共享同一-份数据。.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StaticField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student one = <span class="keyword">new</span> Student(<span class="string">&quot;霉霉&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        one.room = <span class="string">&quot;101教室&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + one.getName() + <span class="string">&quot;,年龄：&quot;</span></span><br><span class="line">                + one.getAge() + <span class="string">&quot;,教室：&quot;</span> + one.room</span><br><span class="line">        +<span class="string">&quot;，学号：&quot;</span> + one.getId());</span><br><span class="line"></span><br><span class="line">        Student two = <span class="keyword">new</span> Student(<span class="string">&quot;水果姐&quot;</span> ,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + two.getName() + <span class="string">&quot;,年龄：&quot;</span></span><br><span class="line">                + two.getAge()+ <span class="string">&quot;,教室：&quot;</span> + two.room</span><br><span class="line">                +<span class="string">&quot;，学号：&quot;</span> + two.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">static</span> String room;<span class="comment">//教室</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idcounter = <span class="number">0</span>;<span class="comment">//学号计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idcounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idcounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修饰成员方法"><a class="header-anchor" href="#修饰成员方法">¶</a>修饰成员方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numStatic;<span class="comment">//静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个成员方法&quot;</span>);</span><br><span class="line">        <span class="comment">//成员方法可以访问成员变量</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//成员方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个静态方法&quot;</span>);</span><br><span class="line">        <span class="comment">//静态方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">        <span class="comment">//静态方法不可以访问成员变量</span></span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line"><span class="comment">//        System.out.println(this);静态方法不能用this（当前方法调用）关键字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">无论是成员变量，还是成员方法。如果有了static,都推荐使用类名称进行调用。</span></span><br><span class="line"><span class="comment">静态变量:类名称.静态变量</span></span><br><span class="line"><span class="comment">静态方法:类名称.静态方法()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.静态不能直接访问非静态。</span></span><br><span class="line"><span class="comment">原因:因为在内存当中是[先]有的静态内容，[后] 有的非静态内容。</span></span><br><span class="line"><span class="comment">“先人不知道后人，但是后人知道先人。”</span></span><br><span class="line"><span class="comment">2.静态方法当中不能用this。</span></span><br><span class="line"><span class="comment">原因: this代表当前对象，通过谁调用的方法，谁就是当前对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass();<span class="comment">//首先创建对象</span></span><br><span class="line">        <span class="comment">//然后才能用没有static关键字的内容</span></span><br><span class="line">        obj.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。</span></span><br><span class="line">        obj.methodStatic();<span class="comment">//正确，不推荐；这种写法在编译之后也会被javac翻译成为“类名称.静态方法名”</span></span><br><span class="line">        MyClass.methodStatic();<span class="comment">//正确，推荐</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于本来当中的静态方法，可以省略类名称</span></span><br><span class="line">        Memethod();</span><br><span class="line">        Dome02StaticMethod.Memethod();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Memethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自己的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="内存图"><a class="header-anchor" href="#内存图">¶</a>内存图</h3>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727143255.png" alt="image-20200727143244285"></p>
<h3 id="静态代码块"><a class="header-anchor" href="#静态代码块">¶</a>静态代码块</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态代码块的格式是:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class 类名称&#123;</span></span><br><span class="line"><span class="comment">	static &#123;</span></span><br><span class="line"><span class="comment">		//静态代码块的内容</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">特点:当第一次用到本类时，静态代码块执行唯一的一 次。</span></span><br><span class="line"><span class="comment">静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">静态代码块的典型用途:</span></span><br><span class="line"><span class="comment">用来一次性地对静态成员变量进行赋值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="数组工具类Arrays"><a class="header-anchor" href="#数组工具类Arrays">¶</a>数组工具类Arrays</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java. util.Arrays是一个与 数组相天的工具类，里面提供I大重静念万法，用来头现数组常见的操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static String toString(数组): 将参数数组变成字符串(按照默认格式: [元素1, 元素2,元素3...]) .</span></span><br><span class="line"><span class="comment">public static void sort(数组):按照默认升序(从小到大)对数组的元素进行排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:</span></span><br><span class="line"><span class="comment">1.如果是数值，sort默认按照升序从小到大</span></span><br><span class="line"><span class="comment">29如果是字符串，sort默认按照字母升序</span></span><br><span class="line"><span class="comment">3.如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。 (今后学习)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Arrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] intArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        <span class="comment">//将int[]数组按照默认格式变成字符串</span></span><br><span class="line">        String intStr = Arrays.toString(intArray);</span><br><span class="line">        System.out.println(intStr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] array1 =&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Arrays.sort(array1);</span><br><span class="line">        System.out.println(Arrays.toString(array1));</span><br><span class="line"></span><br><span class="line">        String[] str = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;z&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;x&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;c&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;b&quot;</span></span><br><span class="line">                ,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;j&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;p&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        System.out.println(Arrays.toString(str));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="练习题-v6"><a class="header-anchor" href="#练习题-v6">¶</a>练习题</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">请使用Arrays相关的API, 将一个随机字符串中的所有字符升序排列，并倒序打印。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ArraysPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//升级：用键盘读取输入的字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何进行升序排列: sort</span></span><br><span class="line">        <span class="comment">//必须是一个数组，才能用Arrays. sort方法</span></span><br><span class="line">        <span class="comment">// String --&gt;数组，用toCharArray</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        System.out.println(Arrays.toString(chars));<span class="comment">//这是顺序排列</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接下来需要逆序排列，倒序遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数学工具类"><a class="header-anchor" href="#数学工具类">¶</a>数学工具类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.lang.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static double abs(double num): 获取绝对值。</span></span><br><span class="line"><span class="comment">public static double ceil(double num): 向.上取整。</span></span><br><span class="line"><span class="comment">public static double floor(double num):向下取整。</span></span><br><span class="line"><span class="comment">public static long round(double num): 四舍五入。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Math. PI代表近似的圆周率常量(double)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Math</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取绝对值</span></span><br><span class="line">        System.out.println(Math.abs(<span class="number">3.14</span>));<span class="comment">//3.14</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">8</span>));<span class="comment">//8</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">5.1</span>));<span class="comment">//5.1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上取整</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.9</span>));<span class="comment">//4.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.0</span>));<span class="comment">//3.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.00000001</span>));<span class="comment">//4.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.0000000000000000001</span>));<span class="comment">//3.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下取整，抹零</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.666</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.00</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.999</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//四舍五入</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.5</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.40000001</span>));<span class="comment">//5.0</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.3</span>));<span class="comment">//5.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//pi</span></span><br><span class="line">        System.out.println(Math.PI);<span class="comment">//3.141592653589793</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="练习题-v7"><a class="header-anchor" href="#练习题-v7">¶</a>练习题</h4>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727155149.png" alt="image-20200727155147074"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">计算在-10.8到5.9之间，绝对值大于6或者小于2.1的整数有多少个?</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.既然已经确定了范围，for循环</span></span><br><span class="line"><span class="comment">2.起点位置-10.8应该转换成为-10， 两种办法:</span></span><br><span class="line"><span class="comment">    2.1可以使用Math.ceil方法，向上(向正方向)取整</span></span><br><span class="line"><span class="comment">    2.2强转成为int，自动舍弃所有小数位</span></span><br><span class="line"><span class="comment">3.每一个数字都是整数，所以步进表达式应该是num++， 这样每次都是+1的。</span></span><br><span class="line"><span class="comment">4.如何拿到绝对值: Math. abs方法。.</span></span><br><span class="line"><span class="comment">5.一旦发现了一个数字，需要让计数器+ +进行统计。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04MathPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> min = -<span class="number">10.9</span>;</span><br><span class="line">        <span class="keyword">double</span> max = <span class="number">5.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) min; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> abs = Math.abs(i);</span><br><span class="line">            <span class="keyword">if</span> (abs &gt; <span class="number">6</span> || abs &lt; <span class="number">2.1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;符合要求的数字为：&quot;</span> + i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;符合要求的个数为：&quot;</span> + count + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>继承性</h1>
<h2 id="概述-v5"><a class="header-anchor" href="#概述-v5">¶</a>概述</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728102030.png" alt="image-20200728102028290"></p>
<h2 id="格式"><a class="header-anchor" href="#格式">¶</a>格式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在继承的关系中，“子类就是一一个父类”。也就是说，子类可以被当做父类看待。</span></span><br><span class="line"><span class="comment">例如父类是员工，子类是讲师，那么“讲师就是一个员工”。 关系: is-a。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义父类的格式: (一个普通的类定义)</span></span><br><span class="line"><span class="comment">public class 父类名称&#123;</span></span><br><span class="line"><span class="comment">    //...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">定义子类的格式:</span></span><br><span class="line"><span class="comment">public class 子类名称extends 父类名称&#123;</span></span><br><span class="line"><span class="comment">    //....</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="成员变量的访问特点"><a class="header-anchor" href="#成员变量的访问特点">¶</a>成员变量的访问特点</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numFu = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用本类之中，不会向下找子类的</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numZi = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//因为本类之中有num，所以优先使用本类中的num</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">直接通过子类对象访问成员变量:</span></span><br><span class="line"><span class="comment">    等号左边是谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment">间接通过成员方法访问成员变量:</span></span><br><span class="line"><span class="comment">该方法属于谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ExtendsField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu =<span class="keyword">new</span> Fu();<span class="comment">//创建父类对象</span></span><br><span class="line">        System.out.println(fu.numFu);<span class="comment">//10，只能使用父类的东西，没有任何子类内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Zi zi=<span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(zi.numZi);<span class="comment">//20</span></span><br><span class="line">        System.out.println(zi.numFu);<span class="comment">//10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等号左边是谁，就优先用谁</span></span><br><span class="line">        System.out.println(zi.num);<span class="comment">//优先子类，2000</span></span><br><span class="line"><span class="comment">//        System.out.println(zi.aba);//到处都没有，编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(fu.num);<span class="comment">//100</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个方法是子类的，优先子类的，没有再向上找</span></span><br><span class="line">        zi.methodZi();<span class="comment">//2000</span></span><br><span class="line">        <span class="comment">//这个方法是在父类当中定义的</span></span><br><span class="line">        zi.methodFu();<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区分子类方法中重名的三种方法"><a class="header-anchor" href="#区分子类方法中重名的三种方法">¶</a>区分子类方法中重名的三种方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num);<span class="comment">//30,局部变量</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);<span class="comment">//20，本类中的成员变量</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//10,父类中的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部变量:           直接写成员变量名</span></span><br><span class="line"><span class="comment">本类的成员变量:      this.成员变量名</span></span><br><span class="line"><span class="comment">父类的成员变量:      super.成员变量名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ExtendsField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成员方法的访问特点"><a class="header-anchor" href="#成员方法的访问特点">¶</a>成员方法的访问特点</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法执行！！！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类重名方法执行！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi01</span> <span class="keyword">extends</span> <span class="title">Fu01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法执行！！！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类重名方法执行！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类的继承关系当中，创建子类对象，访问成员方法的规则:</span></span><br><span class="line"><span class="comment">    创建的对象是谁，就优先用谁，如果没有则向上找。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   注意事项:</span></span><br><span class="line"><span class="comment">无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03ExtendsField01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi01 zi = <span class="keyword">new</span> Zi01();</span><br><span class="line"></span><br><span class="line">        zi.methodFu01();<span class="comment">//父类方法执行！！！！！</span></span><br><span class="line">        zi.methodZi01();<span class="comment">//子类方法执行！！！！！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建的是new了子类对象，所以优先用子类方法</span></span><br><span class="line">        zi.method();<span class="comment">//子类重名方法执行！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法的覆盖重写"><a class="header-anchor" href="#方法的覆盖重写">¶</a>方法的覆盖重写</h2>
<h3 id="概念与特点"><a class="header-anchor" href="#概念与特点">¶</a>概念与特点</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重写(Override)</span></span><br><span class="line"><span class="comment">概念:在继承关系当中，方法的名称一样，参数列表也一样。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重写(Override):方法的名称一样，参数列表[也一样]。覆盖、覆写。</span></span><br><span class="line"><span class="comment">重载(Overload) :方法的名称一样，参数列表[不一样]。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的覆盖重写特点:创建的是子类对象，则优先用子类方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法覆盖重写的注意事项:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.必须保证父子类之间方法的名称相同，参数列表也相同。</span></span><br><span class="line"><span class="comment">@Override:写在方法前面，用来检测是不是有效的正确覆盖重写。</span></span><br><span class="line"><span class="comment">这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.子类方法的返回值必须[小于等于]父类方法的返回值范围。</span></span><br><span class="line"><span class="comment">小扩展提示: java. lang . object类是所有类的公共最高父类(祖宗类)，java. lang. String就是object的子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.子类方法的权限必须[大于等于]父类方法的权限修饰符。</span></span><br><span class="line"><span class="comment">小扩展提示: public &gt; protected &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">备注: (default)不是关键字default， 而是什么都不写，留空。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="应用场景"><a class="header-anchor" href="#应用场景">¶</a>应用场景</h3>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728145141.png" alt="image-20200728143931983"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本来的老款手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示号码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个新手机，使用老手机作为父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();<span class="comment">//把父类中的show方法拿过来重复使用</span></span><br><span class="line">        <span class="comment">//自己子类再添加新的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;显示姓名&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;显示头像&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.call();</span><br><span class="line">        phone.send();</span><br><span class="line">        phone.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        NewPhone newPhone = <span class="keyword">new</span> NewPhone();</span><br><span class="line">        newPhone.call();</span><br><span class="line">        newPhone.send();</span><br><span class="line">        newPhone.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法的访问特点"><a class="header-anchor" href="#构造方法的访问特点">¶</a>构造方法的访问特点</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承关系中，父子类构造方法的访问特点:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.子类构造方法当中有一一个默认隐含的“super()&quot;调用，所以一-定是先调用的父类构造，后执行的子类构造。</span></span><br><span class="line"><span class="comment">2.子类构造可以通过super关键字来调用父类重载构造。</span></span><br><span class="line"><span class="comment">3. super的父类构造调用，必须是子类构造方法的第一个语句。 不能一个子类构造调用多次super构造。</span></span><br><span class="line"><span class="comment">总结:</span></span><br><span class="line"><span class="comment">子类必须调，用父类构造方法，不写则赠送super();写了则用写的指定的super调用，super只能有一个，还必须是第一个。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="super关键字的三种用法"><a class="header-anchor" href="#super关键字的三种用法">¶</a>super关键字的三种用法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">super关键字的用法有三种:</span></span><br><span class="line"><span class="comment">1.在子类的成员方法中，访问父类的成员变量。</span></span><br><span class="line"><span class="comment">2.在子类的成员方法中，访问父类的成员方法。</span></span><br><span class="line"><span class="comment">3.在子类的构造方法中，访问父类的构造方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi02</span> <span class="keyword">extends</span> <span class="title">Fu02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//父类中的num</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.method();<span class="comment">//访问父类中的method方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="this关键字的三种用法"><a class="header-anchor" href="#this关键字的三种用法">¶</a>this关键字的三种用法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.在本类的成员方法中，访问本类的成员变量。</span></span><br><span class="line"><span class="comment">2.在本类的成员方法中，访问本类的另一个成员方法。</span></span><br><span class="line"><span class="comment">3.在本类的构造方法中，访问本类的另- -个构造方法。</span></span><br><span class="line"><span class="comment">在第三种用法当中要注意:</span></span><br><span class="line"><span class="comment">    A. this(... )调用也必须是构造方法的第一个语句， 唯一-个。</span></span><br><span class="line"><span class="comment">    B. super和thi s两种构造调用，不能同时使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi03</span> <span class="keyword">extends</span> <span class="title">Fu03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        super();//这一行不再赠送</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">100</span>);<span class="comment">//本类的无参构造，调用本类的有参构造</span></span><br><span class="line"><span class="comment">//        this(1,3);//错误写法/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num);<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);<span class="comment">//本类中的成员变量</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//父类中的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你最帅！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodA();</span><br><span class="line">        System.out.println(<span class="string">&quot;我最帅！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="super和this关键字图解"><a class="header-anchor" href="#super和this关键字图解">¶</a>super和this关键字图解</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728205348.png" alt="image-20200728205347121"></p>
<h2 id="Java继承的三个特点"><a class="header-anchor" href="#Java继承的三个特点">¶</a>Java继承的三个特点</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728210954.png" alt="image-20200728210017817"></p>
<h2 id="抽象"><a class="header-anchor" href="#抽象">¶</a>抽象</h2>
<h3 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h3>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728210946.png" alt="image-20200728210458257"></p>
<h3 id="抽象方法和抽象类的格式和使用"><a class="header-anchor" href="#抽象方法和抽象类的格式和使用">¶</a>抽象方法和抽象类的格式和使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象方法:就是加上abstract关键字，然后去掉大括号，直接分号结束。</span></span><br><span class="line"><span class="comment">抽象类:抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用抽象类和抽象方法:</span></span><br><span class="line"><span class="comment">19不能直接创建new抽象类对象。</span></span><br><span class="line"><span class="comment">2.必须用一个子类来继承抽象父类。</span></span><br><span class="line"><span class="comment">3.子类必须覆盖重写抽象父类当中所有的抽象方法。</span></span><br><span class="line"><span class="comment">覆盖重写(实现) :子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</span></span><br><span class="line"><span class="comment">4.创建子类对象进行使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个抽象方法，代表吃东西，但是具体吃什么(大括号的内容)不确定。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个普通的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项-v2"><a class="header-anchor" href="#注意事项-v2">¶</a>注意事项</h3>
<p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多,但若理解了抽象的本质，无需死记硬背。<br>
1.抽象类<strong>不能创建对象</strong>，如果创建,编译无法通过而报错。只能创建其非抽象子类的对象。</p>
<blockquote>
<p>理解: 假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p>
</blockquote>
<p>2.抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p>
<blockquote>
<p>理解: 子类的构造方法中，有默认的super(),需要访问父类构造方法。</p>
</blockquote>
<p>3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p>
<blockquote>
<p>理解:未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p>
</blockquote>
<p>4.抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</p>
<blockquote>
<p>理解:假设不重写所有抽象方法,则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p>
</blockquote>
<h2 id="练习题-v8"><a class="header-anchor" href="#练习题-v8">¶</a>练习题</h2>
<h3 id="综合案例-群主发普通红包"><a class="header-anchor" href="#综合案例-群主发普通红包">¶</a>综合案例:群主发普通红包</h3>
<p>群主发普通红包。某群有多名成员，群主给成员发普通红包。普通红包的规则:<br>
1.群主的一笔金额，从群主余额中扣除，平均分成n等份，让成员领取。<br>
2.成员领取红包后，保存到成员余额中。<br>
请根据描述,完成案例中所有类的定义以及指定类之间的继承关系，并完成发红包的操作。</p>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728214035.png" alt="image-20200728214033747"></p>
<h4 id="实现："><a class="header-anchor" href="#实现：">¶</a>实现：</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;<span class="comment">//余额，也就是当前的所拥有的钱数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示一下用户有多少钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫：&quot;</span> + name + <span class="string">&quot;,我有&quot;</span> + money + <span class="string">&quot;钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//群主的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">send</span><span class="params">(<span class="keyword">int</span> totalMoney,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先需要一个集合，用来存储若干个红包的余额</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先看一下群主自己的余额</span></span><br><span class="line">        <span class="keyword">int</span> leftMoney = <span class="keyword">super</span>.getMoney();<span class="comment">//群主当前余额</span></span><br><span class="line">        <span class="keyword">if</span> (totalMoney &gt;leftMoney)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的余额不足，请及时充值！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> redList;<span class="comment">//返回空集合</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扣钱，就是重新设置余额</span></span><br><span class="line">        <span class="keyword">super</span>.setMoney(leftMoney - totalMoney);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发红包需要平均拆分成count份</span></span><br><span class="line">        <span class="keyword">int</span> avg = totalMoney/count;</span><br><span class="line">        <span class="keyword">int</span> mod  = totalMoney % count;<span class="comment">//余数，也就是剩下的零头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//除不开的零头放在最后一个红包里</span></span><br><span class="line">        <span class="comment">//下面把红包一个一个放在集合里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            redList.add(avg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一个红包</span></span><br><span class="line">        <span class="keyword">int</span> last = avg + mod;</span><br><span class="line">        redList.add(last);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//群员的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从多个红包当中随便抽取一个，给我自己。</span></span><br><span class="line">        <span class="comment">//随机获取一一个集合当中的索引编号</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line">        <span class="comment">//根据索引，从集合当中删除，并且得到被删除的红包，给我自己</span></span><br><span class="line">        <span class="keyword">int</span> delta = list.remove(index);</span><br><span class="line">        <span class="comment">//当前成员有多少钱</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="keyword">super</span>.getMoney();</span><br><span class="line">        <span class="comment">//加法，并重新设置回去</span></span><br><span class="line">        <span class="keyword">super</span>.setMoney(delta + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainRedPacket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager(<span class="string">&quot;乔布斯&quot;</span>,<span class="number">1000000000</span>);</span><br><span class="line"></span><br><span class="line">        Member one = <span class="keyword">new</span> Member(<span class="string">&quot;比尔·盖茨&quot;</span>,<span class="number">999999</span>);</span><br><span class="line">        Member two = <span class="keyword">new</span> Member(<span class="string">&quot;巴菲特&quot;</span>,<span class="number">8888888</span>);</span><br><span class="line">        Member three = <span class="keyword">new</span> Member(<span class="string">&quot;库克&quot;</span>,<span class="number">666666</span>);</span><br><span class="line">        Member four = <span class="keyword">new</span> Member(<span class="string">&quot;川普&quot;</span>,<span class="number">222222</span>);</span><br><span class="line"></span><br><span class="line">        manager.show();</span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">        four.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//群主总共发66666块钱，分成四个红包</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = manager.send(<span class="number">66666</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//四个普通成员收红包</span></span><br><span class="line">        one.receive(redList);</span><br><span class="line">        two.receive(redList);</span><br><span class="line">        three.receive(redList);</span><br><span class="line">        four.receive(redList);</span><br><span class="line"></span><br><span class="line">        manager.show();<span class="comment">//随机分排</span></span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">        four.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>接口</h1>
<h2 id="概述与生活例举"><a class="header-anchor" href="#概述与生活例举">¶</a>概述与生活例举</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200729214057.png" alt="image-20200729214055457"></p>
<h2 id="定义的基本格式"><a class="header-anchor" href="#定义的基本格式">¶</a>定义的基本格式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在任何放本的Java中，接口都能正义抽象万法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public abstract返回值类型方法名称(参数列表);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">主意事项:</span></span><br><span class="line"><span class="comment">1.接口当中的抽象方法，修饰符必须是两个固定的关键字: public abstract</span></span><br><span class="line"><span class="comment">2.这两个关键字修饰符，可以选择性地省略。(今天刚学， 所以不推荐。)</span></span><br><span class="line"><span class="comment">3.方法的三要素，可以随意定义。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>与类名相同才是构造方法</p>
<p>接口主要是做一些规范</p>
</blockquote>
<h2 id="接口的抽象方法的使用"><a class="header-anchor" href="#接口的抽象方法的使用">¶</a>接口的抽象方法的使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口使用步骤:</span></span><br><span class="line"><span class="comment">1.接口不能直接使用，必须有一个“实现类&quot;来“实现&quot;该接口。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public class 实现类名称implements 接口名称&#123;</span></span><br><span class="line"><span class="comment">    //.....</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.接口的实现类必须覆盖重写(实现)接口中所有的抽象方法。</span></span><br><span class="line"><span class="comment">实现:去掉abstract关键字，加上方法体大括号。</span></span><br><span class="line"><span class="comment">3.创建实现类的对象，进行使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//错误写法！不能直接new接口对象使用。</span></span><br><span class="line"><span class="comment">//        MyInterfaceAbstract inter = new MyInterfaceAbstract();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建实现类的对象使用</span></span><br><span class="line">        MyInterfaceAbstractImpl impl = <span class="keyword">new</span> MyInterfaceAbstractImpl();</span><br><span class="line">        impl.methodAbs();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;<span class="comment">//public和abstract可以省略其一，或着全部省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceAbstractImpl</span>  <span class="keyword">implements</span> <span class="title">MyInterfaceAbstract</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//辨识重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;implements方法执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口的默认方法定义与使用"><a class="header-anchor" href="#接口的默认方法定义与使用">¶</a>接口的默认方法定义与使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口里允许定义默认方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public default 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:接口当中的默认方法，可以解决接口升级的问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新添加一个抽象方法</span></span><br><span class="line"><span class="comment">//    public abstract void methodAbsB();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新添加的方法，改写为默认方法</span></span><br><span class="line">    <span class="comment">//新添加的这个方法，不需要去修改AorB</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是新添加的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultA</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个抽象方法执行了：AAAAAAAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultB</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个抽象方法执行了：BBBBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现B类覆盖重写了接口的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyInterfaceDefaultA a = <span class="keyword">new</span> MyInterfaceDefaultA();</span><br><span class="line"></span><br><span class="line">        a.methodAbsA();<span class="comment">//调用抽象方法，实际运行的是右侧实现类。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用默认方法，如果实现类当中没有，会向上找接口</span></span><br><span class="line">        a.methodDefault();<span class="comment">//这是新添加的默认方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyInterfaceDefaultB b = <span class="keyword">new</span> MyInterfaceDefaultB();</span><br><span class="line">        b.methodAbsA();<span class="comment">//这个抽象方法执行了：BBBBBBBB</span></span><br><span class="line">        b.methodDefault();<span class="comment">//实现B类覆盖重写了接口的默认方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>抽象类利于代码的复写，接口利于代码的维护</p>
<p>接口可以看成一种特殊的抽象类</p>
</blockquote>
<h2 id="接口的静态方法定义与使用"><a class="header-anchor" href="#接口的静态方法定义与使用">¶</a>接口的静态方法定义与使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口当中允许定义静态方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public static 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">提示:就是将abstract或者default换成static即可，带上方法体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是接口的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意事项:不能通过接口实现类的对象来调用接口当中的静态方法。</span></span><br><span class="line"><span class="comment">正确用法:通过接口名称，直接调用其中的静态方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">接口名称.静态方法名(参数);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//直接通过接口名称调用静态方法</span></span><br><span class="line">        MyInterfaceStatic.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口的私有方法定义与使用"><a class="header-anchor" href="#接口的私有方法定义与使用">¶</a>接口的私有方法定义与使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述:</span></span><br><span class="line"><span class="comment">我们需要抽取一个共有方法，用来解快两个默认方法之间重复代码的问题。</span></span><br><span class="line"><span class="comment">但是这个共有方法不应该让实现类使用，应该是私有化的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决方案:</span></span><br><span class="line"><span class="comment">从Java 9开始，接口当中允许定义私有方法。</span></span><br><span class="line"><span class="comment">1. 普通私有方法，解决多个默认方法之间重复代码问题</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">private 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.静态私有方法，解决多个静态方法之间重复代码问题</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">private static 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfacePrivateA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefacult1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法1&quot;</span>);</span><br><span class="line">        methodCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefacult2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法2&quot;</span>);</span><br><span class="line">        methodCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodCommon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfacePrivateB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法1&quot;</span>);</span><br><span class="line">        methodStaticCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法2&quot;</span>);</span><br><span class="line">        methodStaticCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStaticCommon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口的常量定义和使用"><a class="header-anchor" href="#接口的常量定义和使用">¶</a>接口的常量定义和使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口:当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。</span></span><br><span class="line"><span class="comment">从效果上看，这其实就是接口的【常量】。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public static final 数据类型常量名称=数据值;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:</span></span><br><span class="line"><span class="comment">一旦使用final关键字进行修饰，说明不可改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.接口当中的常量，可以省略public static final, 注意:不写也照样是这样。</span></span><br><span class="line"><span class="comment">2.接口当中的常量，必须进行赋值;不能不赋值。</span></span><br><span class="line"><span class="comment">3.接口中常量的名称，使用完全大写的字母，用下划线进行分隔。(推荐命名规则)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MYCLASS= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h2>
<p>在Java 9+版本中，接口的内容可以有:<br>
1.成员变量其实是常量，格式:[public] [static] [final] 数据类型常量名称=数据值;</p>
<blockquote>
<p>注意:<br>
常量必须进行赋值，而且一旦赋值不能改变。<br>
常量名称完全大写，用下划线进行分隔。</p>
</blockquote>
<p>2.接口中最重要的就是抽象方法，格式:<br>
[public] [abstract] 返回值类型方法名称(参数列表);</p>
<blockquote>
<p>注意:实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。</p>
</blockquote>
<p>3.从Java 8开始，接口里允许定义默认方法，格式:<br>
[public] default 返回值类型方法名称(参数列表) {方法体}</p>
<blockquote>
<p>注意:默认方法也可以被覆盖重写</p>
</blockquote>
<p>4.从Java 8开始，接口里允许定义静态方法，格式:<br>
[public] static 返回值类型方法名称(参数列表) {方法体}</p>
<blockquote>
<p>注意:应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</p>
</blockquote>
<p>5.从Java 9开始，接口里允许定义私有很乏，格式:<br>
普通私有方法: private 返回值类型方法名称(参数列表) {方法体}<br>
静态私有方法: private static 返回值类型方法名称(参数列表) {方法体}</p>
<blockquote>
<p>注意:private的方法只有接口自己才能调用，不能被实现类或别人使用。</p>
</blockquote>
<h2 id="继承父类并实现多种接口"><a class="header-anchor" href="#继承父类并实现多种接口">¶</a>继承父类并实现多种接口</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用接口的时候，需要注意:</span></span><br><span class="line"><span class="comment">1.接口是没有静态代码块或者构造方法的。</span></span><br><span class="line"><span class="comment">2.一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public class MyInterfaceImpl impl ements MyInterfaceA, MyInterfaceB &#123;</span></span><br><span class="line"><span class="comment">	//覆盖重写所有抽象方法</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3.如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</span></span><br><span class="line"><span class="comment">4.如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</span></span><br><span class="line"><span class="comment">5.如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</span></span><br><span class="line"><span class="comment">6.一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="接口之间的多继承"><a class="header-anchor" href="#接口之间的多继承">¶</a>接口之间的多继承</h2>
<p>1.类与类之间是单继承的。直接父类只有一个 。<br>
2.类与接口之间是多实现的。一个类可以实现多个接口。<br>
3.接口与接口之间是多继承的。</p>
<p>注意事项:<br>
1.多个父接口当中的抽象方法如果重复，没关系。<br>
2.多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写， <strong>【而且带着default关键字】</strong>。</p>
<h1>多态性</h1>
<h2 id="概述-v6"><a class="header-anchor" href="#概述-v6">¶</a>概述</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200802215932.png" alt="image-20200802215928812"></p>
<h2 id="格式与使用"><a class="header-anchor" href="#格式与使用">¶</a>格式与使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码当中体现多态性，其实就是一句话: 父类引用指向子类对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">父类名称对象名= new 子类名称();</span></span><br><span class="line"><span class="comment">或者:</span></span><br><span class="line"><span class="comment">接口名称对象名= new 实现类名称();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>左父右子</p>
</blockquote>
<h2 id="成员变量的使用特点"><a class="header-anchor" href="#成员变量的使用特点">¶</a>成员变量的使用特点</h2>
<p>访问成员变量的两种方式:<br>
1.直接通过对象名称访问成员变量:看等号左边是谁，优先用谁，没有则向上找。<br>
2.间接通过成员方法访问成员变量:看该方法属于谁，优先用谁，没有则向上找。</p>
<blockquote>
<p>访问成员变量不能覆盖重写，访问成员方法可以覆盖重写</p>
<p>永远不会向下找</p>
</blockquote>
<h2 id="成员方法的使用特点"><a class="header-anchor" href="#成员方法的使用特点">¶</a>成员方法的使用特点</h2>
<p>在多态的代码当中，成员方法的访问规则是:<br>
看new的是谁，就优先用谁，没有则向上找。</p>
<blockquote>
<p>口诀:编译看左边，运行看右边。成员变量不在此列，规则不同</p>
</blockquote>
<p><em>对比一下:</em><br>
成员变量:编译看左边，运行还看左边。<br>
成员方法:编译看左边，运行看右边。</p>
<h2 id="使用多态的好处"><a class="header-anchor" href="#使用多态的好处">¶</a>使用多态的好处</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200802223437.png" alt="image-20200802223149584"></p>
<h2 id="对象的向上转型"><a class="header-anchor" href="#对象的向上转型">¶</a>对象的向上转型</h2>
<p><img data-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200802223420.png" alt="image-20200802223419209"></p>
]]></content>
  </entry>
</search>
