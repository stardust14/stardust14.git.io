<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MATLAB语言</title>
      <link href="/stardust14.github.io/2020/08/13/MATLAB%E8%AF%AD%E8%A8%80/"/>
      <url>/stardust14.github.io/2020/08/13/MATLAB%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>引言</h1><p>MATLAB语言的主要功能：</p><ul><li>数值计算</li><li>符号计算</li><li>图形绘制</li><li>程序流程控制</li><li>工具箱</li></ul><p>MATLAB的优势:</p><ul><li>不需要过多了解各种数值计算方法的具体细节和计算公式，<br>也不需要繁琐的底层编程。</li><li>可以专注于实际问题的分析和设计，大大地提高:工作效率和<br>质量，为科学研究与工程应用提供重要手段。</li></ul><h1>MATLAB基础知识</h1><h2 id="数值类型"><a class="header-anchor" href="#数值类型">¶</a>数值类型</h2><p>数值数据类型的分类</p><ul><li>整型</li><li>浮点型</li><li>复数型</li></ul><h3 id="整型"><a class="header-anchor" href="#整型">¶</a>整型</h3><ul><li><p>无符号整数:无符号8位整数、无符号16位整数、无符号32位整数、无符号64位整数。</p></li><li><p>带符号整数:带符号8位整数、带符号16位整数、带符号32位整数、带符号64位整数。</p></li><li><p>无符号8位整数数据范围: 000000001111111 (0~2^8-1) 。</p></li><li><p>带符号8位整数数据范围: 10000000-111111 ( -2<sup>7~2</sup>7-1)。</p></li></ul><blockquote><p>最前面符号位0表示正数，1表示负数</p><p>无符号整数最大为255，带符号为最大为127，最小为-128</p></blockquote><p>MATLAB提供了数据类型转换函数来实现数据类型的转换,例如，uint8函数将数值数据转换为无符号8位整数，int8函数将数值数据转换为带符号8位整数。</p><h3 id="浮点型"><a class="header-anchor" href="#浮点型">¶</a>浮点型</h3><p>浮点型数据分为单精度型和双精度类型，单精度型实数在内存中占用4个字节，而双精度型实数在内存中占用8个字节，所以双精度型的数据精度更高。</p><ul><li>single函数: 将其他类型的数据转换为单精度型。</li><li>double函数: 将其他类型的数据转换为双精度型。</li></ul><blockquote><p>默认使用双精度型</p></blockquote><h3 id="复型"><a class="header-anchor" href="#复型">¶</a>复型</h3><p>复型数据包括实部和虚部两个部分，实部和虚部默认为双精度型，虚数单位用i或i来表示。</p><h3 id="数值数据的输出格式"><a class="header-anchor" href="#数值数据的输出格式">¶</a>数值数据的输出格式</h3><p>format命令的格式: format 格式符</p><blockquote><p>format命令只影响数据输出格式，而不影响数据的计算和存储。</p></blockquote><h3 id="常用数学函数"><a class="header-anchor" href="#常用数学函数">¶</a>常用数学函数</h3><h4 id="函数的调用格式为"><a class="header-anchor" href="#函数的调用格式为">¶</a>函数的调用格式为:</h4><p><strong>函数名(函数自变量的值)</strong><br>函数的自变量规定为矩阵变量，当然也可以是标量，标量本身是矩阵的一种特例。<br>函数在运算时是将函数逐项作用于矩阵的每个元素上，所以最后运算的结果就是一个与自变量同型的矩阵。</p><p>example：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">4</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; B = <span class="built_in">exp</span>(A)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">   <span class="number">54.5982</span>    <span class="number">7.3891</span></span><br><span class="line">   <span class="number">20.0855</span>  <span class="number">403.4288</span></span><br></pre></td></tr></table></figure><blockquote><p>调用exp函数（自然指数）</p></blockquote><h4 id="常用函数的应用"><a class="header-anchor" href="#常用函数的应用">¶</a>常用函数的应用</h4><p>①三角函数有以弧度为单位的函数和以角度为单位的函数,如果是以角度为单位的函数就在函数名后面加“d”，以示区别。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">sin</span>(<span class="built_in">pi</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">sind</span>(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br></pre></td></tr></table></figure><p>②abs函数可以求实数的绝对值、复数的模、字符串的ASCII码值。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">abs</span>(<span class="number">-4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">abs</span>(<span class="number">3</span>+<span class="number">4</span><span class="built_in">i</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">97</span></span><br></pre></td></tr></table></figure><p>③用于取整的函数有fix、floor、 ceil、 round。</p><ul><li>round函数按照四舍五入的规则取整。</li><li>ceil函数是向.上取整，取大于等于这个数的第一 个整数。</li><li>floor函数是向下取整，取小于等于这个数的第一个整数。</li><li>fix函数是固定取靠近0的那个整数,即舍去小数取整。</li></ul><blockquote><p>ceil=roundup,floor=rounddown</p><p>floor和fix区别在于负数</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">round</span>(<span class="number">4.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">ceil</span>(<span class="number">-3.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">-3</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">fix</span>(<span class="number">-3.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">-3</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">floor</span>(<span class="number">3.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br></pre></td></tr></table></figure><p>④函数应用举例。</p><ul><li><p>分别求一个三位正整数的个位数字、十位数字和百位数字。</p><p>​一个三位正整数除以10的余数就是该数的个位数字。<br>一个三位正整数除以10取整后就去掉了这个数的个位数字，将新得  到的数再除以10取余数，余数就是新得到的数的个位数字，也就是原数的十位数字。<br>​    一个三位正整数除以100取整后就去掉了这个数的个位数字和十位  数字，得到百位数字。</p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; m=<span class="number">468</span>;</span><br><span class="line"></span><br><span class="line">&gt;&gt; m1=<span class="built_in">rem</span>(m,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">m1 =</span><br><span class="line"></span><br><span class="line">     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; m2=<span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">m2 =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">&gt;&gt; m3=<span class="built_in">fix</span>(m/<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">m3 =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>rem函数和mod函数分别是取余和取模函数</p></blockquote><ul><li>求[1,100]区间的所有素数。</li></ul><p>​            MATLAB提供了一个判断n是否素数的函数isprime(n),当n是素数时返回1，否则返回0。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">1</span>:<span class="number">100</span>;</span><br><span class="line">&gt;&gt; k = <span class="built_in">isprime</span>(x);</span><br><span class="line">&gt;&gt; k1 = <span class="built_in">find</span>(k);</span><br><span class="line">&gt;&gt; p = x(k1)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">10</span> 列</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span>     <span class="number">3</span>     <span class="number">5</span>     <span class="number">7</span>    <span class="number">11</span>    <span class="number">13</span>    <span class="number">17</span>    <span class="number">19</span>    <span class="number">23</span>    <span class="number">29</span></span><br><span class="line"></span><br><span class="line">  <span class="number">11</span> 至 <span class="number">20</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">31</span>    <span class="number">37</span>    <span class="number">41</span>    <span class="number">43</span>    <span class="number">47</span>    <span class="number">53</span>    <span class="number">59</span>    <span class="number">61</span>    <span class="number">67</span>    <span class="number">71</span></span><br><span class="line"></span><br><span class="line">  <span class="number">21</span> 至 <span class="number">25</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">73</span>    <span class="number">79</span>    <span class="number">83</span>    <span class="number">89</span>    <span class="number">97</span></span><br></pre></td></tr></table></figure><blockquote><p>调用isprime函数，查找元素是否为素数，是为1，否为0（逻辑0，1）</p><p>find函数：查询非零元素的位置和值</p></blockquote><h2 id="变量及其操作"><a class="header-anchor" href="#变量及其操作">¶</a>变量及其操作</h2><h3 id="变量与赋值语句"><a class="header-anchor" href="#变量与赋值语句">¶</a>变量与赋值语句</h3><ul><li>变量本质上讲是内存单元的一个抽象。</li><li>在MATLAB中，变量名是以字母开头，后接字母、数字或下画线的字符序列,最多63个字符。</li></ul><p><strong>注意</strong>：</p><ul><li>变量名区分字母的大小写。</li><li>标准函数名以及命令名必须用小写字母。</li></ul><p><strong>赋值语句两种格式:</strong></p><ul><li>变量=表达式</li><li>表达式</li></ul><p><strong>example</strong>计算表达式<br>$$<br>(5十cos47°)/(1+|x-y|)<br>$$<br>的值，并将结果赋给变量z，然后显示计算结果。其中，<br>$$<br>x=\sqrt{7}-2i<br>$$</p><p>$$<br>y=e^(\pi/2)<br>$$</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="built_in">sqrt</span>(<span class="number">7</span>)<span class="number">-2</span><span class="built_in">i</span>;</span><br><span class="line">&gt;&gt; y=<span class="built_in">exp</span>(<span class="built_in">pi</span>/<span class="number">2</span>);</span><br><span class="line">&gt;&gt; z=(<span class="number">5</span>+<span class="built_in">cosd</span>(<span class="number">47</span>))/(<span class="number">1</span>+<span class="built_in">abs</span>(x-y))</span><br><span class="line"></span><br><span class="line">z =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.4395</span></span><br></pre></td></tr></table></figure><h3 id="预定义变量"><a class="header-anchor" href="#预定义变量">¶</a>预定义变量</h3><p>预定义变量是由系统本身定义的变量。</p><ul><li>ans是默认赋值变量</li><li>i和j代表虚数单位</li><li>pi代表圆周率</li><li>NaN代表非数</li></ul><h3 id="变量的管理"><a class="header-anchor" href="#变量的管理">¶</a>变量的管理</h3><h4 id="内存变量的删除与修改"><a class="header-anchor" href="#内存变量的删除与修改">¶</a>内存变量的删除与修改</h4><p>who命令与whos命令</p><p>1.who：who给出的列表只能按变量名的字母顺序排列。</p><p>2.whos：whos给出的列表可以按变量名的字母顺序排列，也可以按尺寸、所占字节数等顺序排列。</p><h4 id="内存变量文件"><a class="header-anchor" href="#内存变量文件">¶</a>内存变量文件</h4><p>用于保存MATLAB工作区变量的文件叫做内存变量文件，其扩展名为.mat，也叫MAT文件。</p><ul><li>save命令:创建内存变量文件。</li><li>load命令:装入内存变量文件。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; save mydata a X</span><br><span class="line">&gt;&gt; load mydata</span><br></pre></td></tr></table></figure><h2 id="矩阵的表示"><a class="header-anchor" href="#矩阵的表示">¶</a>矩阵的表示</h2><h3 id="矩阵的建立"><a class="header-anchor" href="#矩阵的建立">¶</a>矩阵的建立</h3><p>(1)利用直接输入法建立矩阵:将矩阵的元素用<font color=red>中括号</font>括起来，按矩阵行的顺序输入各元素，同- -行的各元素之间用<font color=red>逗号或空格</font>分隔，不同行的元素之间用<font color=red>分号</font>分隔。</p><p>(2)利用已建好的矩阵建立更大的矩阵:一个大矩阵可以由已经建立好的小矩阵拼接而成。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt; B = [<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>;<span class="number">-4</span>,<span class="number">-5</span>,<span class="number">-6</span>;<span class="number">-7</span>,<span class="number">-8</span>,<span class="number">-9</span>];</span><br><span class="line">&gt;&gt; C = [A,B;B,A]</span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>    <span class="number">-1</span>    <span class="number">-2</span>    <span class="number">-3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>    <span class="number">-4</span>    <span class="number">-5</span>    <span class="number">-6</span></span><br><span class="line">     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">-7</span>    <span class="number">-8</span>    <span class="number">-9</span></span><br><span class="line">    <span class="number">-1</span>    <span class="number">-2</span>    <span class="number">-3</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">    <span class="number">-4</span>    <span class="number">-5</span>    <span class="number">-6</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">    <span class="number">-7</span>    <span class="number">-8</span>    <span class="number">-9</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span></span><br></pre></td></tr></table></figure><p>可以用实部矩阵和虚部矩阵构成复数矩阵。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; B = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt; C = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>];</span><br><span class="line">&gt;&gt; A = B + <span class="built_in">i</span>*C</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   <span class="number">4.0000</span> + <span class="number">6.0000</span><span class="built_in">i</span>   <span class="number">5.0000</span> + <span class="number">7.0000</span><span class="built_in">i</span>   <span class="number">6.0000</span> + <span class="number">8.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">7.0000</span> + <span class="number">9.0000</span><span class="built_in">i</span>   <span class="number">8.0000</span> +<span class="number">10.0000</span><span class="built_in">i</span>   <span class="number">9.0000</span> +<span class="number">11.0000</span><span class="built_in">i</span></span><br></pre></td></tr></table></figure><h3 id="冒号表达式"><a class="header-anchor" href="#冒号表达式">¶</a>冒号表达式</h3><p><strong>格式</strong>:             e1 :e2:e3         初始值:步长:终止值</p><blockquote><p>省略步长e2，则步长为1。<br>例如，t=0:5 与t=0:1:5等价。</p></blockquote><p><strong>linspace函数</strong>:                linspace(a,b,n)        第一个元素:最后一个元素:元素总数</p><blockquote><p>当n省略时，自动产生100个元素</p></blockquote><h3 id="结构矩阵和单元矩阵"><a class="header-anchor" href="#结构矩阵和单元矩阵">¶</a>结构矩阵和单元矩阵</h3><h4 id="结构矩阵"><a class="header-anchor" href="#结构矩阵">¶</a>结构矩阵</h4><p>​           <strong>格式为:</strong><br>​                         结构矩阵元素成员名=表达式</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a(<span class="number">1</span>).x1=<span class="number">10</span>; a(<span class="number">1</span>).x2=<span class="string">&#x27;liu&#x27;</span>; a(<span class="number">1</span>).x3=[<span class="number">1</span> <span class="number">1</span>,<span class="number">21</span>;<span class="number">34</span>,<span class="number">78</span>];</span><br><span class="line">&gt;&gt; a(<span class="number">2</span>).x1=<span class="number">12</span>; a(<span class="number">2</span>).x2=<span class="string">&#x27;wang&#x27;</span>; a(<span class="number">2</span>).x3=[<span class="number">34</span>,<span class="number">191</span>;<span class="number">27</span>,<span class="number">578</span>];</span><br><span class="line">&gt;&gt; a(<span class="number">3</span>).x1=<span class="number">14</span>; a(<span class="number">3</span>).x2=<span class="string">&#x27;cai&#x27;</span>; a(<span class="number">3</span>).x3=[<span class="number">13</span>,<span class="number">890</span>;<span class="number">67</span>,<span class="number">231</span>];</span><br></pre></td></tr></table></figure><h4 id="单元矩阵"><a class="header-anchor" href="#单元矩阵">¶</a>单元矩阵</h4><p>建立单元矩阵和一般矩阵相似，直接输入就可以了，只是单元矩阵元素用大括号括起来。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; b= &#123;<span class="number">10</span>,<span class="string">&#x27;liu&#x27;</span>,[<span class="number">11</span>,<span class="number">21</span>;<span class="number">34</span>,<span class="number">78</span>];<span class="number">12</span>,<span class="string">&#x27;wang&#x27;</span>,[<span class="number">34</span>,<span class="number">191</span>;<span class="number">27</span>,<span class="number">5781</span>];...</span><br><span class="line"><span class="number">14</span>,<span class="string">&#x27;cai&#x27;</span>,[<span class="number">13</span>,<span class="number">890</span>;<span class="number">67</span>,<span class="number">231</span>]&#125;</span><br><span class="line"></span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line">    [<span class="number">10</span>]    <span class="string">&#x27;liu&#x27;</span>     [<span class="number">2</span>x2 double]</span><br><span class="line">    [<span class="number">12</span>]    <span class="string">&#x27;wang&#x27;</span>    [<span class="number">2</span>x2 double]</span><br><span class="line">    [<span class="number">14</span>]    <span class="string">&#x27;cai&#x27;</span>     [<span class="number">2</span>x2 double]</span><br></pre></td></tr></table></figure><h2 id="矩阵元素的引用"><a class="header-anchor" href="#矩阵元素的引用">¶</a>矩阵元素的引用</h2><h3 id="矩阵元素的引用方式"><a class="header-anchor" href="#矩阵元素的引用方式">¶</a>矩阵元素的引用方式</h3><h4 id="通过下标来弓-用矩阵的元素"><a class="header-anchor" href="#通过下标来弓-用矩阵的元素">¶</a>通过下标来弓|用矩阵的元素</h4><p>​        A(3,2)表示A矩阵第3行第2列的元素。</p><h4 id="通过序号来引用"><a class="header-anchor" href="#通过序号来引用">¶</a>通过序号来引用</h4><ul><li>在MATLAB中， 矩阵元素按列存储，即首先存储矩阵的第一列元素，然后存储第二列元素，.，一-直到矩阵的最后一列元素。</li><li>矩阵元素的序号就是矩阵元素在内存中的排列顺序。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>序号与下标是一一对应的，以mX n矩阵A为例，矩阵元素A(i,j)的序号为(j-1)*m+i。</p></blockquote><p>矩阵元素的序号与下标可以利用sub2ind和ind2sub函数实现相互转换。<br><font color=red>sub2ind函数</font>:将矩阵中指定元素的行、列下标转换成存储的序号。调用格式为:<br>D=sub2ind(S,I,J)</p><blockquote><p>S:行数和列数组成的向量<br>I:转换矩阵元素的行下标<br>J:转换矩阵元素的列下标</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">&gt;&gt; D = <span class="built_in">sub2ind</span>(<span class="built_in">size</span>(A),[<span class="number">1</span>,<span class="number">2</span>;<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>;<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">6</span>     <span class="number">4</span></span><br></pre></td></tr></table></figure><p><font color=red>ind2sub函数</font>:将把矩阵元素的序号转换成对应的下标，其调用格式为:<br>[I,J]=ind2sub(S,D)</p><blockquote><p>S:行数和列数组成的向量<br>D:序号<br>I:行下标<br>J:列下标</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; [I,J]=<span class="built_in">ind2sub</span>([<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">J =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="利用冒号表达式获得子矩阵"><a class="header-anchor" href="#利用冒号表达式获得子矩阵">¶</a>利用冒号表达式获得子矩阵</h3><p>子矩阵是指由矩阵中的一部分元素构成的矩阵。</p><table><thead><tr><th>写法</th><th>含义</th></tr></thead><tbody><tr><td><code>A(i;:)</code></td><td>第i行的全部元素</td></tr><tr><td><code>A(:j)</code></td><td>第j列的全部元素</td></tr><tr><td><code>A(i:i+m,k:k+m)</code></td><td>第i<sub>i+m行内且在第k</sub>k+m列中的所有元素</td></tr><tr><td><code>A(i:i+m;:)</code></td><td>第i~i+m行的全部元素</td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">11</span>    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A(<span class="number">1</span>:<span class="number">2</span>,:)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A(<span class="number">2</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">2</span>:<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">11</span>    <span class="number">13</span>    <span class="number">15</span></span><br><span class="line">&gt;&gt; A(<span class="keyword">end</span>,:)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">11</span>    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A([<span class="number">1</span>,<span class="number">3</span>],<span class="number">3</span>:<span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="利用空矩阵删除矩阵的元素"><a class="header-anchor" href="#利用空矩阵删除矩阵的元素">¶</a>利用空矩阵删除矩阵的元素</h3><p>空矩阵是指没有任何元素的矩阵。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span> ,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>;<span class="number">1</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">7</span>     <span class="number">0</span>     <span class="number">9</span>     <span class="number">2</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">4</span>    <span class="number">-1</span>     <span class="number">1</span>     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A(:,[<span class="number">2</span>,<span class="number">4</span>])=[]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">3</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">7</span>     <span class="number">9</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">1</span>    <span class="number">-1</span>     <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="改变矩阵的形状"><a class="header-anchor" href="#改变矩阵的形状">¶</a>改变矩阵的形状</h3><p><font color=red>reshape(A,m,n)</font>:在矩阵总元素保持不变的前提下，将矩阵A重新排成m X n的二维矩阵。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">23</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">98</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">65</span>,<span class="number">43</span>,<span class="number">76</span>];</span><br><span class="line">&gt;&gt; y=<span class="built_in">reshape</span>(x,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">23</span>    <span class="number">34</span>    <span class="number">98</span>    <span class="number">65</span></span><br><span class="line">    <span class="number">45</span>    <span class="number">65</span>    <span class="number">45</span>    <span class="number">43</span></span><br><span class="line">    <span class="number">65</span>    <span class="number">34</span>    <span class="number">78</span>    <span class="number">76</span></span><br></pre></td></tr></table></figure><p>A(😃 :将矩阵A的每一列元素堆叠起来， 成为一个列向量。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A =[<span class="number">-45</span>,<span class="number">65</span>,<span class="number">71</span>;<span class="number">27</span>,<span class="number">35</span>,<span class="number">91</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   <span class="number">-45</span>    <span class="number">65</span>    <span class="number">71</span></span><br><span class="line">    <span class="number">27</span>    <span class="number">35</span>    <span class="number">91</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; B=A(:)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">   <span class="number">-45</span></span><br><span class="line">    <span class="number">27</span></span><br><span class="line">    <span class="number">65</span></span><br><span class="line">    <span class="number">35</span></span><br><span class="line">    <span class="number">71</span></span><br><span class="line">    <span class="number">91</span></span><br></pre></td></tr></table></figure><blockquote><p>A(:)等价于reshape(A,6,1)。</p></blockquote><h2 id="基本运算"><a class="header-anchor" href="#基本运算">¶</a>基本运算</h2><ul><li>算术运算</li><li>关系运算</li><li>逻辑运算</li></ul><h3 id="算术运算"><a class="header-anchor" href="#算术运算">¶</a>算术运算</h3><h4 id="基本算术运算"><a class="header-anchor" href="#基本算术运算">¶</a>基本算术运算</h4><p>基本算术运算符: + (加)、- (减)、*(乘)、/(右除)、(左除)、(乘方)。</p><ul><li>MATLAB的算术运算是在<strong>矩阵意义</strong>下进行的。</li><li>单个数据的算术运算只是<strong>矩阵运算</strong>的一种特例。</li></ul><p>加减运算</p><ul><li>若两矩阵同型，则运算时两矩阵的相应元素相加减。</li><li>若两矩阵不同型，则MATLAB将给出错误信息。</li><li>一个标量也可以和矩阵进行加减运算，这时把标量和矩阵的每一个元素进行加减运算。</li></ul><p>乘法运算</p><ul><li>矩阵A和B进行乘法运算，要求A的列数与B的行数相等，此时则称A、B矩阵是可乘的，或称A和B两矩阵维数和大小相容。</li><li>如果两者的维数或大小不相容，则将给出错误信息，提示用户两个矩阵是不可乘的。</li></ul><p>除法运算</p><ul><li>在MATLAB中，有两种矩阵除法运算:右除/和左除\。</li><li>如果A矩阵是非奇异方阵，则B/A等效于<code>B*inv(A)</code>，A\B等效于<code>inv(A)*B</code>。</li></ul><blockquote><p>非奇异矩阵就是可逆矩阵</p></blockquote><p>对于矩阵来说，右除和左除表示两种不同的除数矩阵和被除数矩阵关系。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>]; </span><br><span class="line">&gt;&gt; B=[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>;<span class="number">7</span> ,<span class="number">5</span>,<span class="number">1</span>;<span class="number">12</span>,<span class="number">7</span>,<span class="number">92</span>];</span><br><span class="line">&gt;&gt; C1=B/A</span><br><span class="line"></span><br><span class="line">C1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.1667</span>   <span class="number">-3.3333</span>    <span class="number">2.5000</span></span><br><span class="line">   <span class="number">-0.8333</span>   <span class="number">-7.6667</span>    <span class="number">5.5000</span></span><br><span class="line">   <span class="number">12.8333</span>   <span class="number">63.6667</span>  <span class="number">-36.5000</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; C2=A\B</span><br><span class="line"></span><br><span class="line">C2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.5000</span>   <span class="number">-0.5000</span>   <span class="number">44.5000</span></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.0000</span>   <span class="number">46.0000</span></span><br><span class="line">    <span class="number">0.5000</span>    <span class="number">1.1667</span>  <span class="number">-44.8333</span></span><br></pre></td></tr></table></figure><p>乘方运算</p><ul><li>一个矩阵的乘方运算可以表示成Ax，要求A为方阵，x为标量。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span> ,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">0</span>];</span><br><span class="line">&gt;&gt; A^<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">30</span>    <span class="number">36</span>    <span class="number">15</span></span><br><span class="line">    <span class="number">66</span>    <span class="number">81</span>    <span class="number">42</span></span><br><span class="line">    <span class="number">39</span>    <span class="number">54</span>    <span class="number">69</span></span><br></pre></td></tr></table></figure><h4 id="点运算"><a class="header-anchor" href="#点运算">¶</a>点运算</h4><ul><li>点运算符:.*、./、.\和.^。</li><li>两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵同型。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt; B=[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">&gt;&gt; C=A.*B</span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">    <span class="number">-1</span>     <span class="number">0</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">-5</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">8</span>     <span class="number">9</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; D=A*B</span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>    <span class="number">10</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>    <span class="number">16</span></span><br></pre></td></tr></table></figure><p>点运算是MATLAB很有特色的一个运算符，在实际应用中起着很重要的作用，也是许多初学者容易弄混的一个问题。<br>当x=0.1、0.4、0.7、1时，分别求y=sin X cos x的值。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; X=<span class="number">0.1</span>:<span class="number">0.3</span>:<span class="number">1</span>;</span><br><span class="line">&gt;&gt; y=<span class="built_in">cos</span>(x).*<span class="built_in">cos</span>(x)</span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">6</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">0.2839</span>    <span class="number">0.2760</span>    <span class="number">0.3164</span>    <span class="number">0.7201</span>    <span class="number">0.3164</span>    <span class="number">0.7201</span></span><br><span class="line"></span><br><span class="line">  <span class="number">7</span> 至 <span class="number">12</span> 列</span><br><span class="line"></span><br><span class="line">    <span class="number">0.6712</span>    <span class="number">0.2760</span>    <span class="number">0.7358</span>    <span class="number">0.3164</span>    <span class="number">0.3082</span>    <span class="number">0.6795</span></span><br></pre></td></tr></table></figure><h4 id="关系运算"><a class="header-anchor" href="#关系运算">¶</a>关系运算</h4><ul><li>关系运算符: &lt;(小于)、&lt;=(小于或等于)、&gt;(大于)、&gt;=(大于或等于)、==(等于)、 ~=(不等于)。</li><li>当两个比较量是标量时，直接比较两数的大小。若关系成立，关系表达式结果为1,否则为0。</li><li>当参与比较的量是两个同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。</li><li>当参与比较的一个是标量，而另一个 是矩阵时，则把标量与矩阵的每一个元素按标量 关系运算规则逐个比较，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。</li></ul><p>ex:建立3阶方阵A，判断A的元素是否为偶数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A =[<span class="number">24</span>,<span class="number">35</span>, <span class="number">13</span>;<span class="number">22</span>,<span class="number">63</span>,<span class="number">23</span>;<span class="number">39</span>,<span class="number">47</span>,<span class="number">80</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">    <span class="number">24</span>    <span class="number">35</span>    <span class="number">13</span></span><br><span class="line">    <span class="number">22</span>    <span class="number">63</span>    <span class="number">23</span></span><br><span class="line">    <span class="number">39</span>    <span class="number">47</span>    <span class="number">80</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; P=<span class="built_in">rem</span>(A,<span class="number">2</span>)==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">P =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算"><a class="header-anchor" href="#逻辑运算">¶</a>逻辑运算</h4><p>逻辑运算符: &amp;(与)、 |(或)和~ (非)。<br>设参与逻辑运算的是两个标量a和b，那么运算规则为:</p><ul><li>a&amp;b a、b全为非零时，运算结果为1，否则为0。</li><li>alb a、 b中只要有一个为非零时，运算结果为1。</li><li>~a当a为零时，运算结果为1;当a为非零时，运算结果为0。</li></ul><p>在算术运算、关系运算和逻辑运算中，算术运算的优先级最高，逻辑运算优先级最低，但逻辑非运算是单目运算，它的优先级比双目运算要高。</p><ul><li>若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。</li><li>若参与逻辑运算的一个是标量，一个是矩阵，那么将在标量与矩阵中的每个元素之间按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。</li></ul><p>ex:水仙花数是指各位数字的立方之和等于该数本身的三位正整数,求全部水仙花数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; m = <span class="number">100</span>:<span class="number">999</span>;</span><br><span class="line">&gt;&gt; m1 = <span class="built_in">rem</span>(m,<span class="number">10</span>);</span><br><span class="line">&gt;&gt; m2 = <span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>);</span><br><span class="line">&gt;&gt; m3 = <span class="built_in">fix</span>(m/<span class="number">100</span>);</span><br><span class="line">&gt;&gt; k = <span class="built_in">find</span>(m==m1.*m1.*m1+m2.*m2.*m2+m3.*m3.*m3)</span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">    <span class="number">54</span>   <span class="number">271</span>   <span class="number">272</span>   <span class="number">308</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; s=m(k)</span><br><span class="line"></span><br><span class="line">s =</span><br><span class="line"></span><br><span class="line">   <span class="number">153</span>   <span class="number">370</span>   <span class="number">371</span>   <span class="number">407</span></span><br></pre></td></tr></table></figure><h2 id="字符串的处理"><a class="header-anchor" href="#字符串的处理">¶</a>字符串的处理</h2><h3 id="字符串的表示"><a class="header-anchor" href="#字符串的表示">¶</a>字符串的表示</h3><p>在MATLAB中，字符串是用<font color="red"><strong>单引号</strong></font>括起来的字符序列。</p><blockquote><p>实际当作一个行向量</p></blockquote><p>若字符串中的字符含有单引号，则该单引号字符要用两个单引号来表示。</p><p>建立多行字符串，形成字符串矩阵。</p><blockquote><p>字符串数要相同</p></blockquote><p>ex:建立一个字符串向量，然后对该向量做如下处理:<br>①取第1~ 5个字符组成的子字符串。<br>②将字符串倒过来重新排列。<br>③将字符串中的小写字母变成相应的大写字母，其余字符不变。<br>④统计字符串中小写字母的个数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ch=<span class="string">&#x27;ABc123d4e56Fg9&#x27;</span>;</span><br><span class="line">&gt;&gt; subch=ch(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">subch =</span><br><span class="line"></span><br><span class="line">ABc12</span><br><span class="line"></span><br><span class="line">&gt;&gt; revch=ch(<span class="keyword">end</span>:<span class="number">-1</span>:<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">revch =</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>gF65e4d321cBA</span><br><span class="line"></span><br><span class="line">&gt;&gt; k=<span class="built_in">find</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>     <span class="number">7</span>     <span class="number">9</span>    <span class="number">13</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; ch(k)=ch(k)-(<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ch =</span><br><span class="line"></span><br><span class="line">ABC123D4E56FG9</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">length</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>大写字母和小写字母ASCII码相差32</p></blockquote><h3 id="字符串的操作"><a class="header-anchor" href="#字符串的操作">¶</a>字符串的操作</h3><h4 id="字符串的执行"><a class="header-anchor" href="#字符串的执行">¶</a>字符串的执行</h4><p>格式:  eval(s)</p><blockquote><p>s----字符串</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t=<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt; m=<span class="string">&#x27;[t,sin(t),cos(t)]&#x27;</span>;</span><br><span class="line">&gt;&gt; y=eval(m)</span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">3.1416</span>    <span class="number">0.0000</span>   <span class="number">-1.0000</span></span><br></pre></td></tr></table></figure><h4 id="字符串与数值之间的转换"><a class="header-anchor" href="#字符串与数值之间的转换">¶</a>字符串与数值之间的转换</h4><ul><li>abs和double函数都可以用来获 取字符串矩阵所对应的ASCII码数值矩阵。</li><li>char函数可以把ASCI码矩阵转换 为字符串矩阵。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; s1=<span class="string">&#x27;MATLAB&#x27;</span>;</span><br><span class="line">&gt;&gt; a=<span class="built_in">abs</span>(s1)</span><br><span class="line"></span><br><span class="line">a =</span><br><span class="line"></span><br><span class="line">    <span class="number">77</span>    <span class="number">65</span>    <span class="number">84</span>    <span class="number">76</span>    <span class="number">65</span>    <span class="number">66</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; char(a+<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">matlab</span><br></pre></td></tr></table></figure><h4 id="字符串的比较"><a class="header-anchor" href="#字符串的比较">¶</a>字符串的比较</h4><p>字符串的比较有两种方法:利用关系运算符或字符串比较函数。</p><ul><li>关系运算符比较:两个字符串里的每个字符依次按ASCII值大小逐个进行比较，比较的结果是一个数值向量， 向量中的元素要么是1，要么是0。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="string">&#x27;www0&#x27;</span>&gt;=<span class="string">&#x27;W123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><p>字符串比较函数用于判断字符串是否相等，有4种比较方式，函数如下:</p><p>①<code>strcmp(s1,s2)</code>:用来比较字符串s1和s2是否相等，如果相等，返回结果为1,  否则返回0。<br>②<code>strncmp(s 1 ,s2,n)</code>:用来比较两个字符串前n个字符是否相等，如果相等，返回1，否则返回0。<br>③<code>strcmpi(s1,s2)</code>:在忽略字母大小写前提下，比较字符串s1和s2是否相等，如果相等，返回1，否则返回0。<br>④<code>strncmpi(s l,s2,n)</code>:在忽略字符串大小写前提下，比较两个字符串前n个字 符是否相等，如果相等，返回1,否则返回0。</p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; strcmp(<span class="string">&#x27;www0&#x27;</span>,<span class="string">&#x27;w123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; strncmpi(<span class="string">&#x27;Www0&#x27;</span>,<span class="string">&#x27;w123&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="字符串的查找与替换"><a class="header-anchor" href="#字符串的查找与替换">¶</a>字符串的查找与替换</h4><ul><li>findstr(s 1 ,s2):返回短字符串在长字符串中的开始位置。</li><li>strrep(s 1 ,s2,s3):将字符串s1中的所有子字符串s2替换为字符串s3。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; p=findstr(<span class="string">&#x27;This is a test!&#x27;</span>,<span class="string">&#x27;is&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; p=findstr(<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;This is a test!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; result=strrep(<span class="string">&#x27;This is a test!&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">result =</span><br><span class="line"></span><br><span class="line">This is a class!</span><br></pre></td></tr></table></figure><h1>MATLAB矩阵处理</h1><h2 id="特殊矩阵"><a class="header-anchor" href="#特殊矩阵">¶</a>特殊矩阵</h2><ul><li>通用性的特殊矩阵</li><li>用于专门学科的特殊矩阵</li></ul><h3 id="通用性的特殊矩阵"><a class="header-anchor" href="#通用性的特殊矩阵">¶</a>通用性的特殊矩阵</h3><p><font color="red">zeros函数</font>&gt;:产生全0矩阵，即零矩阵。<br><font color="red">ones函数</font>:产生全1矩阵，即幺矩阵。<br><font color="red">eye函数</font>:产生对角线为1的矩阵。当矩阵是方阵时，得到一个单位矩阵。<br><font color="red">rand函数</font>:产生(0, 1)区间均匀分布的随机矩阵。<br><font color="red">randn函数</font>:产生均值为0，方差为1的标准正态分布随机矩阵。</p><p>zeros函数的调用格式:</p><ul><li>zeros(m): 产生m x m零矩阵。</li><li>zeros(m,n): 产生m x n零矩阵。</li><li>zeros(size(l):产生与矩阵A同样大小的零矩阵。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=<span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">zeros</span>(<span class="built_in">size</span>(<span class="built_in">reshape</span>(A,<span class="number">3</span>,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure><p>ex:首先产生5阶两位随机整数矩阵A，再产生均值为0.6、方差为0.1的5阶<br>正态分布随机矩阵B，最后验证(A+B)l=IA+BI ( I为单位矩阵)。</p><ul><li>rand函数:产生(0，1)开区间均匀分布的随机数x。</li><li>fix(a+(b-a+1)*x):产生[a，b]区间上均匀分布的随机整数。</li><li>randn函数:产生均值为0、方差为1的标准正态分布随机数x。</li><li>μ+σx:得到均值为μ、方差为σ^2的随机数。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = <span class="built_in">fix</span>(<span class="number">10</span>+(<span class="number">99</span><span class="number">-10</span>+<span class="number">1</span>)*<span class="built_in">rand</span>(<span class="number">5</span>));</span><br><span class="line">&gt;&gt; B = <span class="number">0.3</span>+<span class="built_in">sqrt</span>(<span class="number">0.1</span>)*<span class="built_in">randn</span>(<span class="number">5</span>);</span><br><span class="line">&gt;&gt; C = <span class="built_in">eye</span>(<span class="number">5</span>);</span><br><span class="line">&gt;&gt; (A+B)*C==C*A+B*C</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="用于专门学科的特殊矩阵"><a class="header-anchor" href="#用于专门学科的特殊矩阵">¶</a>用于专门学科的特殊矩阵</h3><h4 id="魔方矩阵-Magic-Square"><a class="header-anchor" href="#魔方矩阵-Magic-Square">¶</a>魔方矩阵- -Magic Square</h4><ul><li>n阶魔方阵由1,2,3,.,n2共n2个整数组成，且每行、每列以及主、副对角线上各n个元素之和都相等。</li><li>n阶魔方阵每行每列元素的和为(1+2+3+…+ n2)/n=(n+n3)/2。MATLAB函数magic(n)产生一个特定的魔方阵。</li></ul><p>ex:产生8阶魔方阵，求其每行每列元素的和。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; M= <span class="built_in">magic</span>(<span class="number">8</span>);</span><br><span class="line">&gt;&gt; sum(M(<span class="number">1</span>,:))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">260</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; sum(M(:,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">260</span></span><br></pre></td></tr></table></figure><h4 id="范德蒙矩阵"><a class="header-anchor" href="#范德蒙矩阵">¶</a>范德蒙矩阵</h4><p>对于向量V=[V1，V2， .，Vn]，范得蒙矩阵的一般形式为:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814111731.png" alt="image-20200814111220760"></p><p>在MATLAB中，函数vander(V)生 成以向量V为基础的范得<br>蒙( Vandermonde )矩阵。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = <span class="built_in">vander</span>(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">    <span class="number">16</span>     <span class="number">8</span>     <span class="number">4</span>     <span class="number">2</span>     <span class="number">1</span></span><br><span class="line">    <span class="number">81</span>    <span class="number">27</span>     <span class="number">9</span>     <span class="number">3</span>     <span class="number">1</span></span><br><span class="line">   <span class="number">256</span>    <span class="number">64</span>    <span class="number">16</span>     <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">   <span class="number">625</span>   <span class="number">125</span>    <span class="number">25</span>     <span class="number">5</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>范德蒙矩阵常用在各种通信系统的纠错编码中，例如,常用的Reed—Solomon编码即以范德蒙矩阵为基础。</p></blockquote><h4 id="希尔伯特矩阵"><a class="header-anchor" href="#希尔伯特矩阵">¶</a>希尔伯特矩阵</h4><p>n阶希尔伯特( Hilbert)矩阵的一般形式为:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814114657.png" alt="image-20200814114655977"></p><blockquote><p>希尔伯特矩阵的元素为H(ij)=1/(i+j-1)。</p></blockquote><p>在MATLAB中，生成n阶希尔伯特矩阵的函数是hilb(n)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; format <span class="built_in">rat</span></span><br><span class="line">&gt;&gt; H = <span class="built_in">hilb</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">H =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">1</span>/<span class="number">2</span>            <span class="number">1</span>/<span class="number">3</span>            <span class="number">1</span>/<span class="number">4</span>     </span><br><span class="line">       <span class="number">1</span>/<span class="number">2</span>            <span class="number">1</span>/<span class="number">3</span>            <span class="number">1</span>/<span class="number">4</span>            <span class="number">1</span>/<span class="number">5</span>     </span><br><span class="line">       <span class="number">1</span>/<span class="number">3</span>            <span class="number">1</span>/<span class="number">4</span>            <span class="number">1</span>/<span class="number">5</span>            <span class="number">1</span>/<span class="number">6</span>     </span><br><span class="line">       <span class="number">1</span>/<span class="number">4</span>            <span class="number">1</span>/<span class="number">5</span>            <span class="number">1</span>/<span class="number">6</span>            <span class="number">1</span>/<span class="number">7</span> </span><br></pre></td></tr></table></figure><blockquote><p>format rat设置输出格式以有理数格式输出</p></blockquote><h4 id="伴随矩阵"><a class="header-anchor" href="#伴随矩阵">¶</a>伴随矩阵</h4><p>设多项式p(x)为<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814115552.png" alt="image-20200814115544687">，则多项式的伴随矩阵是:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814115618.png" alt="image-20200814115617125"></p><blockquote><p>p(x)称为A的特征多项式，方程p(x)=0的根称为A的特征值。</p></blockquote><p>MATLAB生成伴随矩阵的函数是compan§，其中p是一个多项式的系数向量，高次幂系数排在前，低次幂系数排在后。</p><p>ex:生成多项式<code>x^3-2*x^2-5*x+6</code>的伴随矩阵 。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; p=[<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-5</span>,<span class="number">6</span>];</span><br><span class="line">&gt;&gt; A=<span class="built_in">compan</span>(p)</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">       <span class="number">2</span>              <span class="number">5</span>             <span class="number">-6</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">0</span>              <span class="number">0</span>       </span><br><span class="line">       <span class="number">0</span>              <span class="number">1</span>              <span class="number">0</span>   </span><br></pre></td></tr></table></figure><h4 id="帕斯卡矩阵"><a class="header-anchor" href="#帕斯卡矩阵">¶</a>帕斯卡矩阵</h4><ul><li>根据二项式定理，(x+y)&quot; 展开后的系数随着n的增大组成一个三角形表，这个三角形称为杨辉三角形。</li><li>把二项式系数依次填写在矩阵的左侧对角线上，然后提取左侧的n行n列元素即为n阶帕斯卡( Pascal)矩阵。</li></ul><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814130618.png" alt="image-20200814120326930"></p>          </div><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814130624.png" alt="image-20200814120432171"></p>          </div><ul><li>帕斯卡矩阵的第一行元素和第一列元素都为1，其余位置的元素是该元素的左边元素与上面元素相加，即P(ij)=P(ij-1)+P(i-1j),且P(i,1)=1,P(1.j)=1。</li><li>函数pascal(n)生成一个n阶帕斯卡矩阵。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814130652.png" alt="image-20200814120723165"></p><p>ex:生成5阶帕斯卡矩阵，验证它的逆矩阵的所有元素也为整数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; format <span class="built_in">rat</span></span><br><span class="line">&gt;&gt; P=<span class="built_in">pascal</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">P =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">3</span>              <span class="number">6</span>             <span class="number">10</span>             <span class="number">15</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">4</span>             <span class="number">10</span>             <span class="number">20</span>             <span class="number">35</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">5</span>             <span class="number">15</span>             <span class="number">35</span>             <span class="number">70</span>       </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&gt;&gt; inv(P)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">5</span>            <span class="number">-10</span>             <span class="number">10</span>             <span class="number">-5</span>              <span class="number">1</span>       </span><br><span class="line">     <span class="number">-10</span>             <span class="number">30</span>            <span class="number">-35</span>             <span class="number">19</span>             <span class="number">-4</span>       </span><br><span class="line">      <span class="number">10</span>            <span class="number">-35</span>             <span class="number">46</span>            <span class="number">-27</span>              <span class="number">6</span>       </span><br><span class="line">      <span class="number">-5</span>             <span class="number">19</span>            <span class="number">-27</span>             <span class="number">17</span>             <span class="number">-4</span>       </span><br><span class="line">       <span class="number">1</span>             <span class="number">-4</span>              <span class="number">6</span>             <span class="number">-4</span>              <span class="number">1</span>   </span><br></pre></td></tr></table></figure><h2 id="矩阵变换"><a class="header-anchor" href="#矩阵变换">¶</a>矩阵变换</h2><ul><li>对角阵</li><li>三角阵</li><li>矩阵的转置</li><li>矩阵的旋转</li><li>矩阵的翻转</li></ul><h3 id="对角阵"><a class="header-anchor" href="#对角阵">¶</a>对角阵</h3><ul><li>对角矩阵:只有对角线上有非零元素的矩阵。</li><li>数量矩阵:对角线上的元素相等的对角矩阵。</li><li>单位矩阵:对角线上的元素都为1的对角矩阵。</li></ul><h4 id="提取矩阵的对角线元素"><a class="header-anchor" href="#提取矩阵的对角线元素">¶</a>提取矩阵的对角线元素</h4><ul><li>diag(A): 提取矩阵A主对角线元素，产生一个列向量 。</li><li>diag(A,k): 提取矩阵A第k条对角线的元素，产生一个列向量。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814130610.png" alt="image-20200814130607966"></p><blockquote><p>对角线往上为第n条，往下为第（-n）条，主对角线为第0条对角线</p></blockquote><h4 id="构造对角矩阵"><a class="header-anchor" href="#构造对角矩阵">¶</a>构造对角矩阵</h4><ul><li>diag(V): 以向量V为主对角线元素，产生对角矩阵。</li><li>diag(V,k):以向量V为第k条对角线元素，产生对角矩阵。</li></ul><p>ex:例1先建立5x 5矩阵A，然后将A的第一行元素乘以1， 第二行乘以2，····，第五行乘以5。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>;<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt; D=<span class="built_in">diag</span>(<span class="number">1</span>:<span class="number">5</span>);</span><br><span class="line">&gt;&gt; D*A</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">7</span>              <span class="number">0</span>              <span class="number">1</span>              <span class="number">0</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">6</span>             <span class="number">10</span>             <span class="number">14</span>              <span class="number">8</span>              <span class="number">2</span>       </span><br><span class="line">      <span class="number">12</span>              <span class="number">0</span>              <span class="number">9</span>              <span class="number">0</span>              <span class="number">6</span>       </span><br><span class="line">       <span class="number">4</span>              <span class="number">4</span>             <span class="number">36</span>              <span class="number">8</span>             <span class="number">12</span>       </span><br><span class="line">       <span class="number">5</span>             <span class="number">40</span>             <span class="number">25</span>             <span class="number">10</span>             <span class="number">45</span>  </span><br></pre></td></tr></table></figure><blockquote><p>左乘行变换，石乘列变换</p></blockquote><p>think:要将A的各列元素分别乘以对角阵的对角线元素，如何实现?</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>;<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt; D=<span class="built_in">diag</span>(<span class="number">1</span>:<span class="number">5</span>);</span><br><span class="line">&gt;&gt; A*D</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">7</span>              <span class="number">0</span>              <span class="number">3</span>              <span class="number">0</span>             <span class="number">25</span>       </span><br><span class="line">       <span class="number">3</span>             <span class="number">10</span>             <span class="number">21</span>             <span class="number">16</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">4</span>              <span class="number">0</span>              <span class="number">9</span>              <span class="number">0</span>             <span class="number">10</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>             <span class="number">27</span>              <span class="number">8</span>             <span class="number">15</span>       </span><br><span class="line">       <span class="number">1</span>             <span class="number">16</span>             <span class="number">15</span>              <span class="number">8</span>             <span class="number">45</span>       </span><br></pre></td></tr></table></figure><h3 id="三角阵"><a class="header-anchor" href="#三角阵">¶</a>三角阵</h3><ul><li>上三角阵:矩阵的对角线以下的元素全为零的矩阵。</li><li>下三角阵:对角线以上的元素全为零的矩阵。</li></ul><h4 id="上三角矩阵"><a class="header-anchor" href="#上三角矩阵">¶</a>上三角矩阵</h4><ul><li>triu(A): 提取矩阵A的主对角线及以上的元素。</li><li>triulA,k): 提取矩阵A的第k条对角线及以上的元素。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">triu</span>(<span class="built_in">ones</span>(<span class="number">4</span>),<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>       </span><br><span class="line">       <span class="number">0</span>              <span class="number">1</span>              <span class="number">1</span>              <span class="number">1</span>       </span><br><span class="line">       <span class="number">0</span>              <span class="number">0</span>              <span class="number">1</span>              <span class="number">1</span>  </span><br></pre></td></tr></table></figure><h4 id="下三角矩阵"><a class="header-anchor" href="#下三角矩阵">¶</a>下三角矩阵</h4><p>在MATLAB中，提取矩阵A的下三角矩阵的函数是tril,其用法与triu函数<strong>完全相同</strong>。</p><h3 id="矩阵的转置"><a class="header-anchor" href="#矩阵的转置">¶</a>矩阵的转置</h3><ul><li>转置运算符是小数点后面接单引号(.’)。</li><li>共轭转置，其运算符是单引号(’)，它在转置的基础上还要取每个数的复共轭。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">1</span>,<span class="number">3</span>;<span class="number">3</span>+<span class="number">4</span><span class="built_in">i</span>,<span class="number">1</span><span class="number">-2</span><span class="built_in">i</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>        +    <span class="number">0</span><span class="built_in">i</span>             <span class="number">3</span>        +    <span class="number">0</span><span class="built_in">i</span>      </span><br><span class="line">       <span class="number">3</span>        +    <span class="number">4</span><span class="built_in">i</span>             <span class="number">1</span>        -    <span class="number">2</span><span class="built_in">i</span>      </span><br><span class="line"></span><br><span class="line">&gt;&gt; A.&#x27;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>        +    <span class="number">0</span><span class="built_in">i</span>             <span class="number">3</span>        +    <span class="number">4</span><span class="built_in">i</span>      </span><br><span class="line">       <span class="number">3</span>        +    <span class="number">0</span><span class="built_in">i</span>             <span class="number">1</span>        -    <span class="number">2</span><span class="built_in">i</span>      </span><br><span class="line"></span><br><span class="line">&gt;&gt; A&#x27;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>        +    <span class="number">0</span><span class="built_in">i</span>             <span class="number">3</span>        -    <span class="number">4</span><span class="built_in">i</span>      </span><br><span class="line">       <span class="number">3</span>        +    <span class="number">0</span><span class="built_in">i</span>             <span class="number">1</span>        +    <span class="number">2</span><span class="built_in">i</span>   </span><br></pre></td></tr></table></figure><h3 id="矩阵的旋转"><a class="header-anchor" href="#矩阵的旋转">¶</a>矩阵的旋转</h3><p><strong>rot90(A,k)</strong>:将矩阵A<u><strong>逆时针</strong></u>方向旋转90°的k倍，当k为1时可省略。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>;<span class="number">-3</span>,<span class="number">2</span>,<span class="number">1</span>;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">rot90</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">2</span>              <span class="number">1</span>              <span class="number">2</span>       </span><br><span class="line">       <span class="number">3</span>              <span class="number">2</span>              <span class="number">1</span>       </span><br><span class="line">       <span class="number">1</span>             <span class="number">-3</span>              <span class="number">4</span>       </span><br><span class="line">&gt;&gt; <span class="built_in">rot90</span>(A,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">2</span>              <span class="number">1</span>              <span class="number">4</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>             <span class="number">-3</span>       </span><br><span class="line">       <span class="number">2</span>              <span class="number">3</span>              <span class="number">1</span>     </span><br></pre></td></tr></table></figure><h3 id="矩阵的翻转"><a class="header-anchor" href="#矩阵的翻转">¶</a>矩阵的翻转</h3><ul><li>fliplrlA): 对矩阵A实施左右翻转。</li><li>flipud(A): 对矩阵A实施上下翻转。</li></ul><p>ex:验证魔方阵的主对角线、副对角线元素之和相等。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=<span class="built_in">magic</span>(<span class="number">5</span>);</span><br><span class="line">&gt;&gt; D1=<span class="built_in">diag</span>(A);</span><br><span class="line">&gt;&gt; sum(D1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">      <span class="number">65</span>       </span><br><span class="line"></span><br><span class="line">&gt;&gt; B=<span class="built_in">flipud</span>(A);</span><br><span class="line">&gt;&gt; D2=<span class="built_in">diag</span>(B);</span><br><span class="line">&gt;&gt; sum(D2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">      <span class="number">65</span>       </span><br></pre></td></tr></table></figure><h3 id="矩阵的求逆"><a class="header-anchor" href="#矩阵的求逆">¶</a>矩阵的求逆</h3><ul><li>对于一个方阵A，如果存在一个与其同阶的方阵B，使得AB=BA=I (I为单位矩阵)，则称B为A的逆矩阵，当然A也是B的逆矩阵。</li><li>inv(A):求方阵A的逆矩阵。</li></ul><p>ex:用求逆矩阵的方法解线性方程组。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814133537.png" alt="image-20200814133535069"></p><p>在线性方程组Ax=b两边各左乘A-1,有<code>A^（-1）*Ax=A^（-1）*b</code>，由于<code>A^(-1)A=1</code>故得<code>x=A^*(-1)b</code>。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>;<span class="number">1</span>,<span class="number">8</span>,<span class="number">27</span>];</span><br><span class="line">&gt;&gt; b=[<span class="number">5</span>;<span class="number">-2</span>;<span class="number">6</span>];</span><br><span class="line">&gt;&gt; x=inv(A)*b</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">      <span class="number">23</span>       </span><br><span class="line">     <span class="number">-29</span>/<span class="number">2</span>     </span><br><span class="line">      <span class="number">11</span>/<span class="number">3</span>     </span><br><span class="line"></span><br><span class="line">&gt;&gt; x=A\b</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">      <span class="number">23</span>       </span><br><span class="line">     <span class="number">-29</span>/<span class="number">2</span>     </span><br><span class="line">      <span class="number">11</span>/<span class="number">3</span>   </span><br></pre></td></tr></table></figure><h2 id="矩阵求值"><a class="header-anchor" href="#矩阵求值">¶</a>矩阵求值</h2><ul><li>矩阵的行列式值</li><li>矩阵的秩</li><li>矩阵的迹</li><li>矩阵的范数</li><li>矩阵的条件数</li><li>······</li></ul><h3 id="方阵的行列式"><a class="header-anchor" href="#方阵的行列式">¶</a>方阵的行列式</h3><ul><li>把一个方阵看作一个行列式，并对其按行列式的规则求值， 这个值就称为方阵所对应的行列式的值。</li><li>det(A): 求方阵A所对应的行列式的值。</li></ul><p>ex:验证detIA^-1)=1/det/A)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; format <span class="built_in">rat</span></span><br><span class="line">&gt;&gt; A = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>;<span class="number">-3</span>,<span class="number">2</span>,<span class="number">1</span>;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">&gt;&gt; det(inv(A))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>/<span class="number">11</span>    </span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="number">1</span>/det(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>/<span class="number">11</span>    </span><br></pre></td></tr></table></figure><h3 id="矩阵的秩"><a class="header-anchor" href="#矩阵的秩">¶</a>矩阵的秩</h3><ul><li>矩阵线性无关的行数或列数称为矩阵的秩。</li><li>rank(A): 求矩阵A的秩。</li></ul><p>ex:求3~20阶魔方阵的秩。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n=<span class="number">3</span>:<span class="number">20</span></span><br><span class="line">    r(n)=rank(<span class="built_in">magic</span>(n));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bar(r)</span><br><span class="line">grid on</span><br><span class="line">axis([<span class="number">2</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">20</span>])</span><br></pre></td></tr></table></figure><ul><li>奇数阶魔方阵秩为n，即奇数阶魔方阵是满秩矩阵。</li><li>一重偶数阶魔方阵秩为n/2+2 ( n是2的倍数，但非4的倍数)。</li><li>双重偶数阶魔方阵秩均为3 ( 阶数是4的倍数)。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814155037.png" alt="image-20200814155035845"></p><blockquote><p>n=3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18 19 20<br>r=3  3  5  5  7  3  9    7   11  3     13   9   15   3    17  11 19  3</p></blockquote><h3 id="矩阵的迹"><a class="header-anchor" href="#矩阵的迹">¶</a>矩阵的迹</h3><ul><li>矩阵的迹等于矩阵的对角线元素之和，也等于矩阵的特征值之和。</li><li>trace(A): 求矩阵A的迹。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>;<span class="number">-3</span>,<span class="number">2</span>,<span class="number">1</span>;<span class="number">4</span> <span class="number">1</span> <span class="number">2</span>];</span><br><span class="line">&gt;&gt; b=trace(A)</span><br><span class="line"></span><br><span class="line">b =</span><br><span class="line"></span><br><span class="line">       <span class="number">5</span>       </span><br><span class="line"></span><br><span class="line">&gt;&gt; t=sum(<span class="built_in">diag</span>(A))</span><br><span class="line"></span><br><span class="line">t =</span><br><span class="line"></span><br><span class="line">       <span class="number">5</span>  </span><br></pre></td></tr></table></figure><h3 id="向量和矩阵的范数"><a class="header-anchor" href="#向量和矩阵的范数">¶</a>向量和矩阵的范数</h3><p>矩阵或向量的范数用来度量矩阵或向量在某种意义下的长度。</p><h4 id="向量的3种常用范数"><a class="header-anchor" href="#向量的3种常用范数">¶</a>向量的3种常用范数</h4><ul><li><p>向量1——范数:向量元素的绝对值之和。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814155917.png" alt="image-20200814155915318"></p></li><li><p>向量2——范数:向量元素绝对值的平方和的平方根。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814155932.png" alt="image-20200814155931635"></p></li><li><p>向量∞——范数:所有向量元素绝对值中的最大值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814155948.png" alt="image-20200814155947134"></p></li></ul><p>在MATLAB中，求向量范数的函数为:</p><ul><li>norm(V)或norm(V,2): 计算向量V的2——范数。</li><li>norm(V,1): 计算向量V的1——范数。</li><li>norm(V,inf): 计算向量V的∞——范数。</li></ul><p>从属于3种向量范数，矩阵范数计算公式如下。</p><ul><li><p>矩阵A的1——范数:矩阵列元素绝对值之和的最大值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814160554.png" alt="image-20200814160553474"></p></li><li><p>矩阵A的2——范数: A’A矩阵的最大特征值的平方根。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814160610.png" alt="image-20200814160608837"></p><blockquote><p>其中λ1为A’A的最大特征值。</p></blockquote></li><li><p>矩阵A的∞——范数:所有矩阵行元素绝对值之和的最大值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814160713.png" alt="image-20200814160711963"></p></li></ul><h4 id="矩阵的范数"><a class="header-anchor" href="#矩阵的范数">¶</a>矩阵的范数</h4><p>MATLAB提供了求3种矩阵范数的函数，其函数调用格式与求向量的范数的函数完全相同。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">2</span> <span class="number">0</span> <span class="number">1</span>;<span class="number">-1</span> <span class="number">1</span> <span class="number">0</span>;<span class="number">-3</span> <span class="number">3</span> <span class="number">0</span>];</span><br><span class="line">&gt;&gt; n=norm(x)</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">    <span class="number">5909</span>/<span class="number">1251</span>  </span><br><span class="line"></span><br><span class="line">&gt;&gt; n=norm(x,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">       <span class="number">6</span>     </span><br></pre></td></tr></table></figure><h3 id="矩阵的条件数"><a class="header-anchor" href="#矩阵的条件数">¶</a>矩阵的条件数</h3><ul><li>矩阵A的条件数等于A的范数与A的逆矩阵的范数的乘积。</li><li>条件数越接近于1，矩阵的性能越好，反之，矩阵的性能越差。</li></ul><p>在MATLAB中，计算矩阵A的3种条件数的函数是:</p><ul><li>cond(A,1): 计算A的1——范数下的条件数。</li><li>cond(A)或cond(A,2): 计算A的2——范数下的条件数。</li><li>cond(A,inf): 计算A的∞——范数下的条件数。</li></ul><p>ex:求2~10阶希尔伯特矩阵的条件数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n=<span class="number">2</span>:<span class="number">10</span></span><br><span class="line">    c(n)=cond(<span class="built_in">hilb</span>(n));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">format long</span><br><span class="line">c&#x27;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.0e+13</span> *</span><br><span class="line"></span><br><span class="line">                   <span class="number">0</span></span><br><span class="line">   <span class="number">0.000000000001928</span></span><br><span class="line">   <span class="number">0.000000000052406</span></span><br><span class="line">   <span class="number">0.000000001551374</span></span><br><span class="line">   <span class="number">0.000000047660725</span></span><br><span class="line">   <span class="number">0.000001495105864</span></span><br><span class="line">   <span class="number">0.000047536735674</span></span><br><span class="line">   <span class="number">0.001525757555589</span></span><br><span class="line">   <span class="number">0.049315409793086</span></span><br><span class="line">   <span class="number">1.602519837209610</span></span><br></pre></td></tr></table></figure><h2 id="矩阵的特征值与特征向量"><a class="header-anchor" href="#矩阵的特征值与特征向量">¶</a>矩阵的特征值与特征向量</h2><h3 id="矩阵特征值的数学定义"><a class="header-anchor" href="#矩阵特征值的数学定义">¶</a>矩阵特征值的数学定义</h3><p>设A是n阶方阵，如果存在常数λ和n维非零列向量x，使得等式Ax= λ x成立，则称λ为A的特征值，是对应特征值λ的特征向量。</p><h3 id="求矩阵的特征值与特征向量"><a class="header-anchor" href="#求矩阵的特征值与特征向量">¶</a>求矩阵的特征值与特征向量</h3><p>函数调用格式有两种:</p><ul><li>E=eig(A) :求矩阵A的全部特征值，构成向量E。</li><li>[X,D]=eig(A) :求矩阵A的全部<strong>特征值</strong>，构成对角阵D,并产生矩阵X，X各列是相应的<strong>特征向量</strong>。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">1</span> <span class="number">0</span>;<span class="number">1</span> <span class="number">0</span> <span class="number">5</span>;<span class="number">1</span> <span class="number">10</span> <span class="number">2</span>];</span><br><span class="line">&gt;&gt; [X,D]=eig(A)</span><br><span class="line"></span><br><span class="line">X =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.072196186226992</span>   <span class="number">0.975064063761619</span>   <span class="number">0.088619224195265</span></span><br><span class="line">   <span class="number">0.523368974057523</span>  <span class="number">-0.075013465822402</span>  <span class="number">-0.635606218080313</span></span><br><span class="line">   <span class="number">0.849042182514069</span>  <span class="number">-0.208861321230112</span>   <span class="number">0.766910274178584</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">   <span class="number">8.249260679947780</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>   <span class="number">0.923068166892526</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>  <span class="number">-6.172328846840312</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; A*X(:,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.595565160284515</span></span><br><span class="line">   <span class="number">4.317407098797336</span></span><br><span class="line">   <span class="number">7.003970291830360</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; D(<span class="number">1</span>)*X(:,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.595565160284514</span></span><br><span class="line">   <span class="number">4.317407098797333</span></span><br><span class="line">   <span class="number">7.003970291830354</span></span><br></pre></td></tr></table></figure><p>ex:设</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212852.png" alt="image-20200814162922537"></p><p>又设λi为R的特征值，λi为S的特征值，x= ( $\alpha1$,$\alpha2$,$\alpha3$)'是R对应于hi的特征向量，yj= ( β1, βB2) '是S对应于hj的特征向量，试验证:<br>(1) <em>λ</em>i、<em>λ</em>j为A的特征值。<br>(2) pi=  ( $\alpha1$,$\alpha2$,$\alpha3$,0,0) '是A对应于<em>λ</em>i的特征向量，qj= (0,0,0, β1, β2) '是A对应于λj的特征向量。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R=[<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>;<span class="number">2</span>,<span class="number">-4</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-6</span>];</span><br><span class="line">S=[<span class="number">1</span>,<span class="number">2</span>;<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">A=[R,<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">2</span>);<span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>),S];</span><br><span class="line">[X1,d1]=eig(R)</span><br><span class="line">[X2,d2]=eig(S)</span><br><span class="line">[X3,d3]=eig(A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.855336847706575</span>   <span class="number">0.451748808798346</span>   <span class="number">0.189889692402449</span></span><br><span class="line">   <span class="number">0.470284611344323</span>  <span class="number">-0.839453879712591</span>  <span class="number">-0.511105640718618</span></span><br><span class="line">   <span class="number">0.217327543786097</span>  <span class="number">-0.302059923830942</span>   <span class="number">0.838279743728139</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.099647729675864</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>  <span class="number">-4.716463058067783</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>  <span class="number">-6.383184671608076</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X2 =</span><br><span class="line"></span><br><span class="line">  <span class="number">-0.850650808352040</span>   <span class="number">0.525731112119133</span></span><br><span class="line">   <span class="number">0.525731112119133</span>   <span class="number">0.850650808352040</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d2 =</span><br><span class="line"></span><br><span class="line">  <span class="number">-0.236067977499790</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>   <span class="number">4.236067977499790</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X3 =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.855336847706575</span>   <span class="number">0.451748808798346</span>   <span class="number">0.189889692402449</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">   <span class="number">0.470284611344323</span>  <span class="number">-0.839453879712591</span>  <span class="number">-0.511105640718618</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">   <span class="number">0.217327543786097</span>  <span class="number">-0.302059923830942</span>   <span class="number">0.838279743728139</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>  <span class="number">-0.850650808352040</span>  <span class="number">-0.525731112119133</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>   <span class="number">0.525731112119133</span>  <span class="number">-0.850650808352040</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d3 =</span><br><span class="line"></span><br><span class="line">   <span class="number">0.099647729675864</span>                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>  <span class="number">-4.716463058067783</span>                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>  <span class="number">-6.383184671608076</span>                   <span class="number">0</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>  <span class="number">-0.236067977499790</span>                   <span class="number">0</span></span><br><span class="line">                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>                   <span class="number">0</span>   <span class="number">4.236067977499790</span></span><br></pre></td></tr></table></figure><h3 id="特征值的几何意义"><a class="header-anchor" href="#特征值的几何意义">¶</a>特征值的几何意义</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814170219.png" alt="image-20200814170216676"></p><p>MATLAB提供了一个eigshow函数， 可以演示单位圆.上的向量x和Ax之间的关系，其运行画面如图所示。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814170404.png" alt="image-20200814170402647"></p><p>ex:已知大写字母M的各个结点坐标如表所示。</p><table><thead><tr><th>x</th><th>0</th><th>0.5</th><th>0.5</th><th>3</th><th>5.5</th><th>5.5</th><th>6</th><th>6</th><th>3</th><th>0</th></tr></thead><tbody><tr><td>y</td><td>0</td><td>0</td><td>6</td><td>0</td><td>6</td><td>0</td><td>0</td><td>8</td><td>1</td><td>8</td></tr></tbody></table><p>(1)绘制M的图形。<br>(2)设<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814170708.png" alt="image-20200814170706706"> ，用A对M的结点坐标进行变换，并绘制变换后的图形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">3</span>,<span class="number">5.5</span>,<span class="number">5.5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">8</span>];</span><br><span class="line">A=[<span class="number">1</span>,<span class="number">0.5</span>;<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">y=A*x;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">fill(x(<span class="number">1</span>,:),x(<span class="number">2</span>,:),<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">fill(y(<span class="number">1</span>,:),y(<span class="number">2</span>,:),<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814170822.png" alt="image-20200814170821221"></p><h2 id="稀疏矩阵"><a class="header-anchor" href="#稀疏矩阵">¶</a>稀疏矩阵</h2><ul><li>矩阵的存储方式</li><li>稀疏存储方式的产生.</li><li>稀疏矩阵的应用实例</li></ul><h3 id="矩阵的存储方式"><a class="header-anchor" href="#矩阵的存储方式">¶</a>矩阵的存储方式</h3><ul><li>完全存储方式</li><li>稀疏存储方式</li></ul><p>稀疏存储方式只存储矩阵的非零元素的值及其位置，即行号和列号。</p><blockquote><p>注意，采用稀疏存储方式时，矩阵元素的存储顺序并没有改变，也是按列的顺序进行存储。</p></blockquote><h3 id="稀疏存储方式的产生"><a class="header-anchor" href="#稀疏存储方式的产生">¶</a>稀疏存储方式的产生</h3><h4 id="完全存储方式与稀疏存储方式之间的转化"><a class="header-anchor" href="#完全存储方式与稀疏存储方式之间的转化">¶</a>完全存储方式与稀疏存储方式之间的转化</h4><ul><li>A=sparse(S): 将矩阵S转化为稀疏存储方式的矩阵A。</li><li>S=ful(A): 将矩阵A转化为完全存储方式的矩阵S。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=sparse(<span class="built_in">eye</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   (<span class="number">1</span>,<span class="number">1</span>)        <span class="number">1</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">2</span>)        <span class="number">1</span></span><br><span class="line">   (<span class="number">3</span>,<span class="number">3</span>)        <span class="number">1</span></span><br><span class="line">   (<span class="number">4</span>,<span class="number">4</span>)        <span class="number">1</span></span><br><span class="line">   (<span class="number">5</span>,<span class="number">5</span>)        <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; B=full(A)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; whos</span><br><span class="line">  Name      Size            Bytes  Class     Attributes</span><br><span class="line"></span><br><span class="line">  A         <span class="number">5</span>x5               <span class="number">128</span>  double    sparse    </span><br><span class="line">  B         <span class="number">5</span>x5               <span class="number">200</span>  double            </span><br></pre></td></tr></table></figure><blockquote><p>所占的存储空间不一样</p></blockquote><h4 id="直接建立稀疏存储矩阵"><a class="header-anchor" href="#直接建立稀疏存储矩阵">¶</a>直接建立稀疏存储矩阵</h4><p>sparse函数的其他调用格式:</p><ul><li>sparse(m,n):生成一个m x n的所有元素都是零的稀疏矩阵。</li><li>sparse(u,v,S):其中u、v、S是3个等长的向量。S是要建立的稀疏存储矩阵的非零元素，u(i)、 v(i)分别是S(i)的行和列下标。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   (<span class="number">2</span>,<span class="number">1</span>)        <span class="number">5</span></span><br><span class="line">   (<span class="number">1</span>,<span class="number">2</span>)        <span class="number">4</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">4</span>)       <span class="number">-7</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; B=full(A)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>     <span class="number">4</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">5</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">-7</span></span><br></pre></td></tr></table></figure><p>使用spconvert函数直接建立稀疏存储矩阵，其调用格式为:<br>B=spconvert(A)</p><p>A为一个m x 3或m x 4的矩阵，其每行表示一个非零元素，m是非零元素的个数。</p><p>●Ali,1)表示第i个非零元素所在的行。<br>●Ali,2)表示第i个非零元素所在的列。<br>●Ali,3)表示第i个非零元素值的实部。<br>●A(i,4)表示第i个非零元素值的虚部。<br>若矩阵的全部元素都是实数，则无须第4列。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">2</span> <span class="number">2</span> <span class="number">1</span>;<span class="number">2</span> <span class="number">1</span> <span class="number">-1</span>;<span class="number">2</span> <span class="number">4</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span>     <span class="number">2</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">1</span>    <span class="number">-1</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">4</span>     <span class="number">3</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; B=spconvert(A)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">   (<span class="number">2</span>,<span class="number">1</span>)       <span class="number">-1</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">2</span>)        <span class="number">1</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">4</span>)        <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="带状稀疏矩阵的稀疏存储"><a class="header-anchor" href="#带状稀疏矩阵的稀疏存储">¶</a>带状稀疏矩阵的稀疏存储</h4><p>稀疏矩阵有两种基本类型:无规则结构的稀疏矩阵与有规则结构的稀疏矩阵。<br><font color="red"><strong>带状稀疏矩阵</strong></font>是指所有非零元素集中在对角线上的矩阵。</p><ul><li>[B,d]=spdiags(A):从带状稀疏矩阵A中提取全部非零对角线元素赋给矩阵B及其这些非零对角线的位置向量d。</li><li>A=spdiags(B,d,m,n):产生带状稀疏矩阵的稀疏存储矩阵A,其中m、n为原带状稀疏矩阵的行数与列数，矩阵B的第i列即为原带状稀疏矩阵的第i条非零对角线，向量d为原带状稀疏矩阵所有非零对角线的位置。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">0</span>,<span class="number">31</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">32</span>;<span class="number">41</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">42</span>,<span class="number">0</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">51</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>];</span><br><span class="line">&gt;&gt; [B,d]=spdiags(A)</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>    <span class="number">11</span>    <span class="number">12</span></span><br><span class="line">     <span class="number">0</span>    <span class="number">21</span>    <span class="number">22</span></span><br><span class="line">     <span class="number">0</span>    <span class="number">31</span>    <span class="number">32</span></span><br><span class="line">    <span class="number">41</span>    <span class="number">42</span>     <span class="number">0</span></span><br><span class="line">    <span class="number">51</span>    <span class="number">52</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d =</span><br><span class="line"></span><br><span class="line">    <span class="number">-3</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">&gt;&gt; A=spdiags(B,d,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   (<span class="number">1</span>,<span class="number">1</span>)       <span class="number">11</span></span><br><span class="line">   (<span class="number">4</span>,<span class="number">1</span>)       <span class="number">41</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">2</span>)       <span class="number">21</span></span><br><span class="line">   (<span class="number">5</span>,<span class="number">2</span>)       <span class="number">51</span></span><br><span class="line">   (<span class="number">3</span>,<span class="number">3</span>)       <span class="number">31</span></span><br><span class="line">   (<span class="number">1</span>,<span class="number">4</span>)       <span class="number">12</span></span><br><span class="line">   (<span class="number">4</span>,<span class="number">4</span>)       <span class="number">42</span></span><br><span class="line">   (<span class="number">2</span>,<span class="number">5</span>)       <span class="number">22</span></span><br><span class="line">   (<span class="number">5</span>,<span class="number">5</span>)       <span class="number">52</span></span><br><span class="line">   (<span class="number">3</span>,<span class="number">6</span>)       <span class="number">32</span></span><br></pre></td></tr></table></figure><h4 id="单位矩阵的稀疏存储"><a class="header-anchor" href="#单位矩阵的稀疏存储">¶</a>单位矩阵的稀疏存储</h4><p>speye(m,n)返回一个m x n的稀疏存储单位矩阵。</p><h3 id="稀疏矩阵应用举例"><a class="header-anchor" href="#稀疏矩阵应用举例">¶</a>稀疏矩阵应用举例</h3><p>求下列三对角线性方程组的解。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200814174155.png" alt="image-20200814173453009"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; kf1=[<span class="number">1</span>;<span class="number">1</span>;<span class="number">2</span>;<span class="number">1</span>;<span class="number">0</span>];</span><br><span class="line">&gt;&gt; k0=[<span class="number">2</span>;<span class="number">4</span>;<span class="number">6</span>;<span class="number">6</span>;<span class="number">1</span>];</span><br><span class="line">&gt;&gt; k1=[<span class="number">0</span>;<span class="number">3</span>;<span class="number">1</span>;<span class="number">4</span>;<span class="number">2</span>];</span><br><span class="line">&gt;&gt; B=[kf1,k0,k1];</span><br><span class="line">&gt;&gt; d=[<span class="number">-1</span>;<span class="number">0</span>;<span class="number">1</span>];</span><br><span class="line">&gt;&gt; A=spdiags(B,d,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">&gt;&gt; f=[<span class="number">0</span>;<span class="number">3</span>;<span class="number">2</span>;<span class="number">1</span>;<span class="number">5</span>];</span><br><span class="line">&gt;&gt; x=A\f</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">  <span class="number">-0.166666666666667</span></span><br><span class="line">   <span class="number">0.111111111111111</span></span><br><span class="line">   <span class="number">2.722222222222222</span></span><br><span class="line">  <span class="number">-3.611111111111111</span></span><br><span class="line">   <span class="number">8.611111111111111</span></span><br></pre></td></tr></table></figure><h1>MATLAB程序流程控制</h1><h2 id="顺序结构程序"><a class="header-anchor" href="#顺序结构程序">¶</a>顺序结构程序</h2><h3 id="程序和程序设计"><a class="header-anchor" href="#程序和程序设计">¶</a>程序和程序设计</h3><p>什么叫程序?<br>程序是用某种计算机能够理解并且能够执行的语言来描述的解决问题的方法和步骤。</p><p>程序设计的基本步骤：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200815210426.png" alt="image-20200815210418505"></p><h3 id="程序的三种基本结构"><a class="header-anchor" href="#程序的三种基本结构">¶</a>程序的三种基本结构</h3><ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul><h3 id="脚本文件和函数文件"><a class="header-anchor" href="#脚本文件和函数文件">¶</a>脚本文件和函数文件</h3><ul><li>脚本文件是可以在命令行窗口直接执行的文件，也叫命令文件。</li><li>函数文件是定义一个函数，不能直接执行，而必须以函数调用的方式来调用它。</li></ul><h3 id="文件的建立"><a class="header-anchor" href="#文件的建立">¶</a>文件的建立</h3><ul><li><p>用命令按钮创建文件。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200815232458.png" alt="image-20200815232456459"></p></li><li><p>用edit命令创建文件。</p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; edit test</span><br></pre></td></tr></table></figure><p>ex:分别建立脚本文件和函数文件,求两个矩阵的乘积。</p><ul><li>建立脚本文件f1.m。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">B=[<span class="number">1</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">4</span>;<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">C=A*B</span><br></pre></td></tr></table></figure><ul><li>在命令行窗口运行脚本文件。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt;f1</span><br><span class="line">C = </span><br><span class="line">   <span class="number">22</span>   <span class="number">28</span></span><br><span class="line">   <span class="number">49</span>   <span class="number">64</span></span><br></pre></td></tr></table></figure><ul><li>建立函数文件f2.m。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>=<span class="title">f2</span><span class="params">(A,B)</span></span></span><br><span class="line">C=A*B;</span><br></pre></td></tr></table></figure><ul><li>在命令行窗C ]调用函数文件。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">&gt;&gt; B=[<span class="number">1</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">4</span>;<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">C=</span><br><span class="line">   <span class="number">22</span>   <span class="number">28</span></span><br><span class="line">   <span class="number">49</span>   <span class="number">64</span></span><br></pre></td></tr></table></figure><h3 id="顺序结构"><a class="header-anchor" href="#顺序结构">¶</a>顺序结构</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200815233530.png" alt="image-20200815233529301"></p><h4 id="数据的输入"><a class="header-anchor" href="#数据的输入">¶</a>数据的输入</h4><p>A=input(提示信息，选项);</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt; A=input(<span class="string">&#x27;请输入变量A的值:&#x27;</span>);</span><br><span class="line">请输入变量A的值: <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="数据的输出"><a class="header-anchor" href="#数据的输出">¶</a>数据的输出</h4><p>disp(输出项);</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; s=<span class="string">&#x27;Hello,World&#x27;</span>;</span><br><span class="line">&gt;&gt; <span class="built_in">disp</span>(s)</span><br><span class="line">Hello,World</span><br><span class="line">&gt;&gt; a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">disp</span>(a)</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">   <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="程序的暂停"><a class="header-anchor" href="#程序的暂停">¶</a>程序的暂停</h4><p>pause(延迟秒数)<br>若要强行中止程序的运行可使用Ctrl+C命令。</p><blockquote><p>若是省略秒数，直到用户按任意键才会继续执行程序</p></blockquote><ul><li>输入原始数据</li><li>对原始数据进行处理</li><li>输出处理结果</li></ul><p>ex:有一-线段AB，A的坐标为(1，1)， B的坐标为(4.5，4.5)， 求AB的长度，以及黄金分割点C的坐标。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200815234529.png" alt="image-20200815234527741"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200815234737.png" alt="image-20200815234735398"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=input(<span class="string">&#x27;a=);</span></span><br><span class="line"><span class="string">b=input(&quot;b=&#x27;</span>);</span><br><span class="line">c=a+<span class="number">0.618</span>*(b-a);</span><br><span class="line">s=<span class="built_in">abs</span>(a-b);</span><br><span class="line"><span class="built_in">disp</span>(s)</span><br><span class="line"><span class="built_in">disp</span>(c)</span><br><span class="line"></span><br><span class="line">输出结果为:</span><br><span class="line">a=<span class="number">1</span> +<span class="built_in">i</span></span><br><span class="line">b=<span class="number">4.5</span>+<span class="number">4.5</span><span class="built_in">i</span></span><br><span class="line">  <span class="number">4.9497</span></span><br><span class="line">  <span class="number">3.1630</span> + <span class="number">3.1630</span><span class="built_in">i</span></span><br></pre></td></tr></table></figure><h2 id="选择结构程序"><a class="header-anchor" href="#选择结构程序">¶</a>选择结构程序</h2><h3 id="用if语句实现选择结构"><a class="header-anchor" href="#用if语句实现选择结构">¶</a>用if语句实现选择结构</h3><h4 id="什么是选择结构"><a class="header-anchor" href="#什么是选择结构">¶</a>什么是选择结构?</h4><p>选择结构又称为分支结构，是根据给定的条件是否成立来决定程序的执行流程。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816100723.png" alt="image-20200816100721041"></p><ul><li>用if语句实现选择结构</li><li>用switch语句实现选择结构</li></ul><h4 id="单分支if语句"><a class="header-anchor" href="#单分支if语句">¶</a>单分支if语句</h4><p>语句格式:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if 条件</span><br><span class="line"><span class="code">    语句组</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><blockquote><p>条件：关系运算或逻辑运算<br>语句组：可以是一条语句,也可以是多条语句</p></blockquote><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816101231.png" alt="image-20200816101230060"></p><ul><li><p>当条件结果为标量时，<strong>非零</strong>表示条件成立，<strong>零</strong>表示条件不成立。</p></li><li><p>当条件结果为矩阵时，如果矩阵为非空，且不包含零元素，则条件成立，否则不成立。</p></li></ul><blockquote><p>例如，[1,2;0,4]表示条件时，条件不成立; [1,2;3,4]表示条件时,条件成立。</p></blockquote><h4 id="双分支if语句"><a class="header-anchor" href="#双分支if语句">¶</a>双分支if语句</h4><p>语句格式:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if条件</span><br><span class="line"><span class="code">    语句组1</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">    语句组2</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816102148.png" alt="image-20200816102145334"></p><p>ex:输入一个整数，若为奇数则输出其平方根，否则输出其立方根。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=input(<span class="string">&#x27;请输入x的值:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">rem</span>(x,<span class="number">2</span>)== <span class="number">1</span></span><br><span class="line">   y=<span class="built_in">sqrt</span>(x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   y=x^(<span class="number">1</span>/<span class="number">3</span>); .</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>rem(x,2)==1可等价写成rem(x,2)<br>x(1/3)可等价写成power(x,1/3)</p></blockquote><h4 id="多分支if语句"><a class="header-anchor" href="#多分支if语句">¶</a>多分支if语句</h4><p>语句格式:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">if 条件1</span><br><span class="line"><span class="code">     语句组1</span></span><br><span class="line"><span class="code">elseif 条件2</span></span><br><span class="line"><span class="code">     语句组2</span></span><br><span class="line"><span class="code">     ···</span></span><br><span class="line"><span class="code">elseif 条件m</span></span><br><span class="line"><span class="code">     语句组m</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">    语句组n</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816102644.png" alt="image-20200816102641792"></p><blockquote><p>在多分支if语句中不管有几个分支，程序执行完一个分支后，其余分支将不会再执行，这时整个if语句结束。</p></blockquote><p>ex:  输入一个字符，若为大写字母，则输出其对应的小写字母;若为小写字母，则输出其对应的大写字母;若为数字字符则输出其对应数的平方，若为其他字符则原样输出。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c=input(<span class="string">&#x27;请输入一个字符: &#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line"><span class="built_in">disp</span>(lower(c))</span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span></span><br><span class="line"><span class="built_in">disp</span>(upper(c))</span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span></span><br><span class="line"><span class="built_in">disp</span>(str2double(c)^<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">disp</span>(c)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>'s’表示以字符串形式接受用户的输入<br>lower函数：将大写字母转换为相应的小写字母<br>upper函数：将小写字母转换成相应的大写字母<br>str2double函数：将字符串转换成数值</p></blockquote><h3 id="用switch语句实现选择结构"><a class="header-anchor" href="#用switch语句实现选择结构">¶</a>用switch语句实现选择结构</h3><h4 id="switch语句的格式"><a class="header-anchor" href="#switch语句的格式">¶</a>switch语句的格式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">switch 表达式</span><br><span class="line">  case 结果表1</span><br><span class="line"><span class="code">    语句组1</span></span><br><span class="line"><span class="code">  case 结果表2</span></span><br><span class="line"><span class="code">    语句组2</span></span><br><span class="line"><span class="code">    ···</span></span><br><span class="line"><span class="code">  case 结果表m</span></span><br><span class="line"><span class="code">    语句组m</span></span><br><span class="line"><span class="code">  otherwise</span></span><br><span class="line"><span class="code">    语句组n</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816104158.png" alt="image-20200816104156964"></p><ul><li>switch表达式应该是一个其值可以列举的表达式。</li><li>case结果表为switch表达式的取值，当取值有多个时，用单元数<br>据表示。</li></ul><p>ex:输入一个英文单词，判断它是否以元音字母开头。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c=input(<span class="string">&#x27;请输入一个单词: &#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> c(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;&#x27;O&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">disp</span>([c,<span class="string">&#x27;以元音字母开头&#x27;</span>]);</span><br><span class="line"><span class="keyword">otherwise</span></span><br><span class="line"><span class="built_in">disp</span>([c,<span class="string">&#x27;以辅音字母开头&#x27;</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c=input(<span class="string">&#x27;请输入一个单词: &#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> strfind(c(<span class="number">1</span>),<span class="string">&#x27;AEIOUaeiou&#x27;</span>)&gt;<span class="number">0</span></span><br><span class="line"><span class="built_in">disp</span>([c,<span class="string">&#x27;以元音字母开头&#x27;</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">disp</span>([c,<span class="string">&#x27;以辅音字母开头&#x27;</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ex:例2 PM2. 5是指大气中直径小于或等于2.5微米的可入肺颗粒物，是衡量空气质量的重要指标。假定空气质量等级以PM2.5数值划分为6级。<br>PM2.5数值在[0，35)空气气质量为优，[35，75)为良，[75，115 )为轻度污染，[115， 150)为中度污染，[150， 250) 为重度污染,大于等于250为严重污染。<br>编写程序，输入PM2.5数值，输出空气质量等级。</p><ul><li>用六个单分支结构实现</li><li>用多分支if语句实现</li><li>用switch语句实现</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g=input(<span class="string">&#x27;请输入PM2.5值: &#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">fix</span>(g)</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">0</span>:<span class="number">34</span>)</span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量优&#x27;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">35</span>:<span class="number">74</span>)</span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量良好&#x27;</span>); </span><br><span class="line"><span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">75</span>:<span class="number">114</span>)</span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量轻度污染&#x27;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">115</span>:<span class="number">149</span>)</span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量中度污染&#x27;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">150</span>:<span class="number">249</span>)</span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量重度污染&#x27;</span>);</span><br><span class="line"><span class="keyword">otherwise</span></span><br><span class="line">   <span class="built_in">disp</span>(<span class="string">&#x27;空气质量严重污染&#x27;</span>); </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>num2cell函数：将数值矩阵转换成单元矩阵</p></blockquote><h2 id="循环结构程序"><a class="header-anchor" href="#循环结构程序">¶</a>循环结构程序</h2><h3 id="什么是循环结构"><a class="header-anchor" href="#什么是循环结构">¶</a>什么是循环结构?</h3><p>循环结构又称为重复结构，是利用计算机运算速度快以及能进行逻辑控制的特点来重复执行某些操作。</p><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816112840.png" alt="image-20200816112838938"></p><h3 id="用for语句实现循环结构"><a class="header-anchor" href="#用for语句实现循环结构">¶</a>用for语句实现循环结构</h3><h4 id="for语句"><a class="header-anchor" href="#for语句">¶</a>for语句</h4><p>格式:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">for 循环变量=表达式1:表达式2:表达式3   %初值|步长|终值%</span><br><span class="line"><span class="code">    循环体语句  %重复执行的语句%</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816114109.png" alt="image-20200816113228653"></p><p>说明:</p><ul><li>for语句针对向量的每一个元素执行一 次循环体。</li><li>退出循环之后，循环变量的值就是向量中最后的元素值。</li><li>当向量为空时，循环体一次也不执行。</li></ul><p>ex:计算圆周率π</p><p>(1)利用无穷级数展开式求π的近似值。</p><ul><li><p>这是求n个数之和的累加问题，可用以下递推式来描述:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212437.png" alt="image-20200816113638006"></p></li><li><p>可用以下赋值语句来实现。</p><p>y=y+f</p></li><li><p>累加项f的符号可用以下赋值语句来实现(每循环一次反号一 次)<br>g=-g</p></li><li><p>累加项f就可用以下赋值语句来实现。</p><p><code>f=g*1/(2*i-1)</code></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816114103.png" alt="image-20200816114102769"></p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">y=<span class="number">0</span>; </span><br><span class="line">g=<span class="number">-1</span>;</span><br><span class="line">n=input(<span class="string">&#x27;n=?&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">g=-g;</span><br><span class="line">y=y+g* <span class="number">1</span>/(<span class="number">2</span>*<span class="built_in">i</span><span class="number">-1</span>); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pai=<span class="number">4</span>*y</span><br></pre></td></tr></table></figure><p>用向量求和的方法实现程序:</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n=input(<span class="string">&#x27;n=?&#x27;</span>);</span><br><span class="line">x=<span class="number">1</span>:<span class="number">2</span>:(<span class="number">2</span>*n<span class="number">-1</span>);</span><br><span class="line">y=(<span class="number">-1</span>).^(<span class="number">2</span>:n+<span class="number">1</span>)./x;</span><br><span class="line">pai=sum(y)*<span class="number">4</span></span><br></pre></td></tr></table></figure><p>(2)利用定积分的近似值求π的近似值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212423.png" alt="image-20200816114949511"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816143239.png" alt="image-20200816143236999"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span>;</span><br><span class="line">b=<span class="number">1</span>;</span><br><span class="line">n=input(<span class="string">&#x27;n=?&#x27;</span>);</span><br><span class="line">h=(b-a)/n;</span><br><span class="line">x=a:h:b;</span><br><span class="line">f=<span class="built_in">sqrt</span>(<span class="number">1</span>-x.*x);</span><br><span class="line">s=[];</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">   s1=(f(k)+f(k+<span class="number">1</span>))*h/<span class="number">2</span>;</span><br><span class="line">   s=[s,s1];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pai=<span class="number">4</span> *sum(s) </span><br></pre></td></tr></table></figure><p>(3)利用蒙特卡洛法求π的近似值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816150444.png" alt="image-20200816145725433"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">s=<span class="number">0</span>;</span><br><span class="line">n=input(<span class="string">&#x27;n=?&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    x=<span class="built_in">rand</span>(<span class="number">1</span>);</span><br><span class="line">    y=<span class="built_in">rand</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> x*x+y*y&lt;=<span class="number">1</span></span><br><span class="line">        s=s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pai=s/n*<span class="number">4</span></span><br></pre></td></tr></table></figure><p>按照MATLAB的定义，for语句的循环变量也可以是一个列向量，其格式为:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">for 循环变量=矩阵表达式</span><br><span class="line"><span class="code">    循环体语句</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><h3 id="用while语句实现循环结构"><a class="header-anchor" href="#用while语句实现循环结构">¶</a>用while语句实现循环结构</h3><p>格式：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">while 条件</span><br><span class="line"><span class="code">    循环体语句</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816160404.png" alt="image-20200816160402909"></p><p>ex:  从键盘输入若干个数，当输入0时结束输入，求这些数的平均值和它们之和。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">msum=<span class="number">0</span>;</span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line">x=input(<span class="string">&#x27;Enter a number(end in 0):&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> x~=<span class="number">0</span></span><br><span class="line">    msum=msum+x;</span><br><span class="line">    n=n+<span class="number">1</span>;</span><br><span class="line">    x=input(<span class="string">&#x27;Enter a number(end in 0):&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> n&gt;<span class="number">0</span></span><br><span class="line">    msum</span><br><span class="line">    <span class="built_in">mean</span>=msum/n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>while语句多用于循环次数不确定的情况,而对于循环次数确定的情况，使用for语句更方便。</li><li>针对不同情况可以选择不同的循环语句，但从功能上讲两种循环语句可以相互替代。</li></ul><h4 id="break语句和continue语句"><a class="header-anchor" href="#break语句和continue语句">¶</a>break语句和continue语句</h4><ul><li>break语句用来跳出循环体，结束整个循环。</li><li>continue语 句用来结束本次循环，接着进行下一次是否执行循环的判断。</li></ul><p>ex:求1100，2001之间第一 个能被21整除的整数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n=<span class="number">100</span>:<span class="number">200</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">rem</span>(n,<span class="number">21</span>)~=<span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    n</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="循环的嵌套"><a class="header-anchor" href="#循环的嵌套">¶</a>循环的嵌套</h4><p>如果一个循环结构的循环体又包含一个循环结构，就称为循环的嵌套，或称为多重循环结构。</p><p>ex:用筛选法求某自然数范围内的全部素数。</p><p>筛选法求素数的基本思想:要找出<code>2~m</code>之间的全部素数，首先在<code>2~m</code>中划去2的倍数(不包括2)，然后划去3的倍数(不包括3)，由于4已被划去，再找5的倍数(不包括5)，····，直到再划去不超过vm的倍数，剩下的就都是素数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">m=input(<span class="string">&#x27;m=&#x27;</span>);</span><br><span class="line">p=<span class="number">1</span>:m;</span><br><span class="line">p(<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:<span class="built_in">sqrt</span>(m)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">2</span>*<span class="built_in">i</span>:<span class="built_in">i</span>:m</span><br><span class="line">        p(<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">n=<span class="built_in">find</span>(p~=<span class="number">0</span>);</span><br><span class="line">p(n)</span><br></pre></td></tr></table></figure><h2 id="函数文件的定义与调用"><a class="header-anchor" href="#函数文件的定义与调用">¶</a>函数文件的定义与调用</h2><h3 id="函数文件的基本结构"><a class="header-anchor" href="#函数文件的基本结构">¶</a>函数文件的基本结构</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">function  输出形参表=函数名(输入形参表)</span><br><span class="line"><span class="code">     注释说明部分</span></span><br><span class="line"><span class="code">函数体语句</span></span><br><span class="line"><span class="code">当有多个形参时，形参之间用逗号分隔，组成形参表。当输出形参多于一个时，应该用方括号括起来，构成一个输出矩阵。</span></span><br></pre></td></tr></table></figure><ul><li>函数文件名通常由函数名再加上扩展名.m组成，函数文件名与函数名也可以不相同。</li></ul><blockquote><p>不相同时，matlab将忽略函数名，调用时使用函数文件名</p></blockquote><ul><li>return语句表示结束函数的执行。</li></ul><p>ex:编写函数文件,求半径为的圆的面积和周长。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[s,p]</span>=<span class="title">fcircle</span><span class="params">(r)</span></span></span><br><span class="line">s=<span class="built_in">pi</span>*r*r;</span><br><span class="line">p=<span class="number">2</span>*<span class="built_in">pi</span>*r;</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a class="header-anchor" href="#函数调用">¶</a>函数调用</h3><p>调用格式:<br>[输出实参表]=函数名(输入实参表)<br>在调用函数时，函数输入输出参数称为实际参数，简称<strong>实参</strong>。</p><p>在MATLAB命令行窗C ]调用前面定义的fcircle函数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; [s,p]=fcircle(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">s =</span><br><span class="line"></span><br><span class="line">  <span class="number">314.1593</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">   <span class="number">62.8319</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a class="header-anchor" href="#匿名函数">¶</a>匿名函数</h3><p>基本格式:<br>函数句柄变量=@(匿名函数输入参数)匿名函数表达式</p><blockquote><p>@:函数句柄的运算符</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x,y) x^<span class="number">2</span>+y^<span class="number">2</span></span><br><span class="line"></span><br><span class="line">f = </span><br><span class="line"></span><br><span class="line">    @(x,y)x^<span class="number">2</span>+y^<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; f(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">25</span></span><br></pre></td></tr></table></figure><p>函数句柄变量=@函数名</p><blockquote><p>函数名：内部函数或自定义函数</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; h=@<span class="built_in">sin</span></span><br><span class="line"></span><br><span class="line">h = </span><br><span class="line"></span><br><span class="line">    @<span class="built_in">sin</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; h(<span class="built_in">pi</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br></pre></td></tr></table></figure><p>ex:<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816173757.png" alt="image-20200816170950565"></p><p>第②问的函数文件f2.m。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">f2</span><span class="params">(n)</span></span></span><br><span class="line">f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">    f=f+k*(k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>脚本文件mf.m</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f1=@(n)n+<span class="number">10</span>*<span class="built_in">log</span>(n*n+<span class="number">5</span>)</span><br><span class="line">y1=f1(<span class="number">40</span>)/(f1(<span class="number">30</span>)+f1(<span class="number">20</span>))</span><br><span class="line">y2=f2(<span class="number">40</span>)/(f2(<span class="number">30</span>)+f2(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; mf</span><br><span class="line"></span><br><span class="line">f1 = </span><br><span class="line"></span><br><span class="line">    @(n)n+<span class="number">10</span>*<span class="built_in">log</span>(n*n+<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.6390</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.7662</span></span><br></pre></td></tr></table></figure><h2 id="函数的递归调用"><a class="header-anchor" href="#函数的递归调用">¶</a>函数的递归调用</h2><h3 id="函数的嵌套调用"><a class="header-anchor" href="#函数的嵌套调用">¶</a>函数的嵌套调用</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816173701.png" alt="image-20200816172833477"></p><h3 id="函数的递归调用-v2"><a class="header-anchor" href="#函数的递归调用-v2">¶</a>函数的递归调用</h3><p>一个函数调用它自身称为函数的递归调用。</p><blockquote><p>递归是把一个大型复杂的问题层层转化为一一个与原问题相似的规模较小的问题来求解。</p></blockquote><h4 id="直接递归调用"><a class="header-anchor" href="#直接递归调用">¶</a>直接递归调用</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816173657.png" alt="image-20200816173120079"></p><h4 id="间接递归调用"><a class="header-anchor" href="#间接递归调用">¶</a>间接递归调用</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816173652.png" alt="image-20200816173141929"></p><p>ex:利用函数的递归调用，求n!。</p><p>函数文件fact.m如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">fact</span><span class="params">(n)</span></span></span><br><span class="line"><span class="keyword">if</span> n&lt;=<span class="number">1</span></span><br><span class="line">    f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    f=fact (n<span class="number">-1</span>)*n; <span class="comment">%递归调用求(n-1)!</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在脚本文件a.m中调用函数文件fat.m,求n!。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n=input(<span class="string">&#x27;Please input n=&#x27;</span>); </span><br><span class="line">s=fact (n);</span><br><span class="line"><span class="built_in">disp</span>(s)</span><br></pre></td></tr></table></figure><p>在命令行窗口运行脚本文件:</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt;a </span><br><span class="line">Please input n=<span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816173641.png" alt="image-20200816173640738"></p><p>ex:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200816174407.png" alt="image-20200816173931078"></p><ul><li>首先建立函数文件ffib.m。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">ffib</span><span class="params">(n)</span></span></span><br><span class="line"><span class="keyword">if</span> n&gt;<span class="number">2</span></span><br><span class="line">   f=ffib(n- <span class="number">1</span>)+ffib(n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>建立脚本文件test.m。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">F=[];</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="number">20</span></span><br><span class="line">F=[Fffib(k)*ffib(k)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum(F)</span><br><span class="line">ffib(<span class="number">20</span>)*ffib(<span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>运行结果为:</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt;test</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">7</span> <span class="number">4049690</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">7</span> <span class="number">4049690</span></span><br></pre></td></tr></table></figure><h2 id="函数参数与变量的作用域"><a class="header-anchor" href="#函数参数与变量的作用域">¶</a>函数参数与变量的作用域</h2><h3 id="函数参数的可调性"><a class="header-anchor" href="#函数参数的可调性">¶</a>函数参数的可调性</h3><p>nargin————&gt;输入实参的个数<br>nargout————&gt;输出实参的个数</p><p>建立函数文件test.m</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fout</span>=<span class="title">test</span><span class="params">(a,b,c)</span></span></span><br><span class="line"><span class="keyword">if</span> nargin==<span class="number">1</span></span><br><span class="line">fout=a;</span><br><span class="line"><span class="keyword">elseif</span> nargin==<span class="number">2</span></span><br><span class="line">fout=a+b;</span><br><span class="line"><span class="keyword">elseif</span> nargin==<span class="number">3</span></span><br><span class="line">fout=(a*b*c)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; fout=test(<span class="number">2</span>)</span><br><span class="line">fout =</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt; fout=test(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">fout =</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="全局变量与局部变量"><a class="header-anchor" href="#全局变量与局部变量">¶</a>全局变量与局部变量</h3><ul><li><strong>局部变量</strong>是指在程序中只在特定过程或函数中可以访问的变量。</li><li><strong>全局变量</strong>的作用域是整个MATLAB工作空间，也就是全程有效，所有的函数都可以对它进行存取和修改。</li></ul><p>全局变量定义格式:<br>global    变量名</p><p>建立函数文件wad.m。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">wad</span><span class="params">(x,y)</span></span></span><br><span class="line"><span class="keyword">global</span> ALPHA BETA </span><br><span class="line">f=ALPHA*x+BETA*y;</span><br></pre></td></tr></table></figure><p>在命令行窗口中输入命令并得到输出结果。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">global</span> ALPHA BETA</span><br><span class="line">&gt;&gt; ALPHA=<span class="number">1</span>;</span><br><span class="line">&gt;&gt; BETA=<span class="number">2</span>;</span><br><span class="line">&gt;&gt; s=wad(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">S=</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1>MATLAB绘图</h1><h2 id="二维曲线"><a class="header-anchor" href="#二维曲线">¶</a>二维曲线</h2><h3 id="plot函数"><a class="header-anchor" href="#plot函数">¶</a>plot函数</h3><p>(1) plot函数的基本用法<br>plot(x, y)<br>其中，x和y分别用于存储x坐标和y坐标数据。</p><p>ex:绘制一条折线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">2.5</span>,<span class="number">3.5</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&gt;&gt;y=[<span class="number">1.5</span>,<span class="number">2.0</span>,<span class="number">1</span>,<span class="number">1.5</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x, y)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817121937.png" alt="image-20200817121935693"></p><p>(2 )最简单的plot函数调用格式<br>plot(x)</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1.5</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817122230.png" alt="image-20200817122229734"></p><p>当plot函数的参数x是复数向量时，则分别以该向量元素实部和虚部为横、纵坐标绘制出一条曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">2.5</span>,<span class="number">3.5</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&gt;&gt; y=[<span class="number">1.5</span>,<span class="number">2.0</span>,<span class="number">1</span>,<span class="number">1.5</span>]; </span><br><span class="line">&gt;&gt; cx=x+y*<span class="built_in">i</span>;  <span class="comment">%cx = complex(x,y);</span></span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(cx)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212343.png" alt="image-20200817122718974"></p><p>(3) plot(x, y)函数参数的变化形式</p><ul><li>当x是向量，y是矩阵时<ul><li>如果矩阵y的列数等于x的长度，则以向量x为横坐标，以y的每个<br>行向量为纵坐标绘制曲线，曲线的条数等于y的行数。</li><li>如果矩阵y的行数等于x的长度，则以向量x为横坐标，以y的每个<br>列向量为纵坐标绘制曲线，曲线的条数等于y的列数。</li></ul></li></ul><p>ex:绘制sinx、sin(2x)、 sin(x /2 )的函数曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">&gt;&gt; y=[<span class="built_in">sin</span>(x);<span class="built_in">sin</span>(<span class="number">2</span>*x);<span class="built_in">sin</span>(<span class="number">0.5</span>*x)];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817124053.png" alt="image-20200817124051811"></p><ul><li>当x、y是同型矩阵时以x、y对应列元素为横、纵坐标分别绘制曲线,曲线条数等于矩阵的列数。</li></ul><p>重复上例题中实现</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt;t=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt;t1=t&#x27;;</span><br><span class="line">&gt;&gt;x=[t1,tl,t1];</span><br><span class="line">&gt;&gt;y=[<span class="built_in">sin</span>(t1), <span class="built_in">sin</span>(<span class="number">2</span>*t1), <span class="built_in">sin</span>(<span class="number">0.5</span>*t1)];</span><br><span class="line">&gt;&gt;<span class="built_in">plot</span>(x,y)</span><br></pre></td></tr></table></figure><p>(4)含多个输入参数的plot函数<br>plot(x1, y1, x2, y2, … xn, yn)<br>其中，每一向量对构成一组数据点的横、纵坐标，绘制一条曲线。</p><p>ex:采用不同个数的数据点绘制正弦函数曲线，观察曲线形态。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t1=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">10</span>);</span><br><span class="line">&gt;&gt; t2=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">20</span>);</span><br><span class="line">&gt;&gt; t3=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(t1,<span class="built_in">sin</span>(t1),t2,<span class="built_in">sin</span>(t2)+<span class="number">1</span>,t3,<span class="built_in">sin</span>(t3)+<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817124831.png" alt="image-20200817124829945"></p><p>(5)含选项的plot函数<br>plot(x, y,选项)</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817143225.png" alt="image-20200817142128551"></p><p>ex:用不同线型和颜色在同一坐标内绘制曲线y=2e0.5xsin(2 π x)及其包络线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">2</span>*<span class="built_in">pi</span>)&#x27;;</span><br><span class="line">y1=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*x)*[<span class="number">1</span>,<span class="number">-1</span>];</span><br><span class="line">y2=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*x).*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*x);</span><br><span class="line">x1=<span class="number">0</span>:<span class="number">0.5</span>:<span class="number">6</span>;</span><br><span class="line">y3=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*x1).*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*x1);</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;k:&#x27;</span>,x,y2,<span class="string">&#x27;b--&#x27;</span>,x1,y3,<span class="string">&#x27;rp&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817143208.png" alt="image-20200817143206234"></p><h3 id="fplot函数"><a class="header-anchor" href="#fplot函数">¶</a>fplot函数</h3><p>(1) fplot函数的基本用法<br>fplot(f, lims, 选项)</p><p>其中，f代表一个函数,通常采用函数句柄的形式。lims为x轴的取值范围，用二元向量[xmin，xmax]描述， 默认值为[-5,5]。 选项定义与plot函数相同。</p><p>ex:采用fplot函数绘制函数sin(1/x)的图形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; fplot(@(x)<span class="built_in">sin</span>(<span class="number">1.</span>/x),[<span class="number">0</span>,<span class="number">0.2</span>],<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817143723.png" alt="image-20200817143722060"></p><p>(2)双输入函数参数的用法<br>fplot(funx, funy, tlims,选项)<br>其中，funx、 funy代表函数，通常采用函数句柄的形式。tlims为参 数函数funx和funy的自变量的取值范围，用二元向量[tmin, tmax]描述。</p><p>ex:已知螺旋线的参数方程，绘制曲线。</p><p>x=t·sint<br>y=t·cost</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; fplot(@(t) t.*<span class="built_in">sin</span>(t),@(t) t.*<span class="built_in">cos</span>(t),[<span class="number">0</span>,<span class="number">10</span>*<span class="built_in">pi</span>],<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817144145.png" alt="image-20200817144144096"></p><h2 id="绘制图形的辅助操作"><a class="header-anchor" href="#绘制图形的辅助操作">¶</a>绘制图形的辅助操作</h2><ul><li>给图形添加标注</li><li>坐标控制</li><li>图形保持</li><li>图形窗口的分割</li></ul><h3 id="图形标注"><a class="header-anchor" href="#图形标注">¶</a>图形标注</h3><ul><li>title(图形标题)</li><li>xlabel(x轴说明)</li><li>ylabelly轴说明)</li><li>textlx, y,图形说明)</li><li>legend(图例1,图例2, …)</li></ul><h4 id="title函数"><a class="header-anchor" href="#title函数">¶</a>title函数</h4><p>①title函数的基本用法<br>title(图形标题)<br>例1 绘制[-2π，2 π ]区间的正弦曲线并给图形添加标题。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">-2</span>*<span class="built_in">pi</span>:<span class="number">0.05</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt; y=<span class="built_in">sin</span>(x);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y)</span><br><span class="line">&gt;&gt; title(<span class="string">&#x27;y=sin(x)&#x27;</span>)  <span class="comment">%title(&#123;&#x27;MATLAB&#x27;,&#x27;y=sin(x)&#x27;&#125;)</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817144733.png" alt="image-20200817144732376"></p><p>②在图形标题中使用LaTeX格式控制符</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; title(<span class="string">&#x27;y=cos&#123;\omega&#125;t&#x27;</span>)</span><br><span class="line">&gt;&gt; title(<span class="string">&#x27;y=e^&#123;axt&#125;&#x27;</span>)</span><br><span class="line">&gt;&gt; title(<span class="string">&#x27;X_&#123;1&#125;&#123;\geq&#125;X_&#123;2&#125;&#x27;</span>)</span><br><span class="line">&gt;&gt; title(<span class="string">&#x27;&#123;\bf y=cos&#123;\omega&#125;t+&#123;\beta&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212315.png" alt="image-20200817145542681"></p><blockquote><p>“\bf”:加粗<br>“\it”:斜体<br>“\rm”:正体</p></blockquote><p>③含属性设置的title函数<br>title(图形标题,属性名，属性值)</p><ul><li>Color属性:用于设置图形标题文本的颜色。</li></ul><blockquote><p>默认为黑色</p></blockquote><ul><li>FontSize属性:用于设置标题文字的字号。</li></ul><blockquote><p>默认字号为11</p></blockquote><h4 id="xlabel函数和ylabel函数"><a class="header-anchor" href="#xlabel函数和ylabel函数">¶</a>xlabel函数和ylabel函数</h4><p>xlabel(x轴说明)<br>ylabelly轴说明)</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">-2</span>*<span class="built_in">pi</span>:<span class="number">0.05</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt; y=<span class="built_in">sin</span>(x);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y)</span><br><span class="line">&gt;&gt; title(<span class="string">&#x27;y=sin(x)&#x27;</span>)</span><br><span class="line">&gt;&gt; xlabel(<span class="string">&#x27;-2\pi\leqx\leq2\pi&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819212301.png" alt="image-20200817165151751"></p><h4 id="text函数和gtext函数"><a class="header-anchor" href="#text函数和gtext函数">¶</a>text函数和gtext函数</h4><p>text(x, y,说明)<br>gtext(说明)</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%在上述代码在添加以下</span></span><br><span class="line">&gt;&gt; text(<span class="number">-2</span>*<span class="built_in">pi</span>,<span class="number">0</span>,<span class="string">&#x27; - 2&#123;\pi&#125;&#x27;</span>)</span><br><span class="line">&gt;&gt; text(<span class="number">3</span>,<span class="number">0.28</span>,<span class="string">&#x27;\leftarrow sin(x)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817171100.png" alt="image-20200817165557493"></p><h4 id="legend函数"><a class="header-anchor" href="#legend函数">¶</a>legend函数</h4><p>legend(图例1,图例2, ····）</p><p>ex:绘制不同频率的正弦曲线并用图例标注曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,[<span class="built_in">sin</span>(x);<span class="built_in">sin</span>(<span class="number">2</span>*x);<span class="built_in">sin</span>(<span class="number">3</span>*x)])</span><br><span class="line">&gt;&gt; <span class="built_in">legend</span>(<span class="string">&#x27;sin(x)&#x27;</span>,<span class="string">&#x27;sin(2x)&#x27;</span>,<span class="string">&#x27;sin(3x)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817171055.png" alt="image-20200817165925279"></p><h3 id="坐标控制"><a class="header-anchor" href="#坐标控制">¶</a>坐标控制</h3><h4 id="axis函数"><a class="header-anchor" href="#axis函数">¶</a>axis函数</h4><p>axis([xmin, xmax, ymin, ymax, zmin, zmax])</p><ul><li>axis的其他用法<ul><li>axis equal: 纵、横坐标轴采用等长刻度</li><li>axis square: 产生正方形坐标系(默认为矩形)</li><li>axis auto: 使用默认设置</li><li>axis off:取消坐标轴</li><li>axis on:显示坐标轴</li></ul></li></ul><h4 id="给坐标系加网格和边框"><a class="header-anchor" href="#给坐标系加网格和边框">¶</a>给坐标系加网格和边框</h4><p>grid on   +网格<br>grid off    不加网格<br>grid</p><p>box on    +边框<br>box off   不加边框<br>box</p><p>ex:绘制sinx、sin(2x)、 sin(x/ 2 )的函数曲线并添加图形标注。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">y=[<span class="built_in">sin</span>(x);<span class="built_in">sin</span>(<span class="number">2</span>*x);<span class="built_in">sin</span>(<span class="number">0.5</span>*x)];</span><br><span class="line"><span class="built_in">plot</span>(x,y)</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">7</span>,<span class="number">-1.2</span>,<span class="number">1.2</span>])</span><br><span class="line">title(<span class="string">&#x27;不同频率正弦函数曲线&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Variable X&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Variable Y&#x27;</span>);</span><br><span class="line">text(<span class="number">2.5</span>,<span class="built_in">sin</span>(<span class="number">2.5</span>),<span class="string">&#x27;sin(x)&#x27;</span>);</span><br><span class="line">text(<span class="number">1.5</span>,<span class="built_in">sin</span>(<span class="number">2</span>*<span class="number">1.5</span>),<span class="string">&#x27;sin(2x)&#x27;</span>);</span><br><span class="line">text(<span class="number">5.5</span>,<span class="built_in">sin</span>(<span class="number">0.5</span>*<span class="number">5.5</span>),<span class="string">&#x27;sin(0.5x)&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;sin(x)&#x27;</span>,<span class="string">&#x27;sin(2x)&#x27;</span>,<span class="string">&#x27;sin(0.5x)&#x27;</span>)</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817171032.png" alt="image-20200817171031693"></p><h3 id="图形保持"><a class="header-anchor" href="#图形保持">¶</a>图形保持</h3><p>hold on<br>hold off<br>hold</p><p>ex:用图形保持功能绘制两个同心圆。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">x=<span class="built_in">sin</span>(t);</span><br><span class="line">y=<span class="built_in">cos</span>(t);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">2</span>*x,<span class="number">2</span>*y,<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">grid on</span><br><span class="line">axis([<span class="number">-2.2</span>,<span class="number">2.2</span>,<span class="number">-2.2</span>,<span class="number">2.2</span>])</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817172551.png" alt="image-20200817171513928"></p><h3 id="图形窗口的分割"><a class="header-anchor" href="#图形窗口的分割">¶</a>图形窗口的分割</h3><ul><li><p>子图:同一图形窗口中的不同坐标系下的图形称为子图。</p></li><li><p>subplot函数<br>subplot(m, n, p)</p><blockquote><p>其中，m和n指定将图形窗口分成mx n个绘图区，p指定当前活动区。</p></blockquote></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">60</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">sin</span>(x)<span class="number">-1</span>);</span><br><span class="line">title(<span class="string">&#x27;sin(x)-1&#x27;</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">-2</span>,<span class="number">0</span>])</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">cos</span>(x)+<span class="number">1</span>);</span><br><span class="line">title(<span class="string">&#x27;cos(x)+1&#x27;</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">tan</span>(x));</span><br><span class="line">title(<span class="string">&#x27;tan(x)&#x27;</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">-40</span>,<span class="number">40</span>])</span><br><span class="line">subplot(<span class="number">4</span>,<span class="number">4</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">cot</span>(x));</span><br><span class="line">title(<span class="string">&#x27;cot(x)&#x27;</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">-35</span>,<span class="number">35</span>])</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200817172544.png" alt="image-20200817172543856"></p><h2 id="其他形式的二维图形"><a class="header-anchor" href="#其他形式的二维图形">¶</a>其他形式的二维图形</h2><ul><li>其他坐标系下的二维曲线图</li><li>统计图</li><li>矢量图形</li></ul><h3 id="对数坐标图"><a class="header-anchor" href="#对数坐标图">¶</a>对数坐标图</h3><p>semilogx(x1, y1,选项1, x2, y2,选项2, ···）<br>semilogy(x1, y1,选项1, x2, y2,选项2, ···）<br>loglog(x1, y1,选项1, x2, y2,选项2, ····）</p><p>ex:绘制1/x的直角线性坐标图和三种对数坐标图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">10</span>;</span><br><span class="line">y=<span class="number">1.</span>/x;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y)</span><br><span class="line">title(<span class="string">&#x27;plot(x,y)&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">semilogx(x,y)</span><br><span class="line">title(<span class="string">&#x27;semilogx(x,y)&#x27;</span>);</span><br><span class="line">grid on</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">semilogy(x,y)</span><br><span class="line">title(<span class="string">&#x27;semilogy(x,y)&#x27;</span>);</span><br><span class="line">grid on</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">loglog(x,y)</span><br><span class="line">title(<span class="string">&#x27;loglog(x,y)&#x27;</span>);</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819105432.png" alt="image-20200819105020441"></p><h3 id="极坐标图"><a class="header-anchor" href="#极坐标图">¶</a>极坐标图</h3><p>polar(theta, rho,选项)</p><blockquote><p>其中，theta为极角，rho为极径，选项的内容与plot函数相同。</p></blockquote><p>ex:按极坐标方程ρ=1 -sin θ绘制心形曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">r=<span class="number">1</span>-<span class="built_in">sin</span>(t);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">polar(t,r)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">t1=t-<span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">r1=<span class="number">1</span>-<span class="built_in">sin</span>(t1);</span><br><span class="line">polar(t,r1)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819105922.png" alt="image-20200819105920695"></p><h3 id="统计图"><a class="header-anchor" href="#统计图">¶</a>统计图</h3><ul><li>条形图</li><li>直方图</li><li>饼图</li><li>散点图</li></ul><h4 id="条形类图形"><a class="header-anchor" href="#条形类图形">¶</a>条形类图形</h4><p>①条形图</p><ul><li><p>bar函数:二维垂直</p><p>bar（y, style)</p></li></ul><blockquote><p>其中，参数y是数据，选项style用于指定分组排列模式。<br>“grouped”:簇状分组；“stacked”:堆积分组</p></blockquote><p>ex:绘制分组条形图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">y=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>;<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>;<span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">bar(y)</span><br><span class="line">title(<span class="string">&#x27;Group&#x27;</span>)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">bar(y,<span class="string">&#x27;stacked&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;Stack&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819162254.png" alt="image-20200819162252622"></p><p>bar(x, y, style)</p><blockquote><p>其中，x存储横坐标，y存储数据。y的行数必须与x的长度相同</p></blockquote><p>ex:下表是某公司2015~2017年家电类商品1月份的销售数据，绘制条形图。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819162548.png" alt="image-20200819162546738"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">2015</span>,<span class="number">2016</span>,<span class="number">2017</span>];</span><br><span class="line">y=[<span class="number">68</span>,<span class="number">80</span>,<span class="number">115</span>,<span class="number">98</span>,<span class="number">102</span>;<span class="number">75</span> <span class="number">88</span> <span class="number">102</span> <span class="number">99</span> <span class="number">110</span>;<span class="number">81</span> <span class="number">86</span> <span class="number">125</span> <span class="number">105</span> <span class="number">115</span>];</span><br><span class="line">bar(x,y)</span><br><span class="line">title(<span class="string">&#x27;Group&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819163422.png" alt="image-20200819162747539"></p><ul><li>barh函数：水平垂直</li></ul><p>②直方图</p><ul><li><p>hist函数</p><p>hist(y)<br>hist(y, x)</p></li></ul><blockquote><p>其中，参数y是要统计的数据，x用于指定区间的划分方式。</p></blockquote><p>ex:绘制服从高斯分布的直方图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">y=<span class="built_in">randn</span>(<span class="number">500</span>,<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">hist(y);</span><br><span class="line">title(<span class="string">&#x27;高斯分布直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">x=<span class="number">-3</span>:<span class="number">0.2</span>:<span class="number">3</span>;</span><br><span class="line">hist(y,x);</span><br><span class="line">title(<span class="string">&#x27;指定区间中心点的直方图&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819163403.png" alt="image-20200819163402030"></p><ul><li>rose函数 :极坐标系下的直方图/玫瑰花图</li></ul><p>rose(theta, x)</p><blockquote><p>其中，参数theta用于确定每一区间与原点的角度，选项x用于指定区间的划分方式。</p><p>若x是标量，则在2pi区间内均匀划分成x个扇形区域；x缺损时，默认按20个等分区间统计</p></blockquote><p>ex:绘制高斯分布数据在极坐标下的直方图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">y=<span class="built_in">randn</span>(<span class="number">500</span>,<span class="number">1</span>);</span><br><span class="line">theta=y*<span class="built_in">pi</span>;</span><br><span class="line">rose(theta)</span><br><span class="line">title(<span class="string">&#x27;在极坐标下的直方图&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819172845.png" alt="image-20200819171315366"></p><h4 id="面积类图形"><a class="header-anchor" href="#面积类图形">¶</a>面积类图形</h4><p>①扇形图</p><ul><li><p>pie函数</p><p>pie(x, explode)</p></li></ul><blockquote><p>其中，参数x存储待统计数据，选项explode控制图块的显示模式。</p></blockquote><p>ex:某次考试优秀、良好、中等、及格、不及格的人数分别为： 5、17、23、9、4，试用扇形统计图作成绩统计分析。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">score = [<span class="number">5</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">4</span>];</span><br><span class="line">ex = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">pie(score, ex)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;优秀&#x27;</span>,<span class="string">&#x27;良好&#x27;</span>,<span class="string">&#x27;中等&#x27;</span>,<span class="string">&#x27;及格&#x27;</span>,<span class="string">&#x27;不及格&#x27;</span>,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;eastoutside&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>'location’用于指定图例位置， 'eastoutside’表示图例放在绘图区域右 边的外侧。</p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819172837.png" alt="image-20200819172314338"></p><p>②面积图</p><ul><li>area函数</li></ul><h4 id="散点类图形"><a class="header-anchor" href="#散点类图形">¶</a>散点类图形</h4><ul><li><p>scatter函数:  散点图</p><p>scatter(x, y, 选项, ‘filled’)</p></li></ul><blockquote><p>其中，x、y用于定位数据点，选项用于指定线型、颜色、数据点标记。如果数据点标记是封闭图形，可以用选项‘filled’指定填充数据点标记。该选项省略时，数据点是空心的。</p></blockquote><p>ex:以散点图形式绘制桃心曲线，曲线的参数方程如下：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/image-20200819172728303.png" alt="image-20200819172728303"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">x = <span class="number">16</span>*<span class="built_in">sin</span>(t).^<span class="number">3</span>;</span><br><span class="line">y = <span class="number">13</span>*<span class="built_in">cos</span>(t)<span class="number">-5</span>*<span class="built_in">cos</span>(<span class="number">2</span>*t)<span class="number">-2</span>*<span class="built_in">cos</span>(<span class="number">3</span>*t)-<span class="built_in">cos</span>(<span class="number">4</span>*t);</span><br><span class="line"><span class="built_in">scatter</span>(x,y,<span class="string">&#x27;rd&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819172828.png" alt="image-20200819172826877"></p><ul><li><p>stairs函数:    阶梯图</p></li><li><p>stem函数:     杆图</p></li></ul><h3 id="矢量类图形"><a class="header-anchor" href="#矢量类图形">¶</a>矢量类图形</h3><ul><li>compass函数:罗盘图</li><li>feather函数:羽毛图</li><li>quiver函数:箭头图</li></ul><p>quiver函数调用格式：</p><p>quiver(x, y, u, v)</p><blockquote><p>其中，(x, y)指定矢量起点，(u, v)指定矢量终点。x、y、u、v 是同样大小的向量或同型矩阵，若省略x、y，则在x-y平面上均匀取若干个点作为起点。</p></blockquote><p>ex:已知向量A、B，求A+B，并用矢量图表示。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">4</span>,<span class="number">5</span>]; B=[<span class="number">-10</span>,<span class="number">0</span>]; C=A+B;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">quiver(<span class="number">0</span>, <span class="number">0</span>, A(<span class="number">1</span>), A(<span class="number">2</span>));</span><br><span class="line">quiver(<span class="number">0</span>, <span class="number">0</span>, B(<span class="number">1</span>), B(<span class="number">2</span>));</span><br><span class="line">quiver(<span class="number">0</span>, <span class="number">0</span>, C(<span class="number">1</span>), C(<span class="number">2</span>));</span><br><span class="line">text(A(<span class="number">1</span>),A(<span class="number">2</span>),<span class="string">&#x27;A&#x27;</span>);text(B(<span class="number">1</span>),B(<span class="number">2</span>),<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">text(C(<span class="number">1</span>),C(<span class="number">2</span>),<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">axis ([<span class="number">-12</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">6</span>])</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819173208.png" alt="image-20200819173207268"></p><h2 id="三维曲线"><a class="header-anchor" href="#三维曲线">¶</a>三维曲线</h2><ul><li>plot3函数</li><li>fplot3函数</li></ul><h3 id="plot3函数"><a class="header-anchor" href="#plot3函数">¶</a>plot3函数</h3><h4 id="plot3函数的基本用法"><a class="header-anchor" href="#plot3函数的基本用法">¶</a>plot3函数的基本用法</h4><p>plot3(x, y, z)</p><blockquote><p>其中，参数x、y、z组成一组曲线的坐标。</p></blockquote><p>ex:绘制一条空间折线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">0.2</span>, <span class="number">1.8</span>, <span class="number">2.5</span>];</span><br><span class="line">y=[<span class="number">1.3</span>, <span class="number">2.8</span>, <span class="number">1.1</span>];</span><br><span class="line">z=[<span class="number">0.4</span>, <span class="number">1.2</span>, <span class="number">1.6</span>];</span><br><span class="line"><span class="built_in">plot3</span>(x, y, z)</span><br><span class="line">grid on</span><br><span class="line">axis([<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>]); </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819210855.png" alt="image-20200819210806024"></p><p>ex:绘制螺旋线</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819210846.png" alt="image-20200819210844875"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="built_in">linspace</span>(<span class="number">0</span>, <span class="number">10</span>*<span class="built_in">pi</span>, <span class="number">200</span>);</span><br><span class="line">x=<span class="built_in">sin</span>(t)+t.*<span class="built_in">cos</span>(t);</span><br><span class="line">y=<span class="built_in">cos</span>(t)-t.*<span class="built_in">sin</span>(t);</span><br><span class="line">z=t;</span><br><span class="line">subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot3</span>(x, y, z)</span><br><span class="line">grid on</span><br><span class="line">subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot3</span>(x(<span class="number">1</span>:<span class="number">4</span>:<span class="number">200</span>), y(<span class="number">1</span>:<span class="number">4</span>:<span class="number">200</span>), z(<span class="number">1</span>:<span class="number">4</span>:<span class="number">200</span>))</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819210941.png" alt="image-20200819210940190"></p><h4 id="plot3-x-y-z-函数参数的变化形式"><a class="header-anchor" href="#plot3-x-y-z-函数参数的变化形式">¶</a>plot3(x, y, z)函数参数的变化形式</h4><p>​plot3(X, Y, Z)</p><ul><li>参数X、Y、Z是同型矩阵时，以X、Y、Z对应列元素绘制曲线,曲线条数等于矩阵列数。</li><li>参数X、Y、Z中有向量，也有矩阵时，向量的长度应与矩阵相符。</li></ul><p>ex:在空间不同位置绘制5条正弦曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">t=t&#x27;;</span><br><span class="line">x=[t, t, t, t, t];</span><br><span class="line">y=[<span class="built_in">sin</span>(t), <span class="built_in">sin</span>(t)+<span class="number">1</span>, <span class="built_in">sin</span>(t)+<span class="number">2</span>, <span class="built_in">sin</span>(t)+<span class="number">3</span>, <span class="built_in">sin</span>(t)+<span class="number">4</span>];</span><br><span class="line">z=t;</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z)</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=t;</span><br><span class="line">y=[<span class="built_in">sin</span>(t); <span class="built_in">sin</span>(t)+<span class="number">1</span>; <span class="built_in">sin</span>(t)+<span class="number">2</span>; <span class="built_in">sin</span>(t)+<span class="number">3</span>; <span class="built_in">sin</span>(t)+<span class="number">4</span>];</span><br><span class="line">z=t;</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819211222.png" alt="image-20200819211221182"></p><h4 id="含多组输入参数的plot3函数"><a class="header-anchor" href="#含多组输入参数的plot3函数">¶</a>含多组输入参数的plot3函数</h4><p>plot3(x1, y1, z1, x2, y2, z2, …, xn, yn, zn)<br>每一组x、y、z向量构成一组数据点的坐标，绘制一条曲线。</p><p>ex:绘制三条不同长度的正弦曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t1=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">1.5</span>*<span class="built_in">pi</span>;</span><br><span class="line">t2=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">t3=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">3</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="built_in">plot3</span>(t1,<span class="built_in">sin</span>(t1),t1, t2,<span class="built_in">sin</span>(t2)+<span class="number">1</span>,t2,t3,<span class="built_in">sin</span>(t3)+<span class="number">2</span>,t3)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819211547.png" alt="image-20200819211415811"></p><h4 id="含选项的plot3函数"><a class="header-anchor" href="#含选项的plot3函数">¶</a>含选项的plot3函数</h4><p>plot3(x, y, z, 选项)</p><blockquote><p>选项用于指定曲线的线型、颜色和数据点标记。</p></blockquote><p>ex: 绘制空间曲线</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819211537.png" alt="image-20200819211536479"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">6</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=<span class="built_in">cos</span>(t);</span><br><span class="line">y=<span class="built_in">sin</span>(t);</span><br><span class="line">z=<span class="number">2</span>*t;</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z,<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;X&#x27;</span>),ylabel(<span class="string">&#x27;Y&#x27;</span>),zlabel(<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819211637.png" alt="image-20200819211635920"></p><h3 id="fplot3函数"><a class="header-anchor" href="#fplot3函数">¶</a>fplot3函数</h3><p>fplot3 (funx，funy， funz， tlims)</p><blockquote><p>其中，funx、 funy、 funz代表定 义曲线x、y、z坐标的函数，通常采用函数句柄的形式。tlims为参数函数自变量的取值范围，用二元向量[tmin, tmax]描述， 默认为[-5,5]。</p></blockquote><p>ex:绘制墨西哥帽顶曲线，曲线的参数方程如下</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819211800.png" alt="image-20200819211759357"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">xt = @(t) <span class="built_in">exp</span>(-t/<span class="number">10</span>).*<span class="built_in">sin</span>(<span class="number">5</span>*t);</span><br><span class="line">yt = @(t) <span class="built_in">exp</span>(-t/<span class="number">10</span>).*<span class="built_in">cos</span>(<span class="number">5</span>*t);</span><br><span class="line">zt = @(t) t;</span><br><span class="line">fplot3(xt, yt, zt, [<span class="number">-12</span>, <span class="number">12</span>])</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819213846.png" alt="image-20200819211845148"></p><p>在fplot3函数中，可以指定曲线的线型、颜色或数据点标记。</p><p>例如，用红色点划线绘制墨西哥帽顶曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">xt = @(t) <span class="built_in">exp</span>(-t/<span class="number">10</span>).*<span class="built_in">sin</span>(<span class="number">5</span>*t);</span><br><span class="line">yt = @(t) <span class="built_in">exp</span>(-t/<span class="number">10</span>).*<span class="built_in">cos</span>(<span class="number">5</span>*t);</span><br><span class="line">zt = @(t) t;</span><br><span class="line">fplot3(xt, yt, zt, [<span class="number">-12</span>, <span class="number">12</span>], <span class="string">&#x27;r-.&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819213834.png" alt="image-20200819212032722"></p><h2 id="三维曲面"><a class="header-anchor" href="#三维曲面">¶</a>三维曲面</h2><ul><li>平面网格数据的生成</li><li>绘制三维曲面的mesh函数和surf函数</li><li>fmesh函数和fsurf函数</li></ul><h3 id="平面网格数据的生成"><a class="header-anchor" href="#平面网格数据的生成">¶</a>平面网格数据的生成</h3><p>用矩阵X、Y分别存储每一个小矩形顶点的x坐标与y坐标，矩阵X、Y就是该矩形区域的xy平面网格坐标矩阵。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819213822.png" alt="image-20200819213059384"></p><p>在MATLAB中，产生平面区域内的网格坐标矩阵有**<font color="red">两种方法</font>**。</p><p>(1)利用矩阵运算生成。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">2</span>:<span class="number">6</span>;</span><br><span class="line">&gt;&gt; y=(<span class="number">3</span>:<span class="number">8</span>)&#x27;;</span><br><span class="line">&gt;&gt; X=<span class="built_in">ones</span>(<span class="built_in">size</span>(y))*x;</span><br><span class="line">&gt;&gt; Y=y*<span class="built_in">ones</span>(<span class="built_in">size</span>(x));</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819213815.png" alt="image-20200819213433657"></p><blockquote><p>X和Y相同位置上的元素，如X32、Y32是区域的第3行第2列网格点的坐标(3,5)。</p></blockquote><p>(2)利用meshgrid函数生成。</p><p>[X,Y]=meshgrid(x,y);</p><blockquote><p>其中，参数x、y为向量，存储网格点坐标的X、Y为矩阵。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x = <span class="number">2</span>:<span class="number">1</span>:<span class="number">6</span>;</span><br><span class="line">&gt;&gt; y = (<span class="number">3</span>:<span class="number">1</span>:<span class="number">8</span>)&#x27;;</span><br><span class="line">&gt;&gt; [X, Y] = <span class="built_in">meshgrid</span>(x, y);</span><br></pre></td></tr></table></figure><blockquote><p>第3行命令生成的网格坐标矩阵X、Y与方法(1)得到的相同。</p></blockquote><p>若根据每一个网格点上的x、y坐标求函数值z，则得到函数值矩 阵Z。矩阵X、Y、Z中的各个列向量，对应于一条曲线数据点的坐标。</p><p>ex:绘制空间曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span>:<span class="number">6</span>;</span><br><span class="line">y = (<span class="number">3</span>:<span class="number">8</span>)&#x27;;</span><br><span class="line">[X, Y] = <span class="built_in">meshgrid</span>(x, y);</span><br><span class="line">Z = <span class="built_in">randn</span>(<span class="built_in">size</span>(X));</span><br><span class="line"><span class="built_in">plot3</span>(X,Y,Z)</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819213801.png" alt="image-20200819213800012"></p><ul><li>mesh函数和surf函数的调用格式：</li></ul><p>mesh(x, y, z, c)<br>surf(x, y, z, c)</p><blockquote><p>其中，x、y是网格坐标矩阵，z是网格点上的高度矩阵，c用于指定在不同高度下的曲面颜色。c省略时，颜色的设定正比于图形的高度。</p></blockquote><p>ex: 绘制三维曲面图<code>𝑧 = 𝑥𝑒 ^(− 𝑥 ^2 − 𝑦^2)</code></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">-2</span>:<span class="number">0.2</span>:<span class="number">2</span>;</span><br><span class="line">[X, Y] = <span class="built_in">meshgrid</span>(t);</span><br><span class="line">Z = X .* <span class="built_in">exp</span>(-X.^<span class="number">2</span> - Y.^<span class="number">2</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">mesh(X,Y,Z);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">surf(X,Y,Z);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot3</span>(X,Y,Z);</span><br><span class="line">grid on </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819214239.png" alt="image-20200819214237905"></p><ul><li>mesh函数和surf函数的其他调用格式：</li></ul><p>mesh(z, c)<br>surf(z, c)</p><blockquote><p>当x、y省略时，z矩阵的第2维下标当作x轴坐标，z矩阵的第1维下 标当作y轴坐标。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t = <span class="number">1</span>:<span class="number">5</span>;</span><br><span class="line">&gt;&gt; z= [<span class="number">0.5</span>*t; <span class="number">2</span>*t; <span class="number">3</span>*t];</span><br><span class="line">&gt;&gt; mesh(z);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819214557.png" alt="image-20200819214556082"></p><h3 id="绘制三维曲面的函数"><a class="header-anchor" href="#绘制三维曲面的函数">¶</a>绘制三维曲面的函数</h3><ul><li>带等高线的三维网格曲面函数meshc</li><li>带底座的三维网格曲面函数meshz</li><li>具有等高线的曲面函数surfc</li><li>具有光照效果的曲面函数surf1</li></ul><p>ex:用4种方式绘制函数𝒛 = (𝑥 − 1) 2+(𝑦 − 2) 2−1的曲面图。 其中，x∈[0,2]，y∈[1,3]。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">0.1</span>:<span class="number">3</span>);</span><br><span class="line">z=(x<span class="number">-1</span>).^<span class="number">2</span>+(y<span class="number">-2</span>).^<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">meshc(x,y,z);title(<span class="string">&#x27;meshc(x,y,z)&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">meshz(x,y,z);title(<span class="string">&#x27;meshz(x,y,z)&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">surfc(x,y,z);title(<span class="string">&#x27;surfc(x,y,z)&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">surfl(x,y,z); title(<span class="string">&#x27;surfl(x,y,z)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819214744.png" alt="image-20200819214742546"></p><h3 id="标准三维曲面"><a class="header-anchor" href="#标准三维曲面">¶</a>标准三维曲面</h3><h4 id="sphere函数"><a class="header-anchor" href="#sphere函数">¶</a>sphere函数</h4><p>[x,y,z]=sphere(n)</p><p>产生3个(n+1)阶的方阵，采用这3个矩阵可以绘制出圆心位于 原点、半径为1的单位球体。</p><h4 id="cylinder函数"><a class="header-anchor" href="#cylinder函数">¶</a>cylinder函数</h4><p>[x,y,z]=cylinder(R, n)</p><blockquote><p>其中，参数R是一个向量，存放柱面各个等间隔高度上的半径， n表示在圆柱圆周上有n个间隔点，默认有20个间隔点。</p></blockquote><p>ex:用cylinder函数分别绘制柱面、花瓶和圆锥面</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">[x,y,z]=cylinder;</span><br><span class="line">surf(x,y,z);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">t=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">40</span>);</span><br><span class="line">[x,y,z]= cylinder(<span class="number">2</span>+<span class="built_in">cos</span>(t),<span class="number">30</span>);</span><br><span class="line">surf(x,y,z);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">[x,y,z]= cylinder(<span class="number">0</span>:<span class="number">0.2</span>:<span class="number">2</span>,<span class="number">30</span>);</span><br><span class="line">surf(x,y,z);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819215443.png" alt="image-20200819214947702"></p><p>ex:用cylinder函数绘制两个相互垂直且直径相等的圆柱面的相交图形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y,z]= cylinder(<span class="number">1</span>,<span class="number">60</span>);</span><br><span class="line">z=[<span class="number">-1</span>*z(<span class="number">2</span>,:);z(<span class="number">2</span>,:)];</span><br><span class="line">surf(x,y,z)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">surf(y,z,x)</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819215437.png" alt="image-20200819215104314"></p><h4 id="peaks-函数"><a class="header-anchor" href="#peaks-函数">¶</a>peaks 函数</h4><p>peaks函数的调用格式：</p><p>peaks(n)<br>peaks(V)<br>peaks(x,y)<br>peaks</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; p1=peaks(<span class="number">10</span>);</span><br><span class="line">&gt;&gt; p2=peaks;</span><br><span class="line">&gt;&gt; p3=peaks(<span class="number">-3</span>:<span class="number">0.2</span>:<span class="number">3</span>);</span><br><span class="line">&gt;&gt; [x,y]=<span class="built_in">meshgrid</span>(<span class="number">-2</span>:<span class="number">0.1</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">5</span>);</span><br><span class="line">&gt;&gt; p4=peaks(x,y);</span><br></pre></td></tr></table></figure><h3 id="fmesh函数和fsurf函数"><a class="header-anchor" href="#fmesh函数和fsurf函数">¶</a>fmesh函数和fsurf函数</h3><p>用于绘制参数方程定义的曲面</p><p>fsurf(funx, funy, funz, uvlims)<br>fmesh(funx, funy, funz, uvlims)</p><blockquote><p>其中，funx、funy、funz代表定义曲面x、y、z坐标的函数，通常采用函数句柄的形式。uvlims为funx、funy和funz的自变量的取值范围，用4元向量[umin, umax, vmin, vmax]描述 ，默认为[-5, 5, -5, 5]。</p></blockquote><p>ex:绘制螺旋曲面。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819215942.png" alt="image-20200819215630359"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">funx = @(u,v) u.*<span class="built_in">sin</span>(v);</span><br><span class="line">funy = @(u,v) -u.*<span class="built_in">cos</span>(v);</span><br><span class="line">funz = @(u,v) v;</span><br><span class="line">fsurf(funx,funy,funz,[<span class="number">-5</span> <span class="number">5</span> <span class="number">-5</span> <span class="number">-2</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">fmesh(funx,funy,funz,[<span class="number">-5</span> <span class="number">5</span> <span class="number">-2</span> <span class="number">2</span>])</span><br><span class="line"><span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200819215930.png" alt="image-20200819215709246"></p><h2 id="图形修饰处理"><a class="header-anchor" href="#图形修饰处理">¶</a>图形修饰处理</h2><ul><li>视点处理</li><li>色彩处理</li><li>图形的裁剪处理</li></ul><h3 id="视点处理"><a class="header-anchor" href="#视点处理">¶</a>视点处理</h3><p>方位角:视点与原点连线在xy平面上的投影与y轴负方向形成的角度，正值表示逆时针，负值表示顺时针。<br>仰角:视点与原点连线与xy平面的夹角，正值表示视点在xy平面上方，负值表示视点在xy平面下方。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820140437.png" alt="image-20200820140435709"></p><h4 id="view函数的基本用法"><a class="header-anchor" href="#view函数的基本用法">¶</a>view函数的基本用法</h4><p>view(az,el)</p><blockquote><p>其中，az为方位角，el为仰角。系统默认的视点定义为方位角-37.5°，仰角30°。</p></blockquote><p>ex:绘制函数𝒛 = (𝑥 − 1)^ 2+(𝑦 − 2)^2−1曲面，并从不同视点展示曲面</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">0.1</span>:<span class="number">3</span>);</span><br><span class="line">z=(x<span class="number">-1</span>).^<span class="number">2</span>+(y<span class="number">-2</span>).^<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>); mesh(x,y,z)</span><br><span class="line">title(<span class="string">&#x27;方位角=-37.5&#123;\circ&#125;,仰角=30&#123;\circ&#125;&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>); mesh(x,y,z)</span><br><span class="line">view(<span class="number">0</span>,<span class="number">90</span>);title(<span class="string">&#x27;方位角=0&#123;\circ&#125;,仰角=90&#123;\circ&#125;&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>); mesh(x,y,z)</span><br><span class="line">view(<span class="number">90</span>,<span class="number">0</span>); title(<span class="string">&#x27;方位角=90&#123;\circ&#125;,仰角=0&#123;\circ&#125;&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>); mesh(x,y,z)</span><br><span class="line">view(<span class="number">-45</span>,<span class="number">-60</span>); title(<span class="string">&#x27;方位角=-45&#123;\circ&#125;,仰角=-60&#123;\circ&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141051.png" alt="image-20200820140657979"></p><h4 id="view函数的其他用法"><a class="header-anchor" href="#view函数的其他用法">¶</a>view函数的其他用法</h4><p>view(x, y, z)<br>view(2)<br>view(3)</p><h3 id="色彩处理"><a class="header-anchor" href="#色彩处理">¶</a>色彩处理</h3><h4 id="颜色的向量表示"><a class="header-anchor" href="#颜色的向量表示">¶</a>颜色的向量表示</h4><p>向量元素在[0，1]范围内取值，3个元素依次表示红、绿、蓝3种颜色的 相对亮度，称为RGB三元组。</p><p>[0 0 1]：蓝色 [1 0 0]：红色 [0 1 0]：绿色 [1 1 1]：白色 [0 0 0]：黑色</p><p>[R G B] 红 绿 蓝</p><h4 id="色图（Colormap）"><a class="header-anchor" href="#色图（Colormap）">¶</a>色图（Colormap）</h4><ul><li>色图矩阵</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; cmap=colormap(parula(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">cmap =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.2081</span>    <span class="number">0.1663</span>    <span class="number">0.5292</span></span><br><span class="line">    <span class="number">0.0795</span>    <span class="number">0.5159</span>    <span class="number">0.8328</span></span><br><span class="line">    <span class="number">0.1986</span>    <span class="number">0.7214</span>    <span class="number">0.6310</span></span><br><span class="line">    <span class="number">0.8266</span>    <span class="number">0.7320</span>    <span class="number">0.3464</span></span><br><span class="line">    <span class="number">0.9763</span>    <span class="number">0.9831</span>    <span class="number">0.0538</span></span><br></pre></td></tr></table></figure><ul><li>内建色图</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141043.png" alt="image-20200820141041965"></p><ul><li><p>指定当前图形使用的色图</p><p>colormap cmapname</p><p>colormap(cmap)</p></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; surf(peaks)</span><br><span class="line">&gt;&gt; colormap hot</span><br></pre></td></tr></table></figure><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141210.png" alt="image-20200820141209262"></p>          </div><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141252.png" alt="image-20200820141251005"></p>          </div><ul><li>创建色图矩阵</li></ul><p>色图矩阵的每一行是RGB三元组。可以自定义色图矩阵，也可以 调用MATLAB提供的函数来定义色图矩阵。</p><p>ex:创建一个灰色系列色图矩阵。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c = [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1.0</span>]&#x27;;</span><br><span class="line">cmap = [c, c, c];</span><br><span class="line">surf(peaks)</span><br><span class="line">colormap(cmap)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141647.png" alt="image-20200820141645070"></p><h4 id="三维图形表面的着色"><a class="header-anchor" href="#三维图形表面的着色">¶</a>三维图形表面的着色</h4><p>可以用shading函数来改变着色方式</p><p>shading faceted:每个网格片用其高度对应的颜色进行着色， 网格线是黑色。这是默认着色方式。</p><p>shading flat:每个网格片用同一个颜色进行着色，且网格线也用相应的颜色。</p><p>shading interp:网格片内采用颜色插值处理。</p><p>ex:使用同一色图，以不同着色方式绘制圆锥体。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y,z]= cylinder(<span class="built_in">pi</span>:-<span class="built_in">pi</span>/<span class="number">5</span>:<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">colormap(lines);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">surf(x,y,z); shading flat</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">surf(x,y,z); shading interp</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">surf(x,y,z);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820141910.png" alt="image-20200820141909296"></p><h3 id="图形的裁剪处理"><a class="header-anchor" href="#图形的裁剪处理">¶</a>图形的裁剪处理</h3><p>将图形中需要裁剪部分对应的函数值设置成<font color="red">NaN</font>，这样在绘制图 形时，函数值为NaN的部分将不显示出来，从而达到对图形进行裁剪 的目的。</p><p>ex:绘制3/4圆。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">100</span>);</span><br><span class="line">x = <span class="built_in">sin</span>(t);</span><br><span class="line">y = <span class="built_in">cos</span>(t);</span><br><span class="line">p = y &gt; <span class="number">0.5</span>;</span><br><span class="line">y(p)= NaN;</span><br><span class="line"><span class="built_in">plot</span>(x,y)</span><br><span class="line">axis([<span class="number">-1.1</span>,<span class="number">1.1</span>,<span class="number">-1.1</span>,<span class="number">1.1</span>])</span><br><span class="line">axis square</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820142049.png" alt="image-20200820142048475"></p><p>ex:绘制3/4球面。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[X, Y, Z] = sphere(<span class="number">60</span>);</span><br><span class="line">p = Z&gt;<span class="number">0.5</span>;</span><br><span class="line">Z(p) = NaN;</span><br><span class="line">surf(X, Y, Z)</span><br><span class="line">axis([<span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])</span><br><span class="line">axis equal</span><br><span class="line">view(<span class="number">-45</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820142135.png" alt="image-20200820142133450"></p><h2 id="交互式绘图工具"><a class="header-anchor" href="#交互式绘图工具">¶</a>交互式绘图工具</h2><ul><li>&quot;绘图&quot;选项卡</li><li>图形窗口绘图工具</li><li>图形窗口菜单和工具栏</li></ul><h3 id="“绘图”选项卡"><a class="header-anchor" href="#“绘图”选项卡">¶</a>“绘图”选项卡</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820142333.png" alt="image-20200820142329074"></p><p>“绘图”选项卡的工具条提供了绘制图形的基本命令。</p><p>&quot;所选内容&quot;命令组:用于显示已选中用于绘图的变量;<br>“绘图”命令组:提供了绘制各种图形的命令;<br>“选项”命令组:用于设置绘图时是否新建图形窗口。</p><p>ex:选择已有变量绘制图形。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820142929.png" alt="无标题"></p><h3 id="绘图工具"><a class="header-anchor" href="#绘图工具">¶</a>绘图工具</h3><h4 id="显示绘图工具"><a class="header-anchor" href="#显示绘图工具">¶</a>显示绘图工具</h4><p>“显示绘图工具和停靠图形”按钮<br>命令行窗口中输入命令</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; plottools</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820143221.png" alt="image-20200820143219869"></p><h4 id="绘图工具的组成"><a class="header-anchor" href="#绘图工具的组成">¶</a>绘图工具的组成</h4><ul><li>图形选项板</li><li>绘图浏览器</li><li>属性编辑器</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820143453.png" alt="image-20200820143408346"></p><ul><li>图形选项板</li></ul><p>用于在图形窗口中添加和排列子图，观察和选择绘图数据以及添加图形标注。</p><p>“新子图”面板</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820143536.png" alt="image-20200820143535529"></p><p>“变量”面板</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820143707.png" alt="image-20200820143706147"></p><p>“注释”面板</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820143727.png" alt="image-20200820143726170"></p><ul><li>绘图浏览器</li></ul><p>以图例的方式列出图形中的元素。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820144025.png" alt="image-20200820143756260"></p><ul><li>属性编辑器</li></ul><p>用于观测和设置所选对象 的名称、颜色、填充方法等参 数。不同类型的对象，属性编 辑器中的内容不同。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820144040.png" alt="image-20200820143835238"></p><p>ex:用工作区的变量绘制曲线，改变曲线的类型、颜色、线型等。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820144047.png" alt="image-20200820144013869"></p><h3 id="图形窗口菜单和工具栏"><a class="header-anchor" href="#图形窗口菜单和工具栏">¶</a>图形窗口菜单和工具栏</h3><ul><li>工具栏</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820144258.png" alt="无标题01"></p><ul><li>图形窗口菜单</li></ul><p>图形绘制完成后，可以 用“文件”菜单中的“生成 代码”命令，将实施在图形 上的这些操作命令输出成脚 本。也可以用“保存”命令 将图形窗口内容保存为fig 文件。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200820144420.png" alt="image-20200820144418286"></p><h1>数据分析与多项式计算</h1><h2 id="数据统计分析"><a class="header-anchor" href="#数据统计分析">¶</a>数据统计分析</h2><ul><li>求最大元素与最小元素</li><li>求平均值与中值</li><li>求和与求积</li><li>累加和与累乘积</li><li>求标准差与相关系数</li><li>排序</li></ul><h3 id="求矩阵的最大元素和最小元素"><a class="header-anchor" href="#求矩阵的最大元素和最小元素">¶</a>求矩阵的最大元素和最小元素</h3><ul><li>max():求向量或矩阵的最大元素。</li><li>min():求向量或矩阵的最小元素。</li></ul><p>当参数为向量时，上述函数有两种调用格式：</p><p>（1）y=max(X)：返回向量X的最大值存入y，如果X中包含复数元素， 则按模取最大值。</p><p>（2）[y,k]=max(X)：返回向量X的最大值存入y，最大值元素的序号 存入k，如果X中包含复数元素，则按模取最大值。</p><p>ex:求向量x的最大元素，其中x=[-43,72,9,16,23,47]。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">-43</span>,<span class="number">72</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">47</span>];</span><br><span class="line">&gt;&gt; y=<span class="built_in">max</span>(x)</span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">72</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [y,k]=<span class="built_in">max</span>(x)</span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">72</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span></span><br></pre></td></tr></table></figure><p>当参数为矩阵时，函数有三种调用格式:<br>(1)max(A):返回一个行向量，向量的第i个元素是矩阵A的第i列上的最<br>大值。<br>(2）[Y,U]=max(A):返回行向量Y和U，Y向量记录A中每列的最大值，U向量记录每列最大值元素的行号。<br>(3） max(A,[,dim):dim取1或2。dim取1时，该函数的功能和max(A)完全相同; dim取2时，该函数返回一个列向量，其第i个元素是A矩阵的第i行上的最大值。</p><blockquote><p>思考：对矩阵按行求最大元素，仅使用第一种格式，能够做到吗？</p></blockquote><p>ex: 求矩阵A的每行及每列的最大元素，并求整个矩阵的最大元素.</p><p>A=[13,-56,78;25,63,-235;78,25,563;1,0,-1]</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt;  A=[<span class="number">13</span>,<span class="number">-56</span>,<span class="number">78</span>;<span class="number">25</span>,<span class="number">63</span>,<span class="number">-235</span>;<span class="number">78</span>,<span class="number">25</span>,<span class="number">563</span>;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">max</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">78</span>    <span class="number">63</span>   <span class="number">563</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">max</span>(<span class="built_in">max</span>(A))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">563</span></span><br></pre></td></tr></table></figure><blockquote><p>思考：用什么方法只调用一次max 函数就能求得整个矩阵的最大值？</p></blockquote><h3 id="求矩阵的平均值和中值"><a class="header-anchor" href="#求矩阵的平均值和中值">¶</a>求矩阵的平均值和中值</h3><ul><li>平均值:指算术平均值，即每项数据之和除以项数。</li><li>中值:指在数据序列中其值的大小恰好处在中间的元素。如果数据个数为奇数，则取值为大小位于中间的元素;如果数据个数为偶数，则取中间两个元素的平均值。</li></ul><p>在MATLAB中，求平均值和中值的函数分别为：</p><ul><li>mean():求算术平均值。</li><li>median():求中值。</li></ul><blockquote><p>思考：有了平均值，为什么还要中值？</p></blockquote><p>ex:某学生宿舍的5位同学月生活费如向量x所示，其中，小明同学家 境一般，请问他应该按什么标准向父母主张生活费额度才较为合理。</p><p>x=[1200,800,1500,1000,5000]</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">1200</span>,<span class="number">800</span>,<span class="number">1500</span>,<span class="number">1000</span>,<span class="number">5000</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">mean</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">        <span class="number">1900</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; median(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">        <span class="number">1200</span></span><br></pre></td></tr></table></figure><h3 id="求和与求积"><a class="header-anchor" href="#求和与求积">¶</a>求和与求积</h3><ul><li>sum():求和函数。</li><li>prod():求积函数。</li></ul><h3 id="累加和与累乘积"><a class="header-anchor" href="#累加和与累乘积">¶</a>累加和与累乘积</h3><p>设<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821105420.png" alt="image-20200821105418343">，是一个向量，V、W是与U等长的另外两个向量，并且<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821105445.png" alt="image-20200821105444073"></p><p>则分别称V、W为U的累加和向量和累乘积向量。</p><p>在MATLAB中，求累加和与累乘积的函数分别为：</p><ul><li>cumsum():累加和函数。</li><li>cumprod():累乘积函数。</li></ul><p>ex:求向量X=[1,2,3,4,5,6,7,8,9,10]的积与累乘积。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; X=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">&gt;&gt; y1=prod(X)</span><br><span class="line"></span><br><span class="line">y1 =</span><br><span class="line"></span><br><span class="line">     <span class="number">3628800</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; y2=cumprod(X)</span><br><span class="line"></span><br><span class="line">y2 =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> 至 <span class="number">5</span> 列</span><br><span class="line"></span><br><span class="line">           <span class="number">1</span>           <span class="number">2</span>           <span class="number">6</span>          <span class="number">24</span>         <span class="number">120</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span> 至 <span class="number">10</span> 列</span><br><span class="line"></span><br><span class="line">         <span class="number">720</span>        <span class="number">5040</span>       <span class="number">40320</span>      <span class="number">362880</span>     <span class="number">3628800</span></span><br></pre></td></tr></table></figure><h3 id="标准差与相关系数"><a class="header-anchor" href="#标准差与相关系数">¶</a>标准差与相关系数</h3><p>标准差用于计算数据偏离平均数的距离的平均值，其计算公式为</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821105724.png" alt="image-20200821105723539"></p><p>MATLAB中计算标准差的函数为std()，其调用格式为：</p><p>(1) std(X):计算向量X的标准差。<br>(2)std(A):计算矩阵A的各列的标准差。<br>(3)std(A,flag,dim):flag取0或1，当flag=0时，按S1所列公式计算样本标准方差;当flag=1时，按S2所列公式计算总体标准方差。在默认情况下，flag=0，dim=1。</p><p>ex:生成满足正态分布的50000*4随机矩阵，用不同的形式求其各列之间的标准差。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="built_in">randn</span>(<span class="number">50000</span>,<span class="number">4</span>);</span><br><span class="line">&gt;&gt; y1=std(x,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9958</span>    <span class="number">0.9980</span>    <span class="number">1.0046</span>    <span class="number">0.9990</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; y2=std(x,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9958</span>    <span class="number">0.9980</span>    <span class="number">1.0046</span>    <span class="number">0.9990</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x1=x&#x27;;</span><br><span class="line">&gt;&gt; y3=std(x1,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">&gt;&gt; y3&#x27; <span class="comment">%y3&#x27;=y1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9958</span>    <span class="number">0.9980</span>    <span class="number">1.0046</span>    <span class="number">0.9990</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; y4=std(x1,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&gt;&gt; y4&#x27; <span class="comment">%y4&#x27;=y2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9958</span>    <span class="number">0.9980</span>    <span class="number">1.0046</span>    <span class="number">0.9990</span></span><br></pre></td></tr></table></figure><p>相关系数能够反映两组数据序列之间相互关系，其计算公式为</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821162834.png" alt="image-20200821162833842"></p><p>在MATLAB中，计算相关系数的函数为corrcoef()，其调用格式为：</p><p>（1）corrcoef(A)：返回由矩阵A所形成的一个相关系数矩阵，其中，第i行第j 列的元素表示原矩阵A中第i列和第j列的相关系数。 （2）corrcoef(X,Y)：在这里，X,Y是向量，它们与corrcoef([X,Y])的作用一 样，用于求X、Y向量之间的相关系数。</p><p>ex:某新产品上市，在上市之 前，公司物流部门把新产品分 配到不同地区的10个仓库进行 销售。产品上市一个月后，公 司要对各种不同的分配方案进 行评估，以便在下一次新产品 上市时进行更准确的分配，避 免由于分配不当而产生的积压 和断货。右表是相关数据，请 判断哪种分配方案最为合理。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821162932.png" alt="image-20200821162929853"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">5032</span>,<span class="number">6000</span>,<span class="number">5100</span>,<span class="number">5200</span>;<span class="number">6532</span>,<span class="number">6500</span>,<span class="number">6600</span>,<span class="number">5800</span>;</span><br><span class="line"><span class="number">5500</span>,<span class="number">7000</span>,<span class="number">5400</span>,<span class="number">4800</span>;<span class="number">4530</span>,<span class="number">4000</span>,<span class="number">4300</span>,<span class="number">4200</span>;</span><br><span class="line"><span class="number">2300</span>,<span class="number">2000</span>,<span class="number">2200</span>,<span class="number">2500</span>;<span class="number">3254</span>,<span class="number">3000</span>,<span class="number">3500</span>,<span class="number">3000</span>;</span><br><span class="line"><span class="number">8095</span>,<span class="number">9000</span>,<span class="number">7800</span>,<span class="number">8500</span>;<span class="number">7530</span>,<span class="number">8000</span>,<span class="number">7000</span>,<span class="number">7500</span>;</span><br><span class="line"><span class="number">3841</span>,<span class="number">3200</span>,<span class="number">3500</span>,<span class="number">3200</span>;<span class="number">4500</span>,<span class="number">5200</span>,<span class="number">4800</span>,<span class="number">4000</span>];</span><br><span class="line">&gt;&gt; corrcoef(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.9630</span>    <span class="number">0.9906</span>    <span class="number">0.9782</span></span><br><span class="line">    <span class="number">0.9630</span>    <span class="number">1.0000</span>    <span class="number">0.9694</span>    <span class="number">0.9466</span></span><br><span class="line">    <span class="number">0.9906</span>    <span class="number">0.9694</span>    <span class="number">1.0000</span>    <span class="number">0.9635</span></span><br><span class="line">    <span class="number">0.9782</span>    <span class="number">0.9466</span>    <span class="number">0.9635</span>    <span class="number">1.0000</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a class="header-anchor" href="#排序">¶</a>排序</h3><p>在MATLAB中，排序函数为sort()，其调用格式为：</p><p>（1）sort(X)：对向量X按升序排列。</p><p>（2）Y,I]=sort(A,dim,mode)，其中dim指明对A的列还是行进行排序。mode 指明按升序还是降序排序，若取“ascend”，则按升序；若取“descend”， 则按降序，默认为升序。输出参数中，Y是排序后的矩阵，而I记录Y中的元素在A中位置。</p><p>ex:对下列矩阵做各种排序。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821165247.png" alt="image-20200821164831765"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">-8</span>,<span class="number">5</span>;<span class="number">4</span>,<span class="number">12</span>,<span class="number">6</span>;<span class="number">13</span>,<span class="number">7</span>,<span class="number">-13</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">sort</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>    <span class="number">-8</span>   <span class="number">-13</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">7</span>     <span class="number">5</span></span><br><span class="line">    <span class="number">13</span>    <span class="number">12</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">sort</span>(A,<span class="number">2</span>,<span class="string">&#x27;descend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span>     <span class="number">1</span>    <span class="number">-8</span></span><br><span class="line">    <span class="number">12</span>     <span class="number">6</span>     <span class="number">4</span></span><br><span class="line">    <span class="number">13</span>     <span class="number">7</span>   <span class="number">-13</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [X,I]=<span class="built_in">sort</span>(A)</span><br><span class="line"></span><br><span class="line">X =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>    <span class="number">-8</span>   <span class="number">-13</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">7</span>     <span class="number">5</span></span><br><span class="line">    <span class="number">13</span>    <span class="number">12</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">3</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">2</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="多项式计算"><a class="header-anchor" href="#多项式计算">¶</a>多项式计算</h2><ul><li>多项式的表示</li><li>多项式的四则运算</li><li>多项式的求导</li><li>多项式的求值</li><li>多项式的求根</li></ul><h3 id="多项式的表示"><a class="header-anchor" href="#多项式的表示">¶</a>多项式的表示</h3><p>在MATLAB中，n次多项式用一个长度为n+1的行向量表示。如有n次多项式：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821165212.png" alt="image-20200821165211471"></p><p>则在MATLAB中，p(x)表示为向量形式：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821165337.png" alt="image-20200821165336360"></p><p>在MATLAB中创建多项式向量时，要注意三点：</p><p>（1）多项式系数向量的顺序是从高到低。</p><p>（2）多项式系数向量包含0次项系数，所以其长度为多项式最高次数 加1。</p><p>（3）如果有的项没有，系数向量相应位置应用0补足。</p><h3 id="多项式的四则运算"><a class="header-anchor" href="#多项式的四则运算">¶</a>多项式的四则运算</h3><p>（1）多项式的加减运算<br>多项式的加减运算非常简单，即相应向量相加减。<br>（2）多项式乘法<br>conv(P1,P2)：多项式相乘，其中，P1、P2是两个多项式系数向量。<br>（3）多项式除法<br>[Q,r]=deconv(P1,P2)：多项式相除，其中Q返回多项式P1除以P2的商式，r返回P1除以P2的余式。这里，Q和r仍是多项式系数向量。deconv是conv的逆函 数，因此有下式成立。<br>P1=conv(Q,P2)+r</p><p>ex:设<code>f(x)=3*x^5-5*x^4-7*x^2+5*x+6,g(x)=3*x^2+5*x-3</code>，求f(x)+g(x),f(x)-g(x),f(x)g(x),f(x)/g(x)。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=[<span class="number">3</span>,<span class="number">-5</span>,<span class="number">0</span>,<span class="number">-7</span>,<span class="number">5</span>,<span class="number">6</span>]; g=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">-3</span>]; g1=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,g];</span><br><span class="line">&gt;&gt; f+g1</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>    <span class="number">-5</span>     <span class="number">0</span>    <span class="number">-4</span>    <span class="number">10</span>     <span class="number">3</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; f-g1</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>    <span class="number">-5</span>     <span class="number">0</span>   <span class="number">-10</span>     <span class="number">0</span>     <span class="number">9</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; conv(f,g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span>     <span class="number">0</span>   <span class="number">-34</span>    <span class="number">-6</span>   <span class="number">-20</span>    <span class="number">64</span>    <span class="number">15</span>   <span class="number">-18</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [Q,r]=deconv(f,g)</span><br><span class="line"></span><br><span class="line">Q =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-3.3333</span>    <span class="number">6.5556</span>  <span class="number">-16.5926</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>  <span class="number">107.6296</span>  <span class="number">-43.7778</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; conv(g,Q)+r          <span class="comment">%=f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">3.0000</span>   <span class="number">-5.0000</span>         <span class="number">0</span>   <span class="number">-7.0000</span>    <span class="number">5.0000</span>    <span class="number">6.0000</span></span><br></pre></td></tr></table></figure><h3 id="多项式的求导"><a class="header-anchor" href="#多项式的求导">¶</a>多项式的求导</h3><p>在MATLAB中，多项式求导函数为polyder()，其调用格式为：</p><p>（1）p=polyder§：求多项式P的导函数。<br>（2）p=polyder(P,Q)：求P×Q的导函数。<br>（3）[p,q]=polyder(P,Q)：求P/Q的导函数，导函数的分子存入p，分母存入q。</p><p>ex:已知两个多项式：</p><p><code>a(x)=3*x^3+x^2-6,b(x)=x+2</code></p><p>计算两个多项式的乘积的导函数、商的导函数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a=[<span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-6</span>];</span><br><span class="line">&gt;&gt; b=[<span class="number">1</span> <span class="number">2</span>];</span><br><span class="line">&gt;&gt; polyder(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span>     <span class="number">2</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; c=polyder(a,b)<span class="comment">%这个语句等价于：&gt;&gt; d=conv(a,b)</span></span><br><span class="line"><span class="comment">%d =</span></span><br><span class="line"><span class="comment">%3 7 2 -6 -12</span></span><br><span class="line"><span class="comment">%&gt;&gt; polyder(d)</span></span><br><span class="line"><span class="comment">%ans =</span></span><br><span class="line"><span class="comment">%12 21 4 -6</span></span><br><span class="line"></span><br><span class="line">c =</span><br><span class="line"></span><br><span class="line">    <span class="number">12</span>    <span class="number">21</span>     <span class="number">4</span>    <span class="number">-6</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [p,q]=polyder(a,b)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span>    <span class="number">19</span>     <span class="number">4</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">4</span>     <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>思考：对于[p,q]=polyder(a,b)，如 果换成先求商再求导，结果一样吗？</p></blockquote><h3 id="多项式的求值"><a class="header-anchor" href="#多项式的求值">¶</a>多项式的求值</h3><ul><li>polyval(p,x):代数多项式求值，其中，p为多项式系数向量，x可以是标量、向量或矩阵。若x为标量，则求多项式在该点的值;若x为向量或矩阵，则对向量或矩阵中的每个元素求多项式的值。</li><li>polyvalm(p, x):矩阵多项式求值，其调用格式与polyval相同，但含义不同。polyvalm函数要求x为方阵，以方阵为自变量求多项式的值。</li></ul><p>设A为方阵，P代表多项式x3-5x2+8，那么polyvalm(P,A)的含义是：</p><p><font color="red"><code>A*A*A-5*A*A+8*eye(size(A))</code></font></p><p>而polyval(P,A)的含义是：</p><p><font color="red"><code>A.*A.*A-5*A.*A+8*ones(size(A))</code></font></p><blockquote><p>思考：polyval(p,x)与polyvalm(p,x)有没有可能相等？如果有可 能，在什么情况下相等？</p></blockquote><p>ex:以多项式x 4+8x3-10为例，取一个2×2矩阵为自变量，分别用 polyval和polyvalm计算该多项式的值。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a=[<span class="number">1</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-10</span>];</span><br><span class="line">&gt;&gt; x=[<span class="number">-1</span> <span class="number">1.2</span>;<span class="number">2</span> <span class="number">-1.8</span>];</span><br><span class="line">&gt;&gt; y1=polyval(a,x)</span><br><span class="line"></span><br><span class="line">y1 =</span><br><span class="line"></span><br><span class="line">  <span class="number">-17.0000</span>    <span class="number">5.8976</span></span><br><span class="line">   <span class="number">70.0000</span>  <span class="number">-46.1584</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; y2=polyvalm(a,x)</span><br><span class="line"></span><br><span class="line">y2 =</span><br><span class="line"></span><br><span class="line">  <span class="number">-60.5840</span>   <span class="number">50.6496</span></span><br><span class="line">   <span class="number">84.4160</span>  <span class="number">-94.3504</span></span><br></pre></td></tr></table></figure><h3 id="多项式的求根"><a class="header-anchor" href="#多项式的求根">¶</a>多项式的求根</h3><p>在MATLAB中，多项式求根函数为roots§，其中p为多项式的系数向量。</p><p>ex:求多项式 <code>x^4+8*x^3-10</code>的根。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a=[<span class="number">1</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-10</span>];</span><br><span class="line">&gt;&gt; x=roots(a)</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">  <span class="number">-8.0194</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">1.0344</span> + <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">  <span class="number">-0.5075</span> + <span class="number">0.9736</span><span class="built_in">i</span></span><br><span class="line">  <span class="number">-0.5075</span> - <span class="number">0.9736</span><span class="built_in">i</span></span><br></pre></td></tr></table></figure><p>若已知多项式的全部根，则可以用poly函数建立起该多 项式，其调用格式为：</p><p>p=poly(x)</p><p>ex:在以上语句之后，继续输入命令：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; p=poly(x)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">8.0000</span>    <span class="number">0.0000</span>    <span class="number">0.0000</span>  <span class="number">-10.0000</span></span><br></pre></td></tr></table></figure><p>ex:某工业过程需要对工件进行高温加热，热量由一个燃烧装置产生。该装置中共有两条输送管 道，一条管道按固定量提供燃料，一条管道注入空气。空气能够帮助燃烧，但是过高的空气流量 又会带走热量，降低加热效率。经过数十次空气流量实验，技术部门取得了相应的结果数据，并 通过曲线拟合得知空气流量与加热效率在[0, 2]范围内基本满足多项式<code>p(x)=-38.89x^2+126.11x-3.42</code>（x表示空气流量），请推算空气流量在[0, 2]范围内什么水平时，加热效率为最高。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; p=[<span class="number">-38.89</span>,<span class="number">126.11</span>,<span class="number">-3.42</span>];</span><br><span class="line">&gt;&gt; q=polyder(p)</span><br><span class="line">q =</span><br><span class="line"><span class="number">-77.7800</span> <span class="number">126.1100</span></span><br><span class="line">&gt;&gt; roots(q)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">1.6214</span></span><br><span class="line">&gt;&gt; polyval(p,<span class="number">1.6214</span>)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line"><span class="number">98.8154</span></span><br><span class="line">&gt;&gt; x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>;</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,polyval(p,x),<span class="number">1.6214</span>,<span class="number">98.8154</span>,<span class="string">&#x27;rp&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821174701.png" alt="image-20200821174657674"></p><h2 id="数据插值"><a class="header-anchor" href="#数据插值">¶</a>数据插值</h2><ul><li>引例-零件加工问题</li><li>数据插值的计算机制</li><li>数据插值的实现方法</li><li>应用案例-粮储仓的通风控制问题</li></ul><h3 id="引例-零件加工问题"><a class="header-anchor" href="#引例-零件加工问题">¶</a>引例-零件加工问题</h3><p>在飞机制造中，机翼的加工是一项关键技术。由于机翼尺寸很大，通常 在图纸中只能标出一些关键点的数据。下表给出了某型飞机机翼的下缘 轮廓线数据，求x每改变0.1时y的值。</p><table><thead><tr><th>x</th><th>0</th><th>3</th><th>5</th><th>7</th><th>9</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th></tr></thead><tbody><tr><td>y</td><td>0</td><td>1.2</td><td>1.7</td><td>2.0</td><td>2.1</td><td>2.0</td><td>1.8</td><td>1.2</td><td>1.0</td><td>1.6</td></tr></tbody></table><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821182018.png" alt="image-20200821181842835"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>];</span><br><span class="line">&gt;&gt; y=[<span class="number">0</span>,<span class="number">1.2</span>,<span class="number">1.7</span>,<span class="number">2.0</span>,<span class="number">2.1</span>,<span class="number">2.0</span>,<span class="number">1.8</span>,<span class="number">1.2</span>,<span class="number">1.0</span>,<span class="number">1.6</span>];</span><br><span class="line">&gt;&gt; x1=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">15</span>;</span><br><span class="line">&gt;&gt; y1=interp1(x,y,x1,<span class="string">&#x27;spline&#x27;</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x1,y1)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821182002.png" alt="image-20200821182001920"></p><h3 id="数据插值的计算机制"><a class="header-anchor" href="#数据插值的计算机制">¶</a>数据插值的计算机制</h3><p>从数学上来说，数据插值是一种函数逼近的方法。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203653.png" alt="image-20200821201007384"></p><h3 id="数据插值的实现方法"><a class="header-anchor" href="#数据插值的实现方法">¶</a>数据插值的实现方法</h3><p>在MATLAB中，一维插值函数为interp1()，其调用格式为：</p><p>Y1=interp1(X,Y,X1,method)</p><p>该语句将根据X、Y的值，计算函数在X1处的值。其中，X、Y是两个等长 的已知向量，分别表示采样点和采样值。X1是一个向量或标量，表示要 插值的点。</p><p>method参数用于指定插值方法，常用的取值有以下四种：</p><p>(1) linear:线性插值，默认方法。将与插值点靠近的两个数据点用直线连接，然后在直线上选取对应插值点的数据。<br>(2)nearest:最近点插值。选择最近样本点的值作为插值数据。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821200421.png" alt="image-20200821200420255"></p><p>(3） pchip:分段3次埃尔米特插值。采用分段三次多项式，除满足插值条件，还需满足在若干节点处相邻段插值函数的一阶导数相等，使得曲线光滑的同时，还具有保形性。<br>(4） spline:3次样条插值。每个分段内构造一个三次多项式，使其插值函数除满足插值条件外，还要求在各节点处具有连续的一阶和二阶导数。</p><blockquote><p>思考：为什么这两种插值方法都用3次多项式而不用更高次的？</p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203629.png" alt="image-20200821200550064"></p><h3 id="四种方法的比较"><a class="header-anchor" href="#四种方法的比较">¶</a>四种方法的比较</h3><ul><li>线性插值和最近点插值方法比较简单。其中线性插值方法的计算量与样本点n无关。n越大，误差越小。</li><li>3次埃尔米特插值和3次样条插值都能保证曲线的光滑性。相比较而言，3次埃尔米特插值具有保形性;而3次样条插值要求其二阶导数也连续，所以插值函数的性态更好。</li></ul><p>MATLAB中的二维插值函数为interp2()，其调用格式为：<br>Z1=interp2(X,Y,Z,X1,Y1,method)<br>其中，X、Y是两个向量，表示两个参数的采样点，Z是采样 点对应的函数值。X1、Y1是两个标量或向量，表示要插值 的点。</p><h3 id="粮储仓的通风控制问题"><a class="header-anchor" href="#粮储仓的通风控制问题">¶</a>粮储仓的通风控制问题</h3><p>在某粮情自动测控系统中，根据粮温、粮湿计算平衡点湿度，与大气湿 度进行比较，再根据通风模拟情况决定是否自动进行通风。已测得平衡 点湿度与粮温、粮湿关系的部分数据如下表，请推算相应范围内温度每 变化1度、湿度每变化1个点的平衡点湿度。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821201245.png" alt="image-20200821201244739"></p><blockquote><p>若粮食水分吸收和蒸发量相等，这个湿度称为平衡点湿度。平衡点湿 度跟粮温、粮湿有关。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">20</span>:<span class="number">10</span>:<span class="number">90</span>;</span><br><span class="line">&gt;&gt; y=(<span class="number">0</span>:<span class="number">5</span>:<span class="number">20</span>)&#x27;;</span><br><span class="line">&gt;&gt; z=[<span class="number">8.9</span>,<span class="number">10.32</span>,<span class="number">11.3</span>,<span class="number">12.5</span>,<span class="number">13.9</span>,<span class="number">15.3</span>,<span class="number">17.8</span>,<span class="number">21.3</span>;</span><br><span class="line"><span class="number">8.7</span>,<span class="number">10.8</span>,<span class="number">11</span>,<span class="number">12.1</span>,<span class="number">13.2</span>,<span class="number">14.8</span>,<span class="number">16.55</span>,<span class="number">20.8</span>;</span><br><span class="line"><span class="number">8.3</span>,<span class="number">9.65</span>,<span class="number">10.88</span>,<span class="number">12</span>,<span class="number">13.2</span>,<span class="number">14.6</span>,<span class="number">16.4</span>,<span class="number">20.5</span>;</span><br><span class="line"><span class="number">8.1</span>,<span class="number">9.4</span>,<span class="number">10.7</span>,<span class="number">11.9</span>,<span class="number">13.1</span>,<span class="number">14.5</span>,<span class="number">16.2</span>,<span class="number">20.3</span>;</span><br><span class="line"><span class="number">8.1</span>,<span class="number">9.2</span>,<span class="number">10.8</span>,<span class="number">12</span>,<span class="number">13.2</span>,<span class="number">14.8</span>,<span class="number">16.9</span>,<span class="number">20.9</span>];</span><br><span class="line">&gt;&gt; xi=<span class="number">20</span>:<span class="number">90</span>;</span><br><span class="line">&gt;&gt; yi=(<span class="number">0</span>:<span class="number">20</span>)&#x27;;</span><br><span class="line">&gt;&gt; zi=interp2(x,y,z,xi,yi,<span class="string">&#x27;spline&#x27;</span>);</span><br><span class="line">&gt;&gt; surf(xi,yi,zi)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203618.png" alt="image-20200821201434989"></p><h2 id="数据插值应用举例"><a class="header-anchor" href="#数据插值应用举例">¶</a>数据插值应用举例</h2><ul><li>机动车刹车距离问题</li><li>沙盘制作问题</li></ul><h3 id="机动车刹车距离问题"><a class="header-anchor" href="#机动车刹车距离问题">¶</a>机动车刹车距离问题</h3><p>在车辆行驶中，从驾驶员看到障碍物开始，到作出判断而采取制动措施停车所需的最短 距离叫停车视距。停车视距由三部分组成：一是驾驶员反应时间内行驶的距离（即反应 距离）；二是开始制动到车辆完全停止所行驶的距离（即制动距离）；三是车辆停止时 与障碍物应该保持的安全距离。其中，制动距离主要与行驶速度和路面类型有关。根据 测试，某型车辆在潮湿天气于沥青路面行驶时，其行车速度（单位：km/h）与制动距离 （单位：m）的关系如下表所示。</p><table><thead><tr><th>速度</th><th>20</th><th>30</th><th>40</th><th>50</th><th>60</th><th>70</th><th>80</th><th>90</th><th>100</th><th>110</th><th>120</th><th>130</th><th>140</th><th>150</th></tr></thead><tbody><tr><td>制动距离</td><td>3.15</td><td>7.08</td><td>12.59</td><td>19.68</td><td>28.34</td><td>38.57</td><td>50.4</td><td>63.75</td><td>78.71</td><td>95.22</td><td>113.29</td><td>132.93</td><td>154.12</td><td>176.87</td></tr></tbody></table><p>假设驾驶员的反应时间为10s，安全距离为10m。请问:<br>①根据某驾驶员的实际视力和视觉习惯，其驾驶时的有效视距为120m，则其在该路面行车时，时速最高不能超过多少（结果取整）?<br>②若以表中数据为参考，设计一条最高时速为125km/h的高速公路，则设计人员应该保证驾驶者在公路上任一点的可视距离为多少米?</p><p><font color="red"><strong>设</strong></font>速度为v，停车视距为d，反应距离为d1，制动距离为d2，安全距离为d3，反应时间为as， 则<br>d=d1+d2+d3<br>其中，d1=asv，d2为v的函数，d3已知。<br>第一问：根据某驾驶员的实际视力和视觉习惯，其驾驶时的有效视距为120m，则其在该路面<br>行车时，时速最高不能超过多少（结果取整） ？<br>已知反应时间为10s，安全距离为10m，可采用解方程方法：<br>10v+d2+10=120<br>存在的问题是，d2是v的函数，但是函数关系未知，方程不可解。<br>下面考虑<strong>数据插值方法</strong>，以表格中的数据为样本，进行数据插值，计算出与120m的停车视距所对应的速度指标。<br><font color="red"><strong>编程思路：</strong></font><br>第一步:建立速度和停车视距向量。<br>第二步:以1为单位，对采样区间内所有速度进行插值，计算出相应的停车视距。<br>第三步:求出停车视距120所对应的速度。<br>第四步:绘图展示。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">v=<span class="number">20</span>:<span class="number">10</span>:<span class="number">150</span>;</span><br><span class="line">vs=v.*(<span class="number">1000</span>/<span class="number">3600</span>);</span><br><span class="line">d1=<span class="number">10.</span>*vs;</span><br><span class="line">d2=[<span class="number">3.15</span>,<span class="number">7.08</span>,<span class="number">12.59</span>,<span class="number">19.68</span>,<span class="number">28.34</span>,<span class="number">38.57</span>,<span class="number">50.4</span>,<span class="number">63.75</span>,<span class="number">78.71</span>,<span class="number">95.22</span>,<span class="number">113.29</span>,<span class="number">132.93</span>,<span class="number">154.12</span>,<span class="number">176.87</span>];</span><br><span class="line">d3=<span class="number">10</span>;</span><br><span class="line">d=d1+d2+d3;</span><br><span class="line">vi=<span class="number">20</span>:<span class="number">1</span>:<span class="number">150</span>;</span><br><span class="line">di=interp1(v,d,vi,<span class="string">&#x27;spline&#x27;</span>);</span><br></pre></td></tr></table></figure><p><font color="red">如何根据停车视距120找到对应的速度？</font></p><p>第一步;令代表停车视距的向量di减去120，再取绝对值，得到一个新的向量x。<br>第二步:将x按升序排列，并记录最小元素的序号，该序号即为停车视距120所对应的速度数据在向量vi中的序号。<br>第三步;根据序号取得速度数据。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">abs</span>(di<span class="number">-120</span>);</span><br><span class="line">[y,<span class="built_in">i</span>]=<span class="built_in">sort</span>(x);</span><br><span class="line">vi(<span class="built_in">i</span>(<span class="number">1</span>)) <span class="comment">%vi(i(1))=36</span></span><br><span class="line"><span class="built_in">plot</span>(vi,di,vi(<span class="built_in">i</span>(<span class="number">1</span>)),di(<span class="built_in">i</span>(<span class="number">1</span>)),<span class="string">&#x27;rp&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203611.png" alt="image-20200821202810194"></p><ul><li>停车视距的增长随着车速增加呈非线性增长。</li><li>速度越快，要求视线越远。</li></ul><p><strong>第二问</strong>：设计一条最高时速为125km/h 的高速公路，则设计人员应该保证驾驶 者在公路上任一点的可视距离为多少米？</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">j</span>=<span class="built_in">find</span>(vi==<span class="number">125</span>);</span><br><span class="line">&gt;&gt; di(<span class="built_in">j</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">480.1373</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(vi,di,<span class="number">125</span>,<span class="number">480.1373</span>,<span class="string">&#x27;rp&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203557.png" alt="image-20200821203028579"></p><p>公路设计是一个复杂的工程，除了地形、 地质等因素之外，驾驶者的可视距离也 要考虑在内，以与设计时速相匹配，从 设计上保障安全。</p><h3 id="沙盘制作问题"><a class="header-anchor" href="#沙盘制作问题">¶</a>沙盘制作问题</h3><p>某地面部队分成红蓝两方在指定的陌生区域（平面区域[0,2000]*[0,2000]内，单位：m） 进行作战演习。在演习过程中，红方侦查单位已经测得一些地点的高程如下表所示。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203551.png" alt="image-20200821203151462"></p><p>①根据表中数据，制作军事沙盘。<br>②在演习范围内，占领最大高地的一方将获得居高临下的优势。请问红方应第一时间抢占哪块区域。</p><p><font color="red">解题思路：</font></p><ul><li>第一问:用二维插值估算数据，以方便制作军事沙盘。</li><li>第二问:在插值的基础上，绘制等高线图，找到最大高地。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">200</span>:<span class="number">1800</span>;</span><br><span class="line">y=x&#x27;;</span><br><span class="line">z=[<span class="number">2000</span>,<span class="number">2000</span>,<span class="number">2001</span>,<span class="number">1992</span>,<span class="number">1954</span>,<span class="number">1938</span>,<span class="number">1972</span>,<span class="number">1995</span>,<span class="number">1999</span>,<span class="number">1999</span>;</span><br><span class="line"><span class="number">2000</span>,<span class="number">2002</span>,<span class="number">2006</span>,<span class="number">1908</span>,<span class="number">1533</span>,<span class="number">1381</span>,<span class="number">1728</span>, <span class="number">1959</span>,<span class="number">1998</span>,<span class="number">2000</span>;</span><br><span class="line"><span class="number">2000</span>,<span class="number">2005</span>,<span class="number">2043</span>,<span class="number">1921</span>,<span class="number">977</span>,<span class="number">897</span>,<span class="number">1310</span>,<span class="number">1930</span>,<span class="number">2003</span>,<span class="number">2000</span>;</span><br><span class="line"><span class="number">1997</span>,<span class="number">1978</span>,<span class="number">2009</span>,<span class="number">2463</span>,<span class="number">2374</span>,<span class="number">1445</span>,<span class="number">1931</span>,<span class="number">2209</span>,<span class="number">2050</span>,<span class="number">2003</span>;</span><br><span class="line"><span class="number">1992</span>,<span class="number">1892</span>,<span class="number">1566</span>,<span class="number">1971</span>,<span class="number">2768</span>,<span class="number">2111</span>,<span class="number">2653</span>,<span class="number">2610</span>,<span class="number">2121</span>,<span class="number">2007</span>;</span><br><span class="line"><span class="number">1991</span>,<span class="number">1875</span>,<span class="number">1511</span>,<span class="number">1556</span>,<span class="number">2221</span>,<span class="number">1986</span>,<span class="number">2660</span>,<span class="number">2601</span>,<span class="number">2119</span>,<span class="number">2007</span>;</span><br><span class="line"><span class="number">1996</span>,<span class="number">1950</span>,<span class="number">1797</span>,<span class="number">2057</span>,<span class="number">2849</span>,<span class="number">2798</span>,<span class="number">2608</span>,<span class="number">2303</span>,<span class="number">2052</span>,<span class="number">2003</span>;</span><br><span class="line"><span class="number">1999</span>,<span class="number">1999</span>,<span class="number">2079</span>,<span class="number">2685</span>,<span class="number">3390</span>,<span class="number">3384</span>,<span class="number">2781</span>,<span class="number">2165</span>,<span class="number">2016</span>,<span class="number">2000</span>;</span><br><span class="line"><span class="number">2000</span>,<span class="number">2002</span>,<span class="number">2043</span>,<span class="number">2271</span>,<span class="number">2668</span>,<span class="number">2668</span>,<span class="number">2277</span>,<span class="number">2049</span>,<span class="number">2003</span>,<span class="number">2000</span>;</span><br><span class="line"><span class="number">2000</span>,<span class="number">2000</span>,<span class="number">2004</span>,<span class="number">2027</span>,<span class="number">2067</span>,<span class="number">2067</span>,<span class="number">2027</span>,<span class="number">2004</span>,<span class="number">2000</span>,<span class="number">2000</span>];</span><br><span class="line">surf(x,y,z);</span><br><span class="line">x1=<span class="number">0</span>:<span class="number">100</span>:<span class="number">1800</span>;</span><br><span class="line">y1=x1&#x27;;</span><br><span class="line">z1=interp2(x,y,z,x1,y1,<span class="string">&#x27;spline&#x27;</span>);</span><br><span class="line">surf(x1,y1,z1);</span><br><span class="line">x2=<span class="number">0</span>:<span class="number">50</span>:<span class="number">1800</span>;</span><br><span class="line">y2=x2&#x27;;</span><br><span class="line">z2=interp2(x1,y1,z1,x2,y2,<span class="string">&#x27;spline&#x27;</span>);</span><br><span class="line">surf(x2,y2,z2);</span><br><span class="line">contour(x2,y2,z2,<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821203541.png" alt="image-20200821203540410"></p><h2 id="曲线拟合"><a class="header-anchor" href="#曲线拟合">¶</a>曲线拟合</h2><ul><li>引例-人口预测问题</li><li>曲线拟合的原理</li><li>曲线拟合的实现方法</li><li>实际应用</li></ul><h3 id="引例-人口预测问题"><a class="header-anchor" href="#引例-人口预测问题">¶</a>引例-人口预测问题</h3><p>人口增长是当今世界上都关注的问题，对人口增长趋势进行预测是 各国普遍的做法。已知某国1790年到2010年间历次人口普查数据如 下表所示，请预测该国2020年的人口数。</p><table><thead><tr><th>年份</th><th>1790</th><th>1800</th><th>1810</th><th>1820</th><th>1830</th><th>1840</th><th>1850</th><th>1860</th><th>1870</th><th>1880</th><th>1890</th><th>1900</th></tr></thead><tbody><tr><td>人口（百万）</td><td>3.9</td><td>5.3</td><td>7.2</td><td>9.6</td><td>12.9</td><td>17.1</td><td>23.2</td><td>31.4</td><td>38.6</td><td>50.2</td><td>63.0</td><td>76.0</td></tr><tr><td>年份</td><td>1910</td><td>1920</td><td>1930</td><td>1940</td><td>1950</td><td>1960</td><td>1970</td><td>1980</td><td>1990</td><td>2000</td><td>2010</td><td></td></tr><tr><td>人口（百万）</td><td>92.0</td><td>105.7</td><td>122.8</td><td>131.7</td><td>150.7</td><td>179.3</td><td>203.2</td><td>226.5</td><td>248.7</td><td>281.4</td><td>308.7</td><td></td></tr></tbody></table><blockquote><p>解题思路：找一个函数，去逼近这些数据，然后再根据找到的函数， 计算预测点的值。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1790</span>:<span class="number">10</span>:<span class="number">2010</span>;</span><br><span class="line">y=[<span class="number">3.9</span>,<span class="number">5.3</span>,<span class="number">7.2</span>,<span class="number">9.6</span>,<span class="number">12.9</span>,<span class="number">17.1</span>,<span class="number">23.2</span>,<span class="number">31.4</span>,<span class="number">38.6</span>,<span class="number">50.2</span>,<span class="number">63.0</span>,<span class="number">76.0</span>,<span class="number">92.0</span>,<span class="number">105.7</span>,<span class="number">122.8</span>,<span class="number">131.7</span>,<span class="number">150.7</span>,<span class="number">179.3</span>,<span class="number">203.2</span>,<span class="number">226.5</span>,<span class="number">248.7</span>,<span class="number">281.4</span>,<span class="number">308.7</span>];</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">p=polyfit(x,y,<span class="number">3</span>);</span><br><span class="line">polyval(p,<span class="number">2020</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,x,polyval(p,x));</span><br><span class="line"><span class="comment">%ans=339.8</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821205035.png" alt="image-20200821205034699"></p><h3 id="曲线拟合的原理"><a class="header-anchor" href="#曲线拟合的原理">¶</a>曲线拟合的原理</h3><p>与数据插值类似，曲线拟合也是一种函数逼近的方法。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821205623.png" alt="image-20200821205154515"></p><p>构造函数g(x)去逼近未知函数f(x)，使得误差</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821205618.png" alt="image-20200821205222116"></p><p>在某种意义下达到最小。</p><p><font color="red"><strong>两个问题</strong>：</font></p><ul><li>(1)用什么类型的函数做逼近函数?     多项式函数</li><li>(2）误差最小到底怎么计算?     最小二乘法</li></ul><p><strong>最小二乘法</strong>（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和来寻找数据的最佳函数匹配。</p><p>设p(x)是一个多项式函数</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821205611.png" alt="image-20200821205610481"></p><p>且</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821205644.png" alt="image-20200821205643541"></p><p>的值最小，则p(x)为原函数y=f(x)的逼近函数。</p><h3 id="曲线拟合的实现方法"><a class="header-anchor" href="#曲线拟合的实现方法">¶</a>曲线拟合的实现方法</h3><p>MATLAB中的多项式拟合函数为polyfit()，其功能为求得最小二乘拟合多项式系 数，其调用格式为：</p><p>(1）P=polyfit(X,Y,m)<br>(2）[P,S]=polyfit(X,Y,m)<br>(3）[P, S,mu]=polyfit(X,Y,m):根据样本数据X和Y，产生一个m次多项式P及其在采样点误差数据S，mu(1)是一个二元向量，mu(1)是mean(X)，而mu(2)是std(X)。</p><p>在引例中，我们已经用polyfit()函数预测了某国2020年的人口数。这 个结果是否正确呢？我们无法得到2020年的数据，但是2016年的数 据已经有了。所以，不妨再预测一下该国2016年的人口数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; polyval(p,<span class="number">2016</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">327.0964</span></span><br></pre></td></tr></table></figure><p>该国2016年人口数实际为323.1。</p><blockquote><p>思考：相对误差1.24%，怎样才能减小？</p></blockquote><p><font color="purple">问题分析：</font></p><p>据研究，一个国家的人口增长具有如下特点：</p><p>(1）发展越平稳，人口增长越有规律。<br>(2）当经济发展到一定水平时，人口增长率反而下降。<br>换言之，在不同的环境和经济发展水平，人口可能有不同的增长规律。</p><p><font color="purple">结论：</font></p><p>在人口增长数据的拟合上，应该将二战后至今这一时期的数据与此前的数据分开处理。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">1950</span>:<span class="number">10</span>:<span class="number">2010</span>;</span><br><span class="line">&gt;&gt; y=[<span class="number">150.7</span>,<span class="number">179.3</span>,<span class="number">203.2</span>,<span class="number">226.5</span>,<span class="number">248.7</span>,<span class="number">281.4</span>,<span class="number">308.7</span>];</span><br><span class="line">&gt;&gt; p=polyfit(x,y,<span class="number">3</span>)</span><br><span class="line">p =</span><br><span class="line"><span class="number">1.0e+06</span> *  <span class="comment">%次数太高</span></span><br><span class="line"><span class="number">0.0000</span> <span class="number">-0.0000</span> <span class="number">0.0034</span> <span class="number">-2.2305</span></span><br><span class="line">&gt;&gt; p=polyfit(x,y,<span class="number">2</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,x,polyval(p,x))</span><br><span class="line">&gt;&gt; polyval(p,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">325.1696</span>   <span class="comment">%相对误差成功减小到0.64%！</span></span><br><span class="line">&gt;&gt; polyval(p,<span class="number">2020</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">336.7857</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/image-20200821210713453.png" alt="image-20200821210713453"></p><p>结论：</p><p>（1）要对问题的背景进行详细的分析。</p><p>（2）采样点并非越多越好，适当的时候，可以减少采样点，分段进行拟合。</p><h3 id="家庭储蓄规律问题"><a class="header-anchor" href="#家庭储蓄规律问题">¶</a>家庭储蓄规律问题</h3><p>以下是某市家庭收入x与家庭储蓄y之间的一组调查数据（单位：万元）， 试建立x与y的线性函数经验公式。</p><table><thead><tr><th>x</th><th>0.6</th><th>1.0</th><th>1.4</th><th>1.8</th><th>2.2</th><th>2.6</th><th>3.0</th><th>3.4</th><th>3.8</th><th>4</th></tr></thead><tbody><tr><td>y</td><td>0.08</td><td>0.22</td><td>0.31</td><td>0.4</td><td>0.48</td><td>0.56</td><td>0.67</td><td>0.75</td><td>0.8</td><td>1.0</td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">0.6</span>,<span class="number">1.0</span>,<span class="number">1.4</span>,<span class="number">1.8</span>,<span class="number">2.2</span>,<span class="number">2.6</span>,<span class="number">3.0</span>,<span class="number">3.4</span>,<span class="number">3.8</span>,<span class="number">4</span> ];</span><br><span class="line">&gt;&gt;  y=[<span class="number">0.08</span>,<span class="number">0.22</span>,<span class="number">0.31</span>,<span class="number">0.4</span>,<span class="number">0.48</span>,<span class="number">0.56</span>,<span class="number">0.67</span>,<span class="number">0.75</span>,<span class="number">0.8</span>,<span class="number">1.0</span> ];</span><br><span class="line">&gt;&gt;  p=polyfit(x,y,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.2390</span>   <span class="number">-0.0418</span></span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,x,polyval(p,x))</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">经验公式：y=0.239x-0.0418</font></p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/20200821211259.png" alt="image-20200821211258252">曲线拟合的<strong>三种功能</strong>： （1）估算数据 （2）预测趋势 （3）总结规律</p><h2 id="曲线拟合应用举例"><a class="header-anchor" href="#曲线拟合应用举例">¶</a>曲线拟合应用举例</h2><ul><li>股票预测问题</li><li>算法的参数优化问题</li></ul><h3 id="股票预测问题"><a class="header-anchor" href="#股票预测问题">¶</a>股票预测问题</h3><p>已知一只股票在2016年8月每个交易日的收盘价如下表所示，试预测 其后面的大体走势。</p><table><thead><tr><th>时间</th><th>2</th><th>3</th><th>4</th><th>5</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>15</th><th>16</th></tr></thead><tbody><tr><td>价格</td><td>7.74</td><td>7.84</td><td>7.82</td><td>7.78</td><td>7.91</td><td>7.97</td><td>7.9</td><td>7.76</td><td>7.9</td><td>8.04</td><td>8.06</td></tr><tr><td>时间</td><td>17</td><td>18</td><td>19</td><td>22</td><td>23</td><td>24</td><td>25</td><td>26</td><td>29</td><td>30</td><td></td></tr><tr><td>价格</td><td>8.11</td><td>8.08</td><td>8.13</td><td>8.03</td><td>8.01</td><td>8.06</td><td>8.0</td><td>8.3</td><td>8.41</td><td>8.28</td><td></td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">29</span>,<span class="number">30</span>];</span><br><span class="line">&gt;&gt; y=[<span class="number">7.74</span>,<span class="number">7.84</span>,<span class="number">7.82</span>,<span class="number">7.78</span>,<span class="number">7.91</span>,<span class="number">7.97</span>,<span class="number">7.9</span>,<span class="number">7.76</span>,<span class="number">7.9</span>,<span class="number">8.04</span>,<span class="number">8.06</span>,<span class="number">8.11</span>,<span class="number">8.08</span>,<span class="number">8.13</span>,<span class="number">8.03</span>,<span class="number">8.01</span>,<span class="number">8.06</span>,<span class="number">8.0</span>,<span class="number">8.3</span>,<span class="number">8.41</span>,<span class="number">8.28</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; p=polyfit(x,y,<span class="number">3</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,x,polyval(p,x));</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821212103.png" alt="image-20200821212101554"></p><blockquote><p>跳动幅度大，不稳定，难以看出规律。</p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821212146.png" alt="image-20200821212145780"></p><p>该股票后三个交易日的收盘价分别为8.27,8.17,9.54。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x1=[<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>];</span><br><span class="line">&gt;&gt; xi=[x,x1];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,xi,polyval(p,xi));</span><br><span class="line">&gt;&gt; y1=[<span class="number">8.27</span>,<span class="number">8.17</span>,<span class="number">9.54</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,xi,polyval(p,xi),x1,y1,<span class="string">&#x27;rp&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821212253.png" alt="image-20200821212251986"></p><blockquote><p>误差太大， 预测结果并 没有太大的 参考价值。</p></blockquote><h3 id="算法的参数优化问题"><a class="header-anchor" href="#算法的参数优化问题">¶</a>算法的参数优化问题</h3><p>在群体智能优化算法的设计中，搜索行为具有一定的随机性，以免于陷入局部最优。 但是，随机性参数的设置却是一个普遍性的难题。如果随机性过高，算法的多样性增 加，但是难以收敛；若随机性太低，算法收敛速度快，但多样性降低，极有可能陷入 局部最优。已知某算法随机性参数与多样性、收敛性的关系分别如表1和表2所示，其中收敛性与多样性数据都已经转换为与算法性能相关的统一度量。现在算法的设计者 既不愿意降低收敛性，又不愿意牺牲多样性，想要在两者之间取得一个平衡点。请问怎么确定随机性参数？</p><p>​表1 随机性参数与多样性度量之间的关系</p><table><thead><tr><th>x</th><th>0.03</th><th>0.06</th><th>0.09</th><th>0.12</th><th>0.15</th><th>0.18</th><th>0.21</th><th>0.24</th><th>0.27</th><th>0.3</th></tr></thead><tbody><tr><td>y1</td><td>0.01</td><td>0.01</td><td>0.02</td><td>0.03</td><td>0.06</td><td>0.07</td><td>0.13</td><td>0.17</td><td>0.25</td><td>0.37</td></tr></tbody></table><p>​表2 随机性参数与收敛性度量之间的关系</p><table><thead><tr><th>x</th><th>0.03</th><th>0.06</th><th>0.09</th><th>0.12</th><th>0.15</th><th>0.18</th><th>0.21</th><th>0.24</th><th>0.27</th><th>0.3</th></tr></thead><tbody><tr><td>y2</td><td>0.85</td><td>0.76</td><td>0.68</td><td>0.62</td><td>0.54</td><td>0.52</td><td>0.5</td><td>0.49</td><td>0.48</td><td>0.47</td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0.03</span>:<span class="number">0.03</span>:<span class="number">0.3</span>;</span><br><span class="line">y1=[<span class="number">0.01</span>,<span class="number">0.01</span>,<span class="number">0.02</span>,<span class="number">0.03</span>,<span class="number">0.06</span>,<span class="number">0.07</span>,<span class="number">0.13</span>,<span class="number">0.17</span>,<span class="number">0.25</span>,<span class="number">0.37</span>];</span><br><span class="line">y2=[<span class="number">0.85</span>,<span class="number">0.76</span>,<span class="number">0.68</span>,<span class="number">0.62</span>,<span class="number">0.56</span>,<span class="number">0.52</span>,<span class="number">0.49</span>,<span class="number">0.46</span>,<span class="number">0.43</span>,<span class="number">0.39</span>];</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;*&#x27;</span>,x,y2,<span class="string">&#x27;o&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821213119.png" alt="image-20200821212813579"></p><p><font color="pink">问题分析：</font></p><ul><li>随机性参数的增长导致多样性增加，收敛性降低。</li><li>两者同等重要，则取平衡点。</li><li>平衡点最佳位置是多样性和收敛性相等的地方。</li></ul><p><font color="pink">解决方案：</font></p><ul><li>第一步：分别对多样性和收敛性进行拟合，得到拟合曲线。</li><li>第二步：找到两曲线的交点。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p1=polyfit(x,y1,<span class="number">2</span>);</span><br><span class="line">p2=polyfit(x,y2,<span class="number">2</span>);</span><br><span class="line">p=p1-p2;</span><br><span class="line">xi=roots(p);</span><br><span class="line">xj=<span class="number">0</span>:<span class="number">0.03</span>:<span class="number">0.36</span>;</span><br><span class="line">yj1=polyval(p1,xj);</span><br><span class="line">yj2=polyval(p2,xj);</span><br><span class="line">yi=polyval(p1,xi(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;*&#x27;</span>,x,y2,<span class="string">&#x27;o&#x27;</span>,xj,yj1,xj,yj2,xi(<span class="number">2</span>),yi,<span class="string">&#x27;rp&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200821213059.png" alt="image-20200821213058480"></p><h3 id="数据插值与曲线拟合的比较"><a class="header-anchor" href="#数据插值与曲线拟合的比较">¶</a>数据插值与曲线拟合的比较</h3><p>相同点：</p><ul><li>都属于函数逼近方法</li><li>都能进行数据估算</li></ul><p>不同点：</p><ul><li>实现方法不同</li><li>结果形式不同</li><li>侧重点不同</li><li>应用场合不同</li></ul><h1>数值微积分与方程求解</h1><h2 id="数值微分与数值积分数值微分"><a class="header-anchor" href="#数值微分与数值积分数值微分">¶</a>数值微分与数值积分数值微分</h2><ul><li>数值积分</li><li>数值微分</li></ul><h3 id="数值微分"><a class="header-anchor" href="#数值微分">¶</a>数值微分</h3><h4 id="数值差分与差商"><a class="header-anchor" href="#数值差分与差商">¶</a>数值差分与差商</h4><p>微积分中，任意函数f(x)在x0点的导数是通过极限定义的：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826183722.png" alt="image-20200826183720287"></p><p>如果去掉极限定义中h趋向于0的极限过程，得到函数在x0点处以h（h&gt;0） 为步长的向前差分、向后差分和中心差分公式：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826183758.png" alt="image-20200826183756703"></p><p>函数f(x)在点x0的微分接近于函数在该点的差分，而f在点x的导数接近于函数在该点的差商。</p><h4 id="数值微分的实现"><a class="header-anchor" href="#数值微分的实现">¶</a>数值微分的实现</h4><p>MATLAB提供了求向前差分的函数diff，其调用格式有三种：</p><ul><li><font color='purple'>dx=diff(x)</font>:计算向量x的向前差分，dx(i)=x(i+1)-x(i)，i=1，2，…，n-1。</li><li><font color='purple'>dx=diff(x, n):</font>计算向量x的n阶向前差分。例如，diff(x,2)=diff(diff(x))。</li><li><font color='purple'>dx=diff(A,n, dim):</font>计算矩阵A的n阶差分，dim=1时（默认状态），按列计算差分;dim=2，按行计算差分。</li></ul><blockquote><p><font color ="red">注意：</font>diff函数计算的是向量元素间的差分，故差分向量元素的个数比原向量少了 一个。同样，对于矩阵来说，差分后的矩阵比原矩阵少了一行或一列。 另外，计算差分之后，可以用f(x)在某点处的差商作为其导数的近似值。</p></blockquote><p>ex:设f(x)=sinx，在[0，2π ]范围内随机采样，计算f’(x)的近似值，并与 理论值f’(x)=cosx 进行比较。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=[<span class="number">0</span>,<span class="built_in">sort</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">5000</span>)),<span class="number">2</span>*<span class="built_in">pi</span>];</span><br><span class="line">y=<span class="built_in">sin</span>(x);</span><br><span class="line">f1=diff(y)./diff(x);</span><br><span class="line">f2=<span class="built_in">cos</span>(x(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>));</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>),f1,x(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>),f2);</span><br><span class="line">d=norm(f1-f2) </span><br><span class="line"></span><br><span class="line">d =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0456</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826185635.png" alt="image-20200826184859687"></p><h3 id="数值积分"><a class="header-anchor" href="#数值积分">¶</a>数值积分</h3><h4 id="数值积分基本原理"><a class="header-anchor" href="#数值积分基本原理">¶</a>数值积分基本原理</h4><p>在高等数学中，计算定积分依靠微积分基本定理，只要找到被积函数f(x) 的原函数大F(x)，则可用牛顿—莱布尼兹（Newton-Leibniz）公式：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826185626.png" alt="image-20200826185010745"></p><p>在有些情况下，应用牛顿—莱布尼兹公式有困难，例如，当被积函数的原函 数无法用初等函数表示，或被积函数是用离散的表格形式给出的。这时就需 要用数值解法来求定积分的近似值。</p><p>求定积分的数值方法多种多样，如梯形法、辛普森（Simpson）法、高斯求积公式 等。它们的基本思想都是将积分区间[a，b]分成n个子区间[xi，xi+1]，i=1，2，…， n，其中x1=a，xn+1=b，这样求定积分问题就分解为下面的求和问题：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826185619.png" alt="image-20200826185055502"></p><p>在每一个小的子区间上定积分的值可以近似求得,从而避免了牛顿—莱布尼兹公式 需要寻求原函数的困难。</p><h4 id="数值积分的实现"><a class="header-anchor" href="#数值积分的实现">¶</a>数值积分的实现</h4><ul><li>基于自适应辛普森方法</li></ul><p><font color ="purple">[I,n]=quad(filename,a,b,tol,trace)</font></p><ul><li>基于自适应Gauss-Lobatto方法</li></ul><p><font color ="purple">[I,n]=quadl(filename,a,b,tol,trace)</font></p><blockquote><p>其中，filename是被积函数名；a和b分别是定积分的下限和上限，积分限[a，b] 必须是有限的，不能为无穷大（Inf）；tol用来控制积分精度，默认时取 tol=10^(-6)；trace控制是否展现积分过程，若取非0则展现积分过程，取0则不展 现，默认时取trace=0；返回参数I即定积分的值，n为被积函数的调用次数。</p></blockquote><p>ex:分别用quad函数和quadl函数求定 积分的近似值，并在相同的积分精度下， 比较被积函数的调用次数。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826185608.png" alt="image-20200826185607408"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; format long</span><br><span class="line">&gt;&gt; f=@(x) <span class="number">4.</span>/(<span class="number">1</span>+x.^<span class="number">2</span>);</span><br><span class="line">&gt;&gt; [I,n]=quad(f,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1e-8</span>)</span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">   <span class="number">3.141592653733437</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">    <span class="number">61</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [I,n]=quadl(f,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1e-8</span>)</span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">   <span class="number">3.141592653589806</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">    <span class="number">48</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; (<span class="built_in">atan</span>(<span class="number">1</span>)-<span class="built_in">atan</span>(<span class="number">0</span>))*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">3.141592653589793</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; format short</span><br></pre></td></tr></table></figure><ul><li>基于全局自适应积分方法</li></ul><p><font color ="purple">I=integral(filename,a,b)</font></p><blockquote><p>其中，I是计算得到的积分；filename是被积函数；a和b分别是定积分的下限和 上限，积分限可以为无穷大。</p></blockquote><p>ex:求定积分。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826190315.png" alt="image-20200826190314126"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%被积函数文件fe.m：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">fe</span><span class="params">(x)</span></span></span><br><span class="line">f=<span class="number">1.</span>/(x.*<span class="built_in">sqrt</span>(<span class="number">1</span>-<span class="built_in">log</span>(x).^<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">&gt;&gt; I=integral(@fe,<span class="number">1</span>,<span class="built_in">exp</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.5708</span></span><br></pre></td></tr></table></figure><ul><li>基于自适应高斯-克朗罗德方法</li></ul><p><font color="purple">[I,err]=quadgk(filename,a,b)</font></p><blockquote><p>其中，err返回近似误差范围，其他参数的含义和用法与quad函数相同。积分 上下限可以是无穷大（−Inf或Inf），也可以是复数。如果积分上下限是复数， 则quadgk函数在复平面上求积分。</p></blockquote><p>ex:求定积分。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826191306.png" alt="image-20200826191305074"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%被积函数文件fsx.m：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">fsx</span><span class="params">(x)</span></span></span><br><span class="line">f=<span class="built_in">sin</span>(<span class="number">1.</span>/x)./x.^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; I=quadgk(@fsx,<span class="number">2</span>/<span class="built_in">pi</span>,+Inf)</span><br><span class="line"></span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span></span><br></pre></td></tr></table></figure><ul><li>基于梯形积分法</li></ul><p>已知（xi，yi）（i=1，2，…，n），且a=x1&lt;x2&lt;····&lt;xn=b，求<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/image-20200826191602547.png" alt="image-20200826191602547">近似值。</p><p><font color ="purple">I=trapz(x,y) </font></p><blockquote><p>其中，向量x、y定义函数关系y=f(x)。</p></blockquote><p>trapz函数采用梯形积分法则，积分的近似值为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826191728.png" alt="image-20200826191726661"></p><blockquote><p>其中，hi=x(i+1)-xi。</p></blockquote><p>可用以下语句实现：</p><p><font color="green">sum(diff(x).*(y(1:end-1)+y(2:end))/2)</font></p><p>ex:设x=1:6，y=[6,8,11,7,5,2],用trapz函数计算定积分。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">1</span>:<span class="number">6</span>;</span><br><span class="line">&gt;&gt; y=[<span class="number">6</span> <span class="number">8</span> <span class="number">11</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span>];</span><br><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">&#x27;-ko&#x27;</span>);</span><br><span class="line">&gt;&gt; grid on</span><br><span class="line">&gt;&gt; axis([<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">11</span>]);</span><br><span class="line">&gt;&gt; I1=trapz(x,y)</span><br><span class="line"></span><br><span class="line">I1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">35</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; I2=sum(diff(x).*(y(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)+y(<span class="number">2</span>:<span class="keyword">end</span>))/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">I2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">35</span></span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826192244.png" alt="image-20200826192243277"></p><h4 id="多重定积分的数值求解"><a class="header-anchor" href="#多重定积分的数值求解">¶</a>多重定积分的数值求解</h4><ul><li>求二重积分的数值解：<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826192317.png" alt="image-20200826192316268"></li></ul><p><font color="purple">I=integral2(filename,a,b,c,d)</font></p><p><font color="purple">I=quad2d(filename,a,b,c,d)</font></p><p><font color="purple">I=dblquad(filename,a,b,c,d,tol)</font></p><ul><li>求三重积分的数值解：<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826203656.png" alt="image-20200826192442918"></li></ul><p><font color="purple">I=integral3(filename,a,b,c,d,e,f)</font></p><p><font color="purple">I=triplequad(filename,a,b,c,d,e,f,tol)</font></p><p>ex:分别求二重积分和三重积分。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826203650.png" alt="image-20200826192607178"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f1=@(x,y) <span class="built_in">exp</span>(-x.^<span class="number">2</span>/<span class="number">2</span>).*<span class="built_in">sin</span>(x.^<span class="number">2</span>+y);</span><br><span class="line">&gt;&gt; I1=quad2d(f1,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">I1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.5745</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; f2=@(x,y,z) <span class="number">4</span>*x.*z.*<span class="built_in">exp</span>(-z.*z.*y-x.*x);</span><br><span class="line">&gt;&gt; I2=integral3(f2,<span class="number">0</span>,<span class="built_in">pi</span>,<span class="number">0</span>,<span class="built_in">pi</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">I2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.7328</span></span><br></pre></td></tr></table></figure><h2 id="线性方程组求解"><a class="header-anchor" href="#线性方程组求解">¶</a>线性方程组求解</h2><ul><li>直接法</li><li>迭代法</li></ul><h3 id="线性方程组的直接解法"><a class="header-anchor" href="#线性方程组的直接解法">¶</a>线性方程组的直接解法</h3><ul><li>高斯（Gauss）消去法</li><li>列主元消去法</li><li>矩阵的三角分解法</li></ul><p>高斯（Gauss）消去法是一个经典的直接法，由它改进得到的列主元消去法，是 目前计算机上求解线性方程组的标准算法，其特点就是通过消元将一般线性方 程组的求解问题转化为三角方程组的求解问题。此外，还有矩阵的三角分解法 等许多直接求解算法。</p><h4 id="利用左除运算符的直接解法"><a class="header-anchor" href="#利用左除运算符的直接解法">¶</a>利用左除运算符的直接解法</h4><p>MATLAB提供了一个左除运算符“\”用于求解线性方程组，它使用列主元消去法， 使用起来十分方便。对于线性方程组Ax=b，可以利用左除运算符反斜杠求解，b左 除以A可获得线性方程组的数值解x。</p><p><font color="purple">Ax=b</font><font color="red">——&gt;</font><font color="purple">x=A\b</font></p><blockquote><p>注意，如果矩阵A是奇异的或接近奇异的，则MATLAB会给出警告信息。</p></blockquote><p>ex:用左除运算符求解下列线性方程组。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826203644.png" alt="image-20200826193110942"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">-5</span>,<span class="number">0</span>,<span class="number">7</span>;<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>;<span class="number">1</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">-4</span>];</span><br><span class="line">&gt;&gt; b=[<span class="number">13</span>,<span class="number">-9</span>,<span class="number">6</span>,<span class="number">0</span>]&#x27;;</span><br><span class="line">&gt;&gt; x=A\b</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">  <span class="number">-66.5556</span></span><br><span class="line">   <span class="number">25.6667</span></span><br><span class="line">  <span class="number">-18.7778</span></span><br><span class="line">   <span class="number">26.5556</span></span><br></pre></td></tr></table></figure><h4 id="利用矩阵分解求解线性方程组"><a class="header-anchor" href="#利用矩阵分解求解线性方程组">¶</a>利用矩阵分解求解线性方程组</h4><p>矩阵分解是设计算法的重要技巧，是指将一个给定的矩阵分解成若干个特 殊类型矩阵的乘积，从而将一个一般的矩阵计算问题转化为几个易求的特 殊矩阵的计算问题。通过矩阵分解方法求解线性方程组的优点是运算速度快，可以节省存储空间。</p><ul><li>LU分解</li><li>QR分解</li><li>Cholesky分解</li></ul><p>①LU分解的基本思想</p><p>矩阵的LU分解就是将一个n阶矩阵表示为一个下三角矩阵和一个上三角矩阵的 乘积。线性代数中已经证明，只要方阵是非奇异的，LU分解总是可以进行的。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220122.png" alt="image-20200826203934776"></p><p>对于三角方程很容易求解，于是可以首先求解向量y使Ly=b，再求解Ux=y，从 而达到求解线性方程组Ax=b的目的。</p><p>②MATLAB的LU分解函数</p><p>LU分解函数是根据列主元LU分解算法定义的，具有较好的数据稳定性。lu 函数有两种调用格式：</p><ul><li><font color="purple">[L, U]=lu(A):</font>产生一个上三角阵U和一个变换形式的下三角阵L，使之满足A=LU。注意，这里的矩阵A必须是方阵。</li><li><font color="purple">[L,U,P]=lu(A):</font>产生一个上三角阵U和一个下三角阵L以及一个置换矩阵P，使之满足PA=LU。同样，矩阵A必须是方阵。</li></ul><p>当使用第一种格式时，矩阵L往往不是一个下三角阵，但可以通过行交换成为一个下三角阵。</p><p>③用LU分解求解线性方程组</p><p><font color="purple">Ax=b→LUx=b→x=U(L\b) </font></p><p>或</p><p><font color="purple">Ax=b→ PAx=Pb→ LUx=Pb → x=U(L\P*b)</font></p><p>通过LU分解后可以大大提高运算速度。</p><p>ex:用LU分解求解例1中的线性方程组。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220116.png" alt="image-20200826204438949"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">-5</span>,<span class="number">0</span>,<span class="number">7</span>;<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>;<span class="number">1</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">-4</span>];</span><br><span class="line">&gt;&gt; b=[<span class="number">13</span>,<span class="number">-9</span>,<span class="number">6</span>,<span class="number">0</span>]&#x27;;</span><br><span class="line">&gt;&gt; [L,U]=lu(A);<span class="comment">%&gt;&gt; [L,U,P]=lu(A);</span></span><br><span class="line"><span class="comment">%&gt;&gt; x=U\(L\P*b) </span></span><br><span class="line">&gt;&gt; x=U\(L\b)</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">  <span class="number">-66.5556</span></span><br><span class="line">   <span class="number">25.6667</span></span><br><span class="line">  <span class="number">-18.7778</span></span><br><span class="line">   <span class="number">26.5556</span></span><br></pre></td></tr></table></figure><h3 id="线性方程组的迭代解法"><a class="header-anchor" href="#线性方程组的迭代解法">¶</a>线性方程组的迭代解法</h3><p>迭代法是一种不断用变量的原值推出它的新值的过程，是用计算机解决问题的一种基本方法。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220107.png" alt="image-20200826220106591"></p><h4 id="雅可比（Jacobi）迭代法"><a class="header-anchor" href="#雅可比（Jacobi）迭代法">¶</a>雅可比（Jacobi）迭代法</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220207.png" alt="image-20200826220206404"></p><p>求解公式为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220254.png" alt="image-20200826220253399"></p><p>与之对应的迭代公式为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220323.png" alt="image-20200826220322259"></p><p>雅可比迭代法的函数文件jacobi.m：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[y,n]</span>=<span class="title">jacobi</span><span class="params">(A,b,x0,ep)</span></span></span><br><span class="line">D=<span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">L=-<span class="built_in">tril</span>(A,<span class="number">-1</span>);</span><br><span class="line">U=-<span class="built_in">triu</span>(A,<span class="number">1</span>);</span><br><span class="line">B=D\(L+U);</span><br><span class="line">f=D\b;</span><br><span class="line">y=B*x0+f;</span><br><span class="line">n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> norm(y-x0)&gt;=ep</span><br><span class="line"> x0=y;</span><br><span class="line"> y=B*x0+f;</span><br><span class="line"> n=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure><h4 id="高斯-赛德尔（Gauss-Serdel）迭代法"><a class="header-anchor" href="#高斯-赛德尔（Gauss-Serdel）迭代法">¶</a>高斯-赛德尔（Gauss-Serdel）迭代法</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220436.png" alt="image-20200826220435494"></p><p>Gauss-Serdel迭代法的函数文件gauseidel.m：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[y,n]</span>=<span class="title">gauseidel</span><span class="params">(A,b,x0,ep)</span></span></span><br><span class="line">D=<span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">L=-<span class="built_in">tril</span>(A,<span class="number">-1</span>);</span><br><span class="line">U=-<span class="built_in">triu</span>(A,<span class="number">1</span>);</span><br><span class="line">B=(D-L)\U;</span><br><span class="line">f=(D-L)\b;</span><br><span class="line">y=B*x0+f;</span><br><span class="line">n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> norm(y-x0)&gt;=ep</span><br><span class="line"> x0=y;</span><br><span class="line"> y=B*x0+f;</span><br><span class="line"> n=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure><p>ex:分别用雅可比迭代法和高斯-赛德尔迭代法求解线性方程组。设迭代初值为 0，迭代精度为10^-6 。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826220542.png" alt="image-20200826220541284"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">4</span>,<span class="number">-2</span>,<span class="number">-1</span>;<span class="number">-2</span>,<span class="number">4</span>,<span class="number">3</span>;<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">3</span>]; </span><br><span class="line">&gt;&gt; b=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>]&#x27;;</span><br><span class="line">&gt;&gt; [x,n]=jacobi(A,b,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]&#x27;,<span class="number">1.0e-6</span>) </span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9706</span></span><br><span class="line">    <span class="number">0.8529</span></span><br><span class="line">    <span class="number">1.1765</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">    <span class="number">35</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">%other    </span></span><br><span class="line">&gt;&gt; [x,n]=gauseidel(A,b,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]&#x27;,<span class="number">1.0e-6</span>)</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9706</span></span><br><span class="line">    <span class="number">0.8529</span></span><br><span class="line">    <span class="number">1.1765</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">    <span class="number">16</span></span><br></pre></td></tr></table></figure><p>ex:分别用雅可比迭代法和高斯-赛德尔迭代法求解下列线性方程组，看是否收敛。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826221403.png" alt="image-20200826221000840"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">-2</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]; </span><br><span class="line">&gt;&gt; b=[<span class="number">9</span>;<span class="number">7</span>;<span class="number">6</span>];</span><br><span class="line">&gt;&gt; [x,n]=jacobi(A,b,[<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>],<span class="number">1.0e-6</span>) </span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">   <span class="number">-27</span></span><br><span class="line">    <span class="number">26</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [x,n]=gauseidel(A,b,[<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>],<span class="number">1.0e-6</span>) </span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">   NaN</span><br><span class="line">   NaN</span><br><span class="line">   NaN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line"></span><br><span class="line">        <span class="number">1012</span></span><br></pre></td></tr></table></figure><ul><li><p>直接法：以矩阵初等变换为基础，可以求得方程组的精确解；占用的内存空 间大、程序实现较为复杂；一般适合求解低阶稠密线性方程组。</p></li><li><p>迭代法：从给定初始值逐步逼近精确解的过程，求解过程占用存储空间小， 程序设计简单；适用于求解大型稀疏矩阵线性方程组；要考虑算法的收敛性。</p></li></ul><h2 id="线性方程组应用举例"><a class="header-anchor" href="#线性方程组应用举例">¶</a>线性方程组应用举例</h2><ul><li>平面桁架结构受力分析问题</li><li>小行星运行轨道计算问题</li></ul><h3 id="平面桁架结构受力分析问题"><a class="header-anchor" href="#平面桁架结构受力分析问题">¶</a>平面桁架结构受力分析问题</h3><p>桁架是工程中常用的一种结构，各构件在同一平面内的桁架称为平面桁架。 一个平面桁架结构由连接于A、B、C、D、E、F、G、H共8个结点的13根杆件 构成。在结点B、E和G上施加指定载荷，求桁架每根杆件上的轴力。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826221334.png" alt="image-20200826221333310"></p><p>对于静态平衡的衍架而言，它的各个结点也一定是平衡的，即在任何结点上 水平方向或垂直方向受力之和都必须为零。因此，可以对每一个结点列出两 个独立的平衡方程，从而可求出杆件的轴力。对于8个结点，可以列出16个方 程，方程数多于待定的13个未知量。为使该衍架静定，即为使问题存在唯一 解，我们假定：结点A在水平和垂直方向上刚性固定，而结点H仅在垂直方向 刚性固定。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826221433.png" alt="image-20200826221431889"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826221452.png" alt="image-20200826221451371"></p><p>以结点E为例,其受力如图所示,写出平衡方程，有：</p><p>水平方向：ƒ𝟓cos45°+ƒ𝟔= ƒ𝟗cos45°+ƒ𝟏0</p><p>垂直方向：ƒ𝟓sin45°+ƒ𝟕+ƒ𝟗sin45°=15</p><p>定义参数𝜶 = 𝟐/𝟐，则可得到E点的平衡方程。</p><p>𝜶ƒ𝟓+ƒ𝟔= 𝜶 ƒ𝟗+ƒ𝟏𝟎</p><p>𝜶 ƒ𝟓+ƒ𝟕+𝜶ƒ𝟗=15</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">结点B：  ƒ𝟐=ƒ𝟔</span><br><span class="line"> ƒ𝟑=10</span><br><span class="line">结点C：𝛂ƒ𝟏=ƒ𝟒+𝛂ƒ𝟓</span><br><span class="line">   𝛂ƒ𝟏+ƒ𝟑+𝛂ƒ𝟓=0</span><br><span class="line">结点D：ƒ𝟒=ƒ𝟖</span><br><span class="line"><span class="code">  ƒ𝟕=0</span></span><br><span class="line"><span class="code">结点E：𝛂ƒ𝟓+ƒ𝟔=𝛂ƒ𝟗+ƒ𝟏𝟎</span></span><br><span class="line"><span class="code">   𝛂ƒ𝟓+ƒ𝟕+𝛂ƒ𝟗=15</span></span><br><span class="line"><span class="code">结点F：ƒ𝟏𝟎=ƒ𝟏𝟑</span></span><br><span class="line"><span class="code">   ƒ𝟏𝟏=20</span></span><br><span class="line"><span class="code">结点G：ƒ𝟖+𝛂ƒ𝟗= 𝛂ƒ𝟏𝟐</span></span><br><span class="line"><span class="code">   𝛂ƒ𝟗+ƒ𝟏𝟏+𝛂ƒ𝟏𝟐=0</span></span><br><span class="line"><span class="code">结点H：ƒ𝟏𝟑+𝛂ƒ𝟏𝟐=0</span></span><br></pre></td></tr></table></figure><ul><li>结点H在垂直方向刚性固定，只有水平方向平衡方程。</li><li>这是一个包含13个未知数的线性方程组，利用MATLAB很容易求出杆件轴力向量f。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">alpha=<span class="built_in">sqrt</span>(<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">A=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> alpha,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,-alpha,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> alpha,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,alpha,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,alpha,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,-alpha,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,alpha,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,alpha,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,alpha,<span class="number">0</span>,<span class="number">0</span>,-alpha,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,alpha,<span class="number">0</span>,<span class="number">1</span>,alpha,<span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,alpha,<span class="number">1</span>];</span><br><span class="line">b=[<span class="number">0</span>;<span class="number">10</span>;<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>;<span class="number">15</span>;<span class="number">0</span>;<span class="number">20</span>;<span class="number">0</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">f=A\b;</span><br><span class="line"><span class="built_in">disp</span>(f&#x27;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">-28.2843</span>   <span class="number">20.0000</span>   <span class="number">10.0000</span>  <span class="number">-30.0000</span>   <span class="number">14.1421</span>   <span class="number">20.0000</span>         <span class="number">0</span>  <span class="number">-30.0000</span>    <span class="number">7.0711</span>   <span class="number">25.0000</span>   <span class="number">20.0000</span>  <span class="number">-35.3553</span>   <span class="number">25.0000</span></span><br></pre></td></tr></table></figure><h3 id="小行星运行轨道计算问题"><a class="header-anchor" href="#小行星运行轨道计算问题">¶</a>小行星运行轨道计算问题</h3><p>现在已经在5个不同时刻对某颗小行星进行了5次观测，测得轨道上的5个点 的坐标数据如表所示，其单位为天文测量单位。试确定小行星的轨道方程。</p><table><thead><tr><th>i</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>xi</td><td>1.02</td><td>0.87</td><td>0.67</td><td>0.44</td><td>0.16</td></tr><tr><td>yi</td><td>0.39</td><td>0.27</td><td>0.18</td><td>0.13</td><td>0.13</td></tr></tbody></table><h4 id="模型分析"><a class="header-anchor" href="#模型分析">¶</a>模型分析</h4><p>由开普勒第一定律知，小行星运行轨道为椭圆方程：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826223000.png" alt="image-20200826222646103"></p><p>需要确定系数ai(i=1,2,3,4,5)。</p><p>利用已知的数据，不妨设测得的5个点坐标为（xi,yi）（i=1,2,3,4,5），确 定系数ai等价于求解下列线性方程组。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826222950.png" alt="image-20200826222722213"></p><p>将方程改写为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826222945.png" alt="image-20200826222743485"></p><p>将表中的数据（xi,yi）（i=1,2,3,4,5）代入系数矩阵，可求得 ai(i=1,2,3,4,5)，从而得到小行星的轨道方程。</p><h4 id="模型求解"><a class="header-anchor" href="#模型求解">¶</a>模型求解</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">xi=[<span class="number">1.02</span>,<span class="number">0.87</span>,<span class="number">0.67</span>,<span class="number">0.44</span>,<span class="number">0.16</span>];</span><br><span class="line">yi=[<span class="number">0.39</span>,<span class="number">0.27</span>,<span class="number">0.18</span>,<span class="number">0.13</span>,<span class="number">0.13</span>];</span><br><span class="line">A=<span class="built_in">zeros</span>(<span class="built_in">length</span>(xi));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(xi)</span><br><span class="line"> A(<span class="built_in">i</span>,:)=[xi(<span class="built_in">i</span>)*xi(<span class="built_in">i</span>),<span class="number">2</span>*xi(<span class="built_in">i</span>)*yi(<span class="built_in">i</span>),yi(<span class="built_in">i</span>)*yi(<span class="built_in">i</span>),<span class="number">2</span>*xi(<span class="built_in">i</span>),<span class="number">2</span>*yi(<span class="built_in">i</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">b=-<span class="built_in">ones</span>(<span class="built_in">length</span>(xi),<span class="number">1</span>);</span><br><span class="line">ai=A\b</span><br><span class="line"></span><br><span class="line">ai =</span><br><span class="line"></span><br><span class="line">    <span class="number">2.4645</span></span><br><span class="line">   <span class="number">-0.4423</span></span><br><span class="line">    <span class="number">6.4917</span></span><br><span class="line">   <span class="number">-0.6819</span></span><br><span class="line">   <span class="number">-3.6008</span></span><br></pre></td></tr></table></figure><p>因此小行星的轨道方程为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826222925.png" alt="image-20200826222924456"></p><p>绘制小行星运行轨道：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x,y) <span class="number">2.4645</span>*x.^<span class="number">2</span><span class="number">-0.8846</span>*x.*y+<span class="number">6.4917</span>*y.^<span class="number">2</span><span class="number">-1.3638</span>*x<span class="number">-7.2016</span>*y+<span class="number">1</span>;</span><br><span class="line">&gt;&gt; h=ezplot(f,[<span class="number">-0.5</span>,<span class="number">1.2</span>,<span class="number">0</span>,<span class="number">1.2</span>]);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200826223043.png" alt="image-20200826223042839"></p><h2 id="非线性方程求解与函数极值计算"><a class="header-anchor" href="#非线性方程求解与函数极值计算">¶</a>非线性方程求解与函数极值计算</h2><ul><li>非线性方程数值求解</li><li>函数极值的计算</li></ul><h3 id="非线性方程数值求解"><a class="header-anchor" href="#非线性方程数值求解">¶</a>非线性方程数值求解</h3><h4 id="单变量非线性方程求解"><a class="header-anchor" href="#单变量非线性方程求解">¶</a>单变量非线性方程求解</h4><p>函数的调用格式为：</p><p><font color="purple">x=fzero(filename,x0)</font></p><blockquote><p>其中，filename是待求根方程左端的函数表达式，x0是初始值。</p></blockquote><p>ex:求f(x)=x-(1/x)+5在x0=-5和x0=1作为迭代初值时的根。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x) x<span class="number">-1.</span>/x+<span class="number">5</span>;</span><br><span class="line">&gt;&gt; x1=fzero(f,<span class="number">-5</span>)</span><br><span class="line"></span><br><span class="line">x1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">-5.1926</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x2=fzero(f,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1926</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x3=fzero(f,<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">x3 =</span><br><span class="line"></span><br><span class="line">   <span class="number">3.7372e-16</span></span><br></pre></td></tr></table></figure><blockquote><p>取x=0点近的初值,看看结果如何（x3），显然x3不是方程的解，所以利用 fzero函数求解方程，初值的选取是很重要的。在使用MATLAB进行问题求解时， 需要对问题进行多角度分析，而不能机械地套用命令或程序。</p></blockquote><p>f(x)=x2-1=0的根。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(x) x.^<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">x=[];</span><br><span class="line">x0=<span class="number">-0.25</span>:<span class="number">0.001</span>:<span class="number">0.25</span>;</span><br><span class="line"><span class="keyword">for</span> x00=x0</span><br><span class="line">x=[x,fzero(f,x00)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot</span>(x0,x,<span class="string">&#x27;-o&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;初值&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;方程的根&#x27;</span>);</span><br><span class="line">axis([<span class="number">-0.25</span>,<span class="number">0.25</span>,<span class="number">-1</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827095806.png" alt=""></p><blockquote><p>结果表明，在零附近，相同的根所对应的初值范围并不连续，求得的根也并 非是离初值比较近的根。所以fzero函数执行的是一个数值搜索过程，搜索结 果依赖于函数特性和指定的初值。</p></blockquote><h4 id="非线性方程组的求解"><a class="header-anchor" href="#非线性方程组的求解">¶</a>非线性方程组的求解</h4><p>在MATLAB的最优化工具箱中提供了非线性方程组的求解函数fsolve，其调用 格式如下：</p><p><font color="purple">x=fsolve(filename,x0,option)</font></p><blockquote><p>其中，x为返回的近似解，filename是待求根方程左端的函数表达式，x0是初值， option用于设置优化工具箱的优化参数，可以调用optimset函数来完成。例如， Display参数设置为‘off’时不显示中间结果。</p></blockquote><p>利用fsolve函数解上例的方程。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x) x<span class="number">-1.</span>/x+<span class="number">5</span>;</span><br><span class="line">&gt;&gt; x1=fsolve(f,<span class="number">-5</span>,optimset(<span class="string">&#x27;Display&#x27;</span>,<span class="string">&#x27;off&#x27;</span>))</span><br><span class="line"></span><br><span class="line">x1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">-5.1926</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x2=fsolve(f,<span class="number">1</span>,optimset(<span class="string">&#x27;Display&#x27;</span>,<span class="string">&#x27;off&#x27;</span>))</span><br><span class="line"></span><br><span class="line">x2 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1926</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x3=fsolve(f,<span class="number">0.1</span>,optimset(<span class="string">&#x27;Display&#x27;</span>,<span class="string">&#x27;off&#x27;</span>))</span><br><span class="line"></span><br><span class="line">x3 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1926</span></span><br></pre></td></tr></table></figure><blockquote><p>当初值是0.1时，利用fzero函数无法得到正确结果，这里利用fsolve函数就能 得到正确结果，因为不同函数的实现方法不同，适用的场合也不同。总之，多 角度选择和分析是很有必要的。</p></blockquote><p>ex:求下列方程组在（1，1，1）附近的解并对结果进行验证。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827100124.png" alt="image-20200827100123591"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x) [<span class="built_in">sin</span>(x(<span class="number">1</span>))+x(<span class="number">2</span>)+x(<span class="number">3</span>)^<span class="number">2</span>*<span class="built_in">exp</span>(x(<span class="number">1</span>)),x(<span class="number">1</span>)+x(<span class="number">2</span>)+x(<span class="number">3</span>),x(<span class="number">1</span>)*x(<span class="number">2</span>)*x(<span class="number">3</span>)];</span><br><span class="line">&gt;&gt; f([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">4.5598</span>    <span class="number">3.0000</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;  x=fsolve(f,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],optimset(<span class="string">&#x27;Display&#x27;</span>,<span class="string">&#x27;off&#x27;</span>))</span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0224</span>   <span class="number">-0.0224</span>   <span class="number">-0.0000</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; f(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.0e-06</span> *</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.5931</span>    <span class="number">0.0000</span>    <span class="number">0.0006</span></span><br></pre></td></tr></table></figure><h3 id="函数极值的计算"><a class="header-anchor" href="#函数极值的计算">¶</a>函数极值的计算</h3><p>函数极值包括极大值和极小值，或者叫最大值和最小值。MATLAB只考虑最小值问题的计算，如果要求f(x)的最大值，可以通过求-f(x)的最小值来解 决。</p><h4 id="无约束最优化问题"><a class="header-anchor" href="#无约束最优化问题">¶</a>无约束最优化问题</h4><p>无约束最优化问题的一般描述为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827100448.png" alt="image-20200827100447542"></p><blockquote><p>其中，x=[x1,x2,····，xn的转置。</p></blockquote><p>求最小值的函数为：</p><p><font color="purple">[xmin,fmin]=fminbnd(filename,x1,x2,option)</font></p><p><font color="purple">[xmin,fmin]=fminsearch(filename,x0,option)</font></p><p><font color="purple">[xmin,fmin]=fminunc(filename,x0,option)</font></p><blockquote><p>其中，xmin表示极小值点，fmin表示最小值，filename是定义的目标函数。第一 个函数的输入变量xl、x2分别表示被研究区间的左、右边界。后两个函数的输入 变量x0是一个向量，表示极值点的初值。option为优化参数，可以通过optimset 函数来设置。</p></blockquote><p>ex:求函数 f(x)=x −(1/x) +5 ，在区间(-10，-1)和(1，10)上的最小值点。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; f=@(x) x<span class="number">-1.</span>/x+<span class="number">5</span>;</span><br><span class="line">&gt;&gt; [xmin,fmin]=fminbnd(f,<span class="number">-10</span>,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">xmin =</span><br><span class="line"></span><br><span class="line">   <span class="number">-9.9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmin =</span><br><span class="line"></span><br><span class="line">   <span class="number">-4.8999</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; [xmin,fmin]=fminbnd(f,<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">xmin =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmin =</span><br><span class="line"></span><br><span class="line">    <span class="number">5.0001</span></span><br></pre></td></tr></table></figure><h4 id="有约束最优化问题"><a class="header-anchor" href="#有约束最优化问题">¶</a>有约束最优化问题</h4><p>有约束最优化问题的一般描述为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827102223.png" alt="image-20200827102221098"></p><blockquote><p>其中，x=[x1,x2,····,xn]的转置。</p></blockquote><p>即求取一组x，使得目标函数f(x)为最小，且满足约束条件G(x)≤0。记号s.t. 是英文subject to的缩写，表示x要满足后面的约束条件。 约束条件可以进一步细化为：线性不等式约束、线性等式约束、非线性不等 式约束、非线性等式约束以及x的下界和上界。</p><p>求有约束条件下最小值的函数为：</p><p><font color="purple">[xmin,fmin]=fmincon(filename,x0,A,b,Aeq,beq,Lbnd,Ubnd,NonF,option)</font></p><blockquote><p>其中，xmin、fmin、filename、x0和option的含义与求最小值函数相同。其余 参数为约束条件，包括线性不等式约束、线性等式约束、x的下界和上界以及定 义非线性约束的函数。如果某个约束不存在，则用空矩阵来表示。</p></blockquote><p>ex:求解有约束最优化问题。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827104337.png" alt="image-20200827104127644"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(x) <span class="number">0.4</span>*x(<span class="number">2</span>)+x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>-x(<span class="number">1</span>)*x(<span class="number">2</span>)+<span class="number">1</span>/<span class="number">30</span>*x(<span class="number">1</span>)^<span class="number">3</span>;</span><br><span class="line">x0=[<span class="number">0.5</span>;<span class="number">0.5</span>];</span><br><span class="line">A=[<span class="number">-1</span>,<span class="number">-0.5</span>;<span class="number">-0.5</span>,<span class="number">-1</span>];</span><br><span class="line">b=[<span class="number">-0.4</span>;<span class="number">-0.5</span>];</span><br><span class="line">lb=[<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">option=optimset(<span class="string">&#x27;Display&#x27;</span>,<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">[xmin,fmin]=fmincon(f,x0,A,b,[],[],lb,[],[],option)</span><br><span class="line"></span><br><span class="line">xmin =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.3396</span></span><br><span class="line">    <span class="number">0.3302</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmin =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.2456</span></span><br></pre></td></tr></table></figure><h4 id="最小值问题应用实例"><a class="header-anchor" href="#最小值问题应用实例">¶</a>最小值问题应用实例</h4><p>ex:某公司有A、B、C、D、E 5个工厂，分别位于xy平面上的坐标点（10， 10），（30，50），（16.667，29），（0.555，29.888）和（22.2221， 49.988）处。设两点之间的距离表示在工厂之间开车的距离，以公里为单位。 公司计划在平面上某点处建造一座仓库，预期平均每周到A、B、C、D、E工厂 分别有10、18、20、14和25次送货。理想情况下，要使每周送货车的里程最 小，仓库应建在xy平面的什么位置？</p><p>假设仓库所选点的坐标为（x，y），则总里程表达式为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827104326.png" alt="image-20200827104325707"></p><p>所以原问题即求无约束条件下d(x,y)的最小值。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">10</span>,<span class="number">30</span>,<span class="number">16.667</span>,<span class="number">0.555</span>,<span class="number">22.2221</span>];</span><br><span class="line">b=[<span class="number">10</span>,<span class="number">50</span>,<span class="number">29</span>,<span class="number">29.888</span>,<span class="number">49.988</span>];</span><br><span class="line">c=[<span class="number">10</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">25</span>];</span><br><span class="line">f=@(x) sum(c.*<span class="built_in">sqrt</span>((x(<span class="number">1</span>)-a).^<span class="number">2</span>+(x(<span class="number">2</span>)-b).^<span class="number">2</span>));</span><br><span class="line">[xmin,fmin]=fminsearch(f,[<span class="number">15</span>,<span class="number">30</span>])</span><br><span class="line"></span><br><span class="line">xmin =</span><br><span class="line"></span><br><span class="line">   <span class="number">19.8143</span>   <span class="number">41.1247</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmin =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.3618e+03</span></span><br></pre></td></tr></table></figure><p>ex:在上例中，如果由于地域的限制，仓库必须建在曲线y=x²上，则它应该建在何处？</p><p>非线性约束的函数文件funny.m：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[c,h]</span>=<span class="title">funny</span><span class="params">(x)</span></span></span><br><span class="line">c=[];</span><br><span class="line">h=x(<span class="number">2</span>)-x(<span class="number">1</span>)^<span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a=[<span class="number">10</span>,<span class="number">30</span>,<span class="number">16.667</span>,<span class="number">0.555</span>,<span class="number">22.2221</span>];</span><br><span class="line">&gt;&gt; b=[<span class="number">10</span>,<span class="number">50</span>,<span class="number">29</span>,<span class="number">29.888</span>,<span class="number">49.988</span>];</span><br><span class="line">&gt;&gt; c=[<span class="number">10</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">25</span>];</span><br><span class="line">&gt;&gt; f=@(x) sum(c.*<span class="built_in">sqrt</span>((x(<span class="number">1</span>)-a).^<span class="number">2</span>+(x(<span class="number">2</span>)-b).^<span class="number">2</span>));</span><br><span class="line">&gt;&gt; [xmin,fmin]=fmincon(f,[<span class="number">15</span>,<span class="number">30</span>],[],[],[],[],[],[],<span class="string">&#x27;funny&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xmin =</span><br><span class="line"></span><br><span class="line">    <span class="number">5.9363</span>   <span class="number">35.2402</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmin =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.6676e+03</span></span><br></pre></td></tr></table></figure><h2 id="常微分方程数值求解"><a class="header-anchor" href="#常微分方程数值求解">¶</a>常微分方程数值求解</h2><ul><li>常微分方程数值求解的一般概念</li><li>常微分方程数值求解函数</li><li>刚性问题</li></ul><h3 id="常微分方程数值求解的一般概念"><a class="header-anchor" href="#常微分方程数值求解的一般概念">¶</a>常微分方程数值求解的一般概念</h3><p>求解常微分方程初值问题就是寻找函数y(t)使之满足如下方程：</p><p><font color="purple">y’=f(t,y)，t0≤t≤b</font></p><p><font color="purple">y(t0)=y0</font></p><p>所谓其数值解法，就是求y(t)在离散结点tn处的函数近似值yn的方法，yn≈y(xn)。 这些近似值称为常微分方程初值问题的数值解。相邻两个结点之间的距离称为步长。</p><ul><li>单步法:在计算y(n+1)时只用到前一步的y‰因此在有了初值之后就可以逐步往下计算，其代表是龙格-库塔（Runge-Kutta）法。</li><li>多步法:在计算y,时，除了用到前一步的值y,之外,还要用到y,p(p=1，2，…，k,k&gt;0）的值,即前面的k步。其代表就是亚当斯(Adams)法。</li></ul><h3 id="常微分方程数值求解函数"><a class="header-anchor" href="#常微分方程数值求解函数">¶</a>常微分方程数值求解函数</h3><p>MATLAB提供了多个求常微分方程初值问题数值解的函数，一般调用格式为：</p><p><font color="purple">[t,y]=solver(filename,tspan,y0,option)</font></p><blockquote><p>其中，t和y分别给出时间向量和相应的数值解。solver为求常微分方程数值解 的函数。filename是定义f(t，y)的函数名，该函数必须返回一个列向量。 tspan形式为[t0，tf]，表示求解区间。y0是初始状态向量。Option是可选参数， 用于设置求解属性，常用的属性包括相对误差值RelTol(默认值是10^-3)和绝对误 差值AbsTol(默认值是10^-6)。</p></blockquote><p>常微分方程数值求解函数的统一命名格式：</p><p><font color="purple">odennxx</font></p><ul><li>ode是Ordinary Differential Equation的缩写，是常微分方程的意思。</li><li>nn是数字，代表所用方法的阶数。例如，ode23采用2阶 龙格-库塔(Runge-Kutta)算法，用3阶公式做误差估计来调节步长，具有低等精度。ode45采用4阶龙格-库塔算法，用5阶公式做误差估计来调节步长，具有中等精度。</li><li>xx是字母，用于标注方法的专门特征。例如，ode15s、 ode23s中的 “s&quot;代表(Stiff) ，表示函数适用于刚性方程。</li></ul><p>求常微分方程数值解的函数</p><table><thead><tr><th>求解函数</th><th>采用方法</th><th>适用场合</th></tr></thead><tbody><tr><td>ode23</td><td>2阶或3阶Runge-Kutta算法，低精度</td><td>非刚性</td></tr><tr><td>ode45</td><td>4阶或5阶Runge-Kutta算法，中精度</td><td>非刚性</td></tr><tr><td>ode113</td><td>Adams算法，精度可到<code>10^-3～10^-6</code></td><td>非刚性，计算时间比ode45短</td></tr><tr><td>ode23t</td><td>梯形算法</td><td>适度刚性</td></tr><tr><td>ode15s</td><td>Gear’s反向数值微分算法，中精度</td><td>刚性</td></tr><tr><td>ode23s</td><td>2阶Rosebrock算法，低精度</td><td>刚性，当精度较低时，计算时间比ode15s短</td></tr><tr><td>ode23tb</td><td>梯形算法，低精度</td><td>刚性，当精度较低时，计算时间比ode15s短</td></tr></tbody></table><p>ex1:求解微分方程初值问题，并与精确解<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225523.png" alt="image-20200827225519670">进行比较。</p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225556.png" alt="image-20200827225555373" style="zoom:80%;" /><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(t,y) (y^<span class="number">2</span>-t<span class="number">-2</span>)/<span class="number">4</span>/(t+<span class="number">1</span>);</span><br><span class="line">[t,y]=ode23(f,[<span class="number">0</span>,<span class="number">10</span>],<span class="number">2</span>);</span><br><span class="line">y1=<span class="built_in">sqrt</span>(t+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">plot</span>(t,y,<span class="string">&#x27;b:&#x27;</span>,t,y1,<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225651.png" alt="image-20200827225650118"></p><p>ex2:已知一个二阶线性系统的微分方程为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225726.png" alt="image-20200827225725350"></p><p>取a=2，绘制系统的时间响应曲线和相平面图。 令x2=x，x1=x’，则得到系统的状态方程：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225745.png" alt="image-20200827225745024"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(t,x) [<span class="number">-2</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">1</span>]*[x(<span class="number">2</span>);x(<span class="number">1</span>)];</span><br><span class="line">[t,x]=ode45(f,[<span class="number">0</span>,<span class="number">20</span>],[<span class="number">1</span>,<span class="number">0</span>]);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);<span class="built_in">plot</span>(t,x(:,<span class="number">2</span>));</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);<span class="built_in">plot</span>(x(:,<span class="number">2</span>),x(:,<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200827225826.png" alt="image-20200827225824881"></p><h3 id="刚性问题"><a class="header-anchor" href="#刚性问题">¶</a>刚性问题</h3><p>有一类常微分方程，其解的分量有的变化很快，有的变化很慢，且相差悬殊， 这就是所谓的刚性问题(Stiff)。</p><p>对于刚性问题，数值解算法必须取很小步长才能获得满意的结果，导致计算 量会大大增加。解决刚性问题需要有专门方法。非刚性算法可以求解刚性问 题，只不过需要很长的计算时间。</p><p>ex3:假如点燃一个火柴，火焰球迅速增大直至某个临界体积，然后，维 持这一体积不变，原因是火焰球内部燃烧耗费的氧气和从球表面所获氧气 达到平衡。其简化模型如下：</p><p><font color="purple">y’=y^2-y ^3</font></p><p><font color="purple">y(0)=λ </font></p><p><font color="purple">0≤t≤2/λ</font></p><blockquote><p>其中，y(t)代表火焰球半径，初始半径是λ，它很小。分析λ的大小对方程求解过程的影响。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">lamda=<span class="number">0.01</span>;</span><br><span class="line">f=@(t,y) y^<span class="number">2</span>-y^<span class="number">3</span>;</span><br><span class="line">tic;[t,y]=ode45(f,[<span class="number">0</span>,<span class="number">2</span>/lamda],lamda);toc</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;ode45计算的点数&#x27;</span> num2str(<span class="built_in">length</span>(t))]);</span><br></pre></td></tr></table></figure><p><font color="purple">时间已过 2.946947 秒。</font></p><p><font color="purple">ode45计算的点数120565</font></p><p>这时计算时间明显加长，计算的点数剧增，表明这时常微分方程表现为刚性。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">lamda=<span class="number">1e-5</span>;</span><br><span class="line">f=@(t,y) y^<span class="number">2</span>-y^<span class="number">3</span>;</span><br><span class="line">tic;[t,y]=ode15s(f,[<span class="number">0</span>,<span class="number">2</span>/lamda],lamda);toc</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;ode15s计算的点数&#x27;</span> num2str(<span class="built_in">length</span>(t))]);</span><br></pre></td></tr></table></figure><p><font color="purple">时间已过 0.070974 秒。</font></p><p><font color="purple">ode15s计算的点数98</font></p><p>对于刚性问题，我们需要改变求解算法。我们选择以“s”结尾的函数，他们 专门用于求解刚性方程。计算时间大大缩短，计算的点数大大减少。</p><h2 id="常微分方程应用举例"><a class="header-anchor" href="#常微分方程应用举例">¶</a>常微分方程应用举例</h2><ul><li>Lotka-Volterra模型</li><li>Lotka-Volterra改进模型</li></ul><h3 id="Lotka-Volterra模型"><a class="header-anchor" href="#Lotka-Volterra模型">¶</a>Lotka-Volterra模型</h3><p>一阶非线性微分方程组：</p><p>dr / dt = 2r − λrƒ，r(0) = r0</p><p>dƒ / dt = −ƒ + λrƒ，ƒ(0)= ƒ0</p><blockquote><p>其中，t为时间， 𝐫 (𝒕) 为兔子数量，ƒ (𝒕) 为狐狸数量，𝝀为一个正常数。该系统解具有周 期性，其周期取决于初始条件。也就是说，对于任意数量的𝐫 (𝟎) 和ƒ (𝟎) ，总存在一个时间 𝐭 = 𝒕𝒑，使这两个种群的数量回归初始值。</p></blockquote><p>① 在𝒓𝟎 = 𝟑𝟎𝟎、ƒ𝟎 = 𝟏𝟓𝟎、𝝀 = 𝟎. 𝟎𝟏的条件下，求该系统的解，结果会发现𝒕𝒑接 近5。进一步绘制𝐫(𝐭)和ƒ(t)函数的曲线，以及以𝐫和ƒ为坐标轴画相平面图。</p><p>② 在𝒓𝟎 = 𝟏𝟓、ƒ𝟎 = 𝟐𝟐、𝝀 = 𝟎. 𝟎𝟏时求解并绘制图形，发现会发现𝒕𝒑接近6.62。</p><p>③ 在𝒓𝟎 = 𝟏𝟎𝟐、ƒ𝟎 = 𝟏𝟗𝟖、𝝀 = 𝟎. 𝟎𝟏时求解并绘制图形，并确定周期𝒕𝒑。</p><p>④ 点（𝒓𝟎，ƒ𝟎）=（𝟏 𝝀，𝟐 𝝀）是一个稳定平衡点。若以此为初值，那么种群数量 不发生变化。若初值接近此平衡点，那么数量不会发生大的变化。试作图验证。</p><h4 id="模型分析-v2"><a class="header-anchor" href="#模型分析-v2">¶</a>模型分析</h4><p>x1(t)—兔子在t时刻的数量 x2(t)—狐狸在t时刻的数量</p><p>r1—兔子独立生存时的增长率 r2—狐狸独自存在时的死亡率</p><p>λ 1—狐狸掠取兔子的能力 λ 2—兔子对狐狸的供养能力</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153627.png" alt="image-20200829152315097"></p><p>这里假设r1= 2，r2=1，λ 1= λ 2= 0.01，即系统模型如下：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153623.png" alt="image-20200829152720561"></p><p>第①问：兔子数量初始值x1(0)=300，狐狸数量初始值x2(0)=150。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">30</span>],[<span class="number">300</span>,<span class="number">150</span>])</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);<span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),<span class="string">&#x27;-&#x27;</span>,t,x(:,<span class="number">2</span>),<span class="string">&#x27;-*&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)&#x27;</span>,<span class="string">&#x27;x2(t)&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;物种数量&#x27;</span>);</span><br><span class="line">grid on</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);<span class="built_in">plot</span>(x(:,<span class="number">1</span>),x(:,<span class="number">2</span>))</span><br><span class="line">grid on </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153618.png" alt="image-20200829153123062"></p><p>我们可以看到，兔子和狐狸两者相互制约，当狐狸逐渐增多时，兔子逐渐减少，当狐狸增 加到一定数量时，由于种群内部竞争激烈，又导致其数量减少，从而兔子天敌减少，进而 导致兔子数量增加，当兔子增加到一定数量时，种间竞争加剧，从而又导致兔子数量减少， 如此循环，相互制约发展。</p><p>第②问：兔子初始值x1(0)=15，狐狸初始值x2(0)=22。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153609.png" alt="image-20200829153355658"></p><p>第③问：兔子初始值x1(0)=102，狐狸初始值x2(0)=198。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153604.png" alt="image-20200829153439155"></p><p>第④问：验证（1/λ ，2/λ ）是稳定平衡点。</p><ul><li>取λ =0.01， 所以稳定平衡点（1/λ ，2/λ ）即是（100，200），以此点作 为初值时，画出其图像。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">30</span>],[<span class="number">100</span>,<span class="number">200</span>]);</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),<span class="string">&#x27;-o&#x27;</span>,t,x(:,<span class="number">2</span>),<span class="string">&#x27;-*&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829153550.png" alt="image-20200829153548985"></p><ul><li>当将初始值变为（98,195）时，即向下十分接近平衡点，画出其图像。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">30</span>],[<span class="number">98</span>,<span class="number">195</span>]);</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),<span class="string">&#x27;-o&#x27;</span>,t,x(:,<span class="number">2</span>),<span class="string">&#x27;-*&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154248.png" alt="image-20200829153745712"></p><blockquote><p>两者图像没有交点，兔子和狐狸的数量分别以各自的平衡点进行周期性波动， 但是两者的数量变化不是很大。</p></blockquote><ul><li>当将初始值变为（70,150）时（向下偏离平衡点比较远时），画出其图像。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">150</span>]);</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),<span class="string">&#x27;-o&#x27;</span>,t,x(:,<span class="number">2</span>),<span class="string">&#x27;-*&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154243.png" alt="image-20200829153845856"></p><blockquote><p>可以发现兔子和狐狸的数量变化比较剧烈，但是依然成周期性变化。</p></blockquote><ul><li>当将初始值变为（900,1600）时（向上偏离平衡点十分远时），画出其图像。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">500</span>],[<span class="number">900</span>,<span class="number">1600</span>]);</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),t,x(:,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154237.png" alt="image-20200829153952626"></p><blockquote><p>可以发现，此时兔子和狐狸的数量变化相当的剧烈，但是依然存在周期。</p></blockquote><h3 id="Lotka-Volterra改进模型"><a class="header-anchor" href="#Lotka-Volterra改进模型">¶</a>Lotka-Volterra改进模型</h3><p>修改后的方程：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154232.png" alt="image-20200829154048156"></p><blockquote><p>其中，t为时间； 𝐫 𝒕 为兔子数量；𝒇 𝒕 为狐狸数量；𝝀为一个正常数，R也是 一个正常数。方程在𝒓𝟎 = 𝟑𝟎𝟎、ƒ𝟎 = 𝟏𝟓𝟎初始条件下的50个时间单位上求解 并绘制图形。</p></blockquote><p>① 原模型下，狐狸数量和兔子数量的时间函数曲线。<br>② 改进模型下，狐狸数量和兔子数量的时间函数曲线。<br>③ 原模型下，狐狸数量相对兔子数量的关系曲线。<br>④ 改进模型下，狐狸数量相对兔子数量的关系曲线。</p><p>第①问：在原模型下，绘制狐狸和兔子数量的时间函数曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),t,x(:,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;原模型下，狐狸和兔子数量的函数曲线&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154224.png" alt="image-20200829154223112"></p><p>第②问：在改进模型下，狐狸和兔子数量的时间函数曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [<span class="number">2</span>*x(<span class="number">1</span>)*(<span class="number">1</span>-x(<span class="number">1</span>)/<span class="number">400</span><span class="number">-0.005</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">50</span>],[<span class="number">300</span>,<span class="number">150</span>]);</span><br><span class="line"><span class="built_in">plot</span>(t,x(:,<span class="number">1</span>),t,x(:,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;x1(t)-兔子&#x27;</span>,<span class="string">&#x27;x2(t)-狐狸&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;物种数量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;改进模型下，狐狸和兔子数量的函数曲线&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154340.png" alt="image-20200829154339459"></p><p>通过对比发现，原模型无论经历多长时间，狐狸和兔子的数量总是在自己的平 衡点之间波动；而改进以后的模型，虽然在先前一段时间有较大的波动，但随 着时间的推移，它们的波动越来越小，在经历足够长的时间后，狐狸和兔子的 数量分别达到稳定平衡，这更加接近自然界中的实际情况。</p><p>第③问：在原模型下，绘制狐狸数量相对于兔子数量的关系曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [x(<span class="number">1</span>)*(<span class="number">2</span><span class="number">-0.01</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">50</span>],[<span class="number">300</span>,<span class="number">150</span>]);</span><br><span class="line"><span class="built_in">plot</span>(x(:,<span class="number">1</span>),x(:,<span class="number">2</span>));</span><br><span class="line">xlabel(<span class="string">&#x27;兔子数量&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;狐狸数量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;原模型下，狐狸数量相对于兔子数量的关系曲线&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154523.png" alt="image-20200829154431392"></p><p>第④问：在改进模型下，狐狸数量相对于兔子数量的关系曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rabbitFox=@(t,x) [<span class="number">2</span>*x(<span class="number">1</span>)*(<span class="number">1</span>-x(<span class="number">1</span>)/<span class="number">400</span><span class="number">-0.005</span>*x(<span class="number">2</span>));...</span><br><span class="line"> x(<span class="number">2</span>)*(<span class="number">-1</span>+<span class="number">0.01</span>*x(<span class="number">1</span>))];</span><br><span class="line">[t,x]=ode45(rabbitFox,[<span class="number">0</span>,<span class="number">50</span>],[<span class="number">300</span>,<span class="number">150</span>]);</span><br><span class="line"><span class="built_in">plot</span>(x(:,<span class="number">1</span>),x(:,<span class="number">2</span>));</span><br><span class="line">xlabel(<span class="string">&#x27;兔子数量&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;狐狸数量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;改进模型下，狐狸数量相对于兔子数量的关系曲线&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829154516.png" alt="image-20200829154515140"></p><p>模型的进一步改进:</p><ul><li>考虑狐狸的环境容纳量</li><li>考虑到兔子其他天敌和狐狸天敌的影响</li><li>考虑自然灾害、人为捕捉等因素</li></ul><h1>MATLAB符号计算</h1><h2 id="符号对象"><a class="header-anchor" href="#符号对象">¶</a>符号对象</h2><ul><li>符号对象的建立</li><li>符号对象的运算</li><li>符号矩阵</li></ul><h3 id="符号对象的建立"><a class="header-anchor" href="#符号对象的建立">¶</a>符号对象的建立</h3><h4 id="sym函数"><a class="header-anchor" href="#sym函数">¶</a>sym函数</h4><p>sym函数用于建立单个符号对象，其常用调用格式为：</p><p>符号对象名=sym(A)</p><p>将由A来建立符号对象。其中，A可以是一个数值常量、数值矩阵或数值表达式（<font color="red">不加单引号</font>），此时符号对象为一 个<font color="red">符号常量</font>；A也可以是一个变量名（<font color="red">加单引号</font>），这时 符号对象为一个<font color="red">符号变量</font>。</p><p>请对比以下程序：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t=sym(<span class="number">2</span>);</span><br><span class="line">&gt;&gt; t+<span class="number">1</span>/<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"><span class="number">5</span>/<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">&gt;&gt; <span class="built_in">sin</span>(sym(<span class="built_in">pi</span>/<span class="number">3</span>))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>^(<span class="number">1</span>/<span class="number">2</span>)/<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">&gt;&gt; <span class="built_in">sin</span>(<span class="built_in">pi</span>/<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.8660</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a=<span class="number">5</span>;</span><br><span class="line">&gt;&gt; b=<span class="number">-8</span>;</span><br><span class="line">&gt;&gt; x=sym(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&gt;&gt; y=sym(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&gt;&gt; w=(a+b)*(a-b)</span><br><span class="line"></span><br><span class="line">w =</span><br><span class="line"></span><br><span class="line">   <span class="number">-39</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; s=(x+y)*(x-y)</span><br><span class="line"> </span><br><span class="line">s =</span><br><span class="line"> </span><br><span class="line">(a + b)*(a - b)</span><br><span class="line"> </span><br><span class="line">&gt;&gt; eval(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">-39</span></span><br></pre></td></tr></table></figure><p>由以上的例子我们可以看出：</p><ul><li>符号计算的结果是一个精确的数学表达式。</li><li>数值计算的结果是一个数值。</li></ul><h4 id="syms命令"><a class="header-anchor" href="#syms命令">¶</a>syms命令</h4><p>syms命令可以一次定义多个符号变量，其一般调用格式如下：</p><p>syms 符号变量名1 符号变量名2 … 符号变量名n</p><blockquote><p>其中，变量名不能加单引号，相互之间用空格隔开。</p></blockquote><p>例如，要同时定义四个符号变量a、b、c、d，则可以输入如下 命令：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a b c d</span><br></pre></td></tr></table></figure><h3 id="符号对象的运算"><a class="header-anchor" href="#符号对象的运算">¶</a>符号对象的运算</h3><h4 id="四则运算"><a class="header-anchor" href="#四则运算">¶</a>四则运算</h4><p>符号表达式的四则运算与数值运算一样，用+、-、*、/、^ 运 算符实现，其运算结果依然是一个符号表达式。例如：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x;</span><br><span class="line">&gt;&gt; f=<span class="number">2</span>*x^<span class="number">2</span>+<span class="number">3</span>*x<span class="number">-5</span>;</span><br><span class="line">&gt;&gt; g=x^<span class="number">2</span>-x+<span class="number">7</span>;</span><br><span class="line">&gt;&gt; f+g</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>*x^<span class="number">2</span> + <span class="number">2</span>*x + <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="关系运算-v2"><a class="header-anchor" href="#关系运算-v2">¶</a>关系运算</h4><ul><li>6种关系运算符:&lt;、&lt;=、&gt;、&gt;=、=、一=。</li><li>对应的6个函数: lt()、le()、gt()、ge()、eq()、ne()。</li></ul><p>若参与运算的是<font color="red">符号表达式</font>，其结果是一个<font color="red">符号关系表达式</font>；若参与运算的是<font color="red">符号矩阵</font>，其结果是<font color="red">由符号关系表达式组 成的矩阵</font>。</p><p>在进行符号对象的运算前，可用<font color="red">assume函数</font>对符号对象设置值域， 函数调用格式为：</p><p>assume(condition)</p><p>assume(expr,set)</p><blockquote><p>第一种格式指定变量满足条件condition，第二种格式指定表达式 expr属于集合set。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x;</span><br><span class="line">&gt;&gt; assume(x&lt;<span class="number">0</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">abs</span>(x)==x</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">-x==x</span><br><span class="line"><span class="comment">%因为x&lt;0，所以abs(x)的值为-x。</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; assume(x,<span class="string">&#x27;positive&#x27;</span>);</span><br><span class="line">&gt;&gt; <span class="built_in">abs</span>(x)==x</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">x==x</span><br><span class="line"><span class="comment">%因为x为正数，所以abs(x)的值为x。</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算-v2"><a class="header-anchor" href="#逻辑运算-v2">¶</a>逻辑运算</h4><ul><li>3种逻辑运算符:&amp;（与）、│(或）和～（非）。</li><li>4个逻辑运算函数: and(a, b)、or(a,b)、not(a)和xor(a, b)。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829171020.png" alt="image-20200829160458763"></p><h4 id="因式分解与展开运算"><a class="header-anchor" href="#因式分解与展开运算">¶</a>因式分解与展开运算</h4><p>MATLAB提供了符号表达式的因式分解与展开的函数，函数的调用格式为：</p><p>①factor(s):对符号表达式s分解因式。<br>②expand(s):对符号表达式s进行展开。<br>③collect(s):对符号表达式s合并同类项。<br>④collect(s,v):对符号表达式s按变量v合并同类项。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a b;</span><br><span class="line">&gt;&gt; s=a^<span class="number">3</span>-b^<span class="number">3</span>;</span><br><span class="line">&gt;&gt; <span class="built_in">factor</span>(s)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">[ a-b, a^<span class="number">2</span> + a*b + b^<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">factor</span>(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>梅森素数的验证问题</p><p>所谓梅森数，是指形如2 p -1的一类整数，其中指数p是素数。将梅森数记为Mp。 如果梅森数是素数，就称为梅森素数。请验证M19 、 M23 、 M29 、 M31是否 为梅森素数。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms p;</span><br><span class="line">&gt;&gt; m=<span class="number">2</span>^p<span class="number">-1</span>;</span><br><span class="line">&gt;&gt; p=<span class="number">19</span>;</span><br><span class="line">&gt;&gt; m19=eval(m)</span><br><span class="line"></span><br><span class="line">m19 =</span><br><span class="line"></span><br><span class="line">      <span class="number">524287</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">factor</span>(m19)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">      <span class="number">524287</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; p=<span class="number">23</span>;</span><br><span class="line">&gt;&gt; m23=eval(m)</span><br><span class="line"></span><br><span class="line">m23 =</span><br><span class="line"></span><br><span class="line">     <span class="number">8388607</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">factor</span>(m23)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">          <span class="number">47</span>      <span class="number">178481</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; p=<span class="number">29</span>;</span><br><span class="line">&gt;&gt; m29=eval(m)</span><br><span class="line"></span><br><span class="line">m29 =</span><br><span class="line"></span><br><span class="line">   <span class="number">536870911</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">factor</span>(m29)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">         <span class="number">233</span>        <span class="number">1103</span>        <span class="number">2089</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; p=<span class="number">31</span>;</span><br><span class="line">&gt;&gt; m31=eval(m)</span><br><span class="line"></span><br><span class="line">m31 =</span><br><span class="line"></span><br><span class="line">   <span class="number">2.1475e+09</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">factor</span>(m31)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">2.1475e+09</span></span><br></pre></td></tr></table></figure><h4 id="其他运算"><a class="header-anchor" href="#其他运算">¶</a>其他运算</h4><p>① 提取有理分式的分子分母：[n,d]=numden(s)。<br>② 提取符号表达式的系数：c=coeffs(s,x)。<br>③ 符号表达式化简：simplify(s)。<br>④ 符号多项式与多项式系数向量之间的转换：</p><ul><li>符号多项式转换为多项式系数向量: p=sym2poly(s)。</li><li>多项式系数向量转换为符号多项式:s=poly2sym§。</li></ul><p>ex1:求方程ax^2+bx+c=0的根。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a b c x;</span><br><span class="line">&gt;&gt; f=a*x^<span class="number">2</span>+b*x+c</span><br><span class="line"> </span><br><span class="line">f =</span><br><span class="line"> </span><br><span class="line">a*x^<span class="number">2</span> + b*x + c</span><br><span class="line"> </span><br><span class="line">&gt;&gt; g=coeffs(f,x)</span><br><span class="line"> </span><br><span class="line">g =</span><br><span class="line"> </span><br><span class="line">[ c, b, a]</span><br><span class="line"> </span><br><span class="line">&gt;&gt; g=g(<span class="keyword">end</span>:<span class="number">-1</span>:<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">g =</span><br><span class="line"> </span><br><span class="line">[ a, b, c]</span><br><span class="line"> </span><br><span class="line">&gt;&gt; roots(g)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"> -(b + (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> -(b - (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br></pre></td></tr></table></figure><h4 id="符号运算中变量的确定"><a class="header-anchor" href="#符号运算中变量的确定">¶</a>符号运算中变量的确定</h4><p>① 如果没有明确指定自变量，MATLAB将按以下原则确定主变量并对其进行相应运算:</p><ul><li>寻找除i、j之外，在字母顺序上最接近x的小写字母。</li><li>若表达式中有两个符号变量与x的距离相等，则ASCII码大者优先。</li></ul><p>② symvar()函数可以用于查找一个符号表达式中的符号变量，函数的调用格式为：</p><p>symvar(s,n)</p><p>函数返回符号表达式s中的n个符号变量。因此，可以用<font color="red">symvar(s,1)</font>查找表达式s的主变量。</p><h3 id="符号矩阵"><a class="header-anchor" href="#符号矩阵">¶</a>符号矩阵</h3><p>符号矩阵也是一种符号表达式，所以符号表达式运算都可以在矩阵意 义下进行。</p><div class="note success">            <p>注意：这些函数作用于符号矩阵时，是分别作用于矩阵的每一个元素。</p>          </div><p>ex1：建立符号矩阵并化简。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829170952.png" alt="image-20200829170951954"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a b x y alp;</span><br><span class="line">&gt;&gt; m=[a^<span class="number">3</span>-b^<span class="number">3</span>,<span class="built_in">sin</span>(alp)^<span class="number">2</span>+<span class="built_in">cos</span>(alp)^<span class="number">2</span>;(<span class="number">15</span>*x*y<span class="number">-3</span>*x^<span class="number">2</span>)/(x<span class="number">-5</span>*y),<span class="number">78</span>]</span><br><span class="line">m =</span><br><span class="line">[ a^<span class="number">3</span> - b^<span class="number">3</span>,<span class="built_in">cos</span>(alp)^<span class="number">2</span> + <span class="built_in">sin</span>(alp)^<span class="number">2</span>]</span><br><span class="line">[(- <span class="number">3</span>*x^<span class="number">2</span> + <span class="number">15</span>*y*x)/(x - <span class="number">5</span>*y), <span class="number">78</span>]</span><br><span class="line">&gt;&gt; simplify(m)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">[ a^<span class="number">3</span> - b^<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[ <span class="number">-3</span>*x, <span class="number">78</span>]</span><br></pre></td></tr></table></figure><p>ex2:当λ取何值时，以下齐次线性方程组有非零解。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829171105.png" alt="image-20200829171104371"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms lamda;</span><br><span class="line">A=[<span class="number">1</span>-lamda,<span class="number">-2</span>,<span class="number">4</span>;<span class="number">2</span>,<span class="number">3</span>-lamda,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>-lamda];</span><br><span class="line">D=det(A);</span><br><span class="line"><span class="built_in">factor</span>(D)</span><br><span class="line"></span><br><span class="line"><span class="comment">%程序运行结果为：</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">[<span class="number">-1</span>, lamda, lamda - <span class="number">2</span>, lamda - <span class="number">3</span>]</span><br><span class="line"><span class="comment">%从而得知，当λ=0、λ=2或λ=3时，原方程组有非零解。</span></span><br></pre></td></tr></table></figure><blockquote><p>对于齐次线性方程组Ax=0，当 rank(A)&lt;n或|A|=0时，齐次线性方程组有非零解。</p></blockquote><h2 id="符号微积分"><a class="header-anchor" href="#符号微积分">¶</a>符号微积分</h2><ul><li>符号函数的极限</li><li>符号函数的导数</li><li>符号函数的积分</li></ul><h3 id="符号函数的极限"><a class="header-anchor" href="#符号函数的极限">¶</a>符号函数的极限</h3><ul><li>求符号函数极限的命令为limit，其调用格式为：</li></ul><p>limit(f,x,a)</p><p>即求函数f关于变量x在a点的极限。</p><p>limit函数的另一种功能是求单边极限，其调用格式为：</p><p>limit(f,x,a,‘right’)</p><p>limit(f,x,a,‘left’)</p><p>ex:求下列极限。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829171745.png" alt="image-20200829171743840"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a m x n;</span><br><span class="line">&gt;&gt; f=(x^(<span class="number">1</span>/m)-a^(<span class="number">1</span>/m))/(x-a);</span><br><span class="line">&gt;&gt; limit(f,x,a)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">a^(<span class="number">1</span>/m - <span class="number">1</span>)/m</span><br><span class="line">&gt;&gt; g=(<span class="number">1</span>+<span class="number">1</span>/n)^n;</span><br><span class="line">&gt;&gt; limit(g,n,<span class="built_in">inf</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="built_in">exp</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">%即自然常数e。</span></span><br></pre></td></tr></table></figure><h3 id="符号函数的导数"><a class="header-anchor" href="#符号函数的导数">¶</a>符号函数的导数</h3><p>MATLAB中的求导函数为：</p><p>diff(f,x,n)</p><p>即求函数f关于变量x的n阶导数。参数x的用法同求极限函数limit，可以缺省，默认值与limit相同，n的默认值是1。</p><p>ex:求下列函数的导数。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829171930.png" alt="image-20200829171929798"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%（1）</span></span><br><span class="line">&gt;&gt; syms x y z;</span><br><span class="line">&gt;&gt; f=<span class="built_in">sqrt</span>(<span class="number">1</span>+<span class="built_in">exp</span>(x));</span><br><span class="line">&gt;&gt; diff(f)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="built_in">exp</span>(x)/(<span class="number">2</span>*(<span class="built_in">exp</span>(x) + <span class="number">1</span>)^(<span class="number">1</span>/<span class="number">2</span>)) </span><br><span class="line"><span class="comment">%(2)</span></span><br><span class="line">&gt;&gt; g=x*<span class="built_in">exp</span>(y)/y^<span class="number">2</span>;</span><br><span class="line">&gt;&gt; diff(g,x)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="built_in">exp</span>(y)/y^<span class="number">2</span></span><br><span class="line">&gt;&gt; diff(g,y)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">(x*<span class="built_in">exp</span>(y))/y^<span class="number">2</span> - (<span class="number">2</span>*x*<span class="built_in">exp</span>(y))/y^<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="符号函数的积分"><a class="header-anchor" href="#符号函数的积分">¶</a>符号函数的积分</h3><h4 id="不定积分"><a class="header-anchor" href="#不定积分">¶</a>不定积分</h4><p>在MATLAB中，求不定积分的函数是int()，其常用 的调用格式为：</p><p>int(f,x)</p><p>即求函数f对变量x的不定积分。</p><p>ex:求下列不定积分。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/image-20200829172130927.png" alt="image-20200829172130927"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x t;</span><br><span class="line">&gt;&gt; f=(<span class="number">3</span>-x^<span class="number">2</span>)^<span class="number">3</span>;</span><br><span class="line">&gt;&gt; int(f)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">- x^<span class="number">7</span>/<span class="number">7</span> + (<span class="number">9</span>*x^<span class="number">5</span>)/<span class="number">5</span> - <span class="number">9</span>*x^<span class="number">3</span> + <span class="number">27</span>*x</span><br><span class="line">&gt;&gt; g=<span class="number">5</span>*x*t/(<span class="number">1</span>+x^<span class="number">2</span>);</span><br><span class="line">&gt;&gt; int(g,t)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">(<span class="number">5</span>*t^<span class="number">2</span>*x)/(<span class="number">2</span>*(x^<span class="number">2</span> + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h4 id="定积分"><a class="header-anchor" href="#定积分">¶</a>定积分</h4><p>在MATLAB中，定积分的计算也使用int()函数，但调用格式有区别：</p><p>int(f,x,a,b)</p><blockquote><p>其中，a、b分别表示定积分的下限和上限。</p></blockquote><ul><li>当函数f关于变量x在闭区间[a, b]可积时，函数返回一个定积分结果。</li><li>当a、b中有一个是inf时，函数返回一个广义积分。</li><li>当a、b中有一个符号表达式时，函数返回一个符号函数。</li></ul><p>ex:求下列定积分。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829172312.png" alt="image-20200829172311087"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x t;</span><br><span class="line">&gt;&gt; int(<span class="built_in">abs</span>(<span class="number">1</span>-x),<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line">&gt;&gt; int(<span class="number">1</span>/(<span class="number">1</span>+x^<span class="number">2</span>),-<span class="built_in">inf</span>,<span class="built_in">inf</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="built_in">pi</span></span><br><span class="line">&gt;&gt; int(<span class="number">4</span>*x/t,t,<span class="number">2</span>,<span class="built_in">sin</span>(x))</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">4</span>*x*(<span class="built_in">log</span>(<span class="built_in">sin</span>(x)) - <span class="built_in">log</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="级数"><a class="header-anchor" href="#级数">¶</a>级数</h2><ul><li>级数求和</li><li>泰勒级数</li></ul><h3 id="级数求和"><a class="header-anchor" href="#级数求和">¶</a>级数求和</h3><p>求无穷级数的和需要符号表达式求和函数symsum()，其调 用格式为：</p><p>symsum(s,v,n,m)</p><blockquote><p>其中，s表示一个级数的通项，是一个符号表达式。v是求 和变量，v省略时使用系统的默认变量。n和m是求和变量v 的初值和末值。</p></blockquote><p>ex:求下列级数之和。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829172515.png" alt="image-20200829172514352"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms n;</span><br><span class="line">&gt;&gt; s1=symsum(n^<span class="number">2</span>,<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">s1 =</span><br><span class="line"><span class="number">338350</span></span><br><span class="line">&gt;&gt; s2=symsum((<span class="number">-1</span>)^(n<span class="number">-1</span>)/n,<span class="number">1</span>,<span class="built_in">inf</span>)</span><br><span class="line">s2=</span><br><span class="line"><span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">&gt;&gt; s3=symsum((<span class="number">-1</span>)^(n<span class="number">-1</span>)/(<span class="number">2</span>*n<span class="number">-1</span>),n,<span class="number">1</span>,<span class="built_in">inf</span>)</span><br><span class="line">s3 =</span><br><span class="line">hypergeom([<span class="number">-1</span>/<span class="number">2</span>, <span class="number">1</span>], <span class="number">1</span>/<span class="number">2</span>, <span class="number">-1</span>)–<span class="number">1</span></span><br><span class="line">&gt;&gt; hypergeom([<span class="number">-1</span>/<span class="number">2</span>, <span class="number">1</span>], <span class="number">1</span>/<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">%超几何函数</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">1.7854</span></span><br><span class="line">&gt;&gt; eval(s3)*<span class="number">4</span></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line"><span class="number">3.141592653589792</span></span><br><span class="line"><span class="comment">%即原级数之和为π/4。</span></span><br></pre></td></tr></table></figure><p>银行利率的计算问题</p><p>假设某人在银行存款50000元，年利率为4.5%，按复利计息。</p><p>①若半年期计息一次，请问一年后总金额是多少？</p><p>②若每季度计息一次，请问一年后总金额是多少？</p><p>③若每月计息一次，请问一年后总金额是多少？</p><p>④若计息时间无限短，即计息期数趋于无穷，则一年后总金额是多少？</p><p><font color='purple'>思考：期数无限多，总金额是否也会无限增长？</font></p><p><font color='purple'>问题分析：</font></p><p>假设存款（初始总金额）为p，年利率为r，计息期数为k。<br>第一期后总金额为<code>p*(1+r/k)</code>。<br>第二期后总金额为<code>p*(1+r/k)^2</code>。<br>第三期后总金额为<code>p*(1+r/k)^3</code>。<br>依此类推，第k期后总金额为<code>p*(1+r/k)^k</code>。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms k r;</span><br><span class="line">&gt;&gt; p2=symsum(<span class="number">50000</span>*(<span class="number">1</span>+<span class="number">0.045</span>/k)^k,k,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&gt;&gt; eval(p2)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">5.2275e+04</span></span><br><span class="line">&gt;&gt; p4=symsum(<span class="number">50000</span>*(<span class="number">1</span>+<span class="number">0.045</span>/k)^k,k,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">&gt;&gt; eval(p4)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">5.2288e+04</span></span><br><span class="line">&gt;&gt; p12=symsum(<span class="number">50000</span>*(<span class="number">1</span>+<span class="number">0.045</span>/k)^k,k,<span class="number">12</span>,<span class="number">12</span>);</span><br><span class="line">&gt;&gt; eval(p12)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">5.2297e+04</span></span><br><span class="line">&gt;&gt; limit((<span class="number">1</span>+r/k)^k,k,<span class="built_in">inf</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="built_in">exp</span>(r)</span><br><span class="line">&gt;&gt; <span class="number">50000</span>*<span class="built_in">exp</span>(<span class="number">0.045</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">5.2301e+04</span></span><br></pre></td></tr></table></figure><p>所以，即使是无数次计息，只要年利率确定， 总金额也不会无限增长，它收敛于pe^r 。</p><blockquote><p>注意：在符号计算中，因为小数都表示为有理分数的形式，随着计算次数的 增加，容易导致分子或分母出现极大整数从而无法计算的情况。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms n;</span><br><span class="line">&gt;&gt; s=symsum(<span class="number">1</span>/n^<span class="number">2</span>,n,<span class="number">1</span>,<span class="built_in">inf</span>)</span><br><span class="line">s =</span><br><span class="line"><span class="built_in">pi</span>^<span class="number">2</span>/<span class="number">6</span></span><br><span class="line">&gt;&gt; s1=symsum(<span class="number">1</span>/n^<span class="number">2</span>,n,<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">s1 =</span><br><span class="line"><span class="number">40989667509417020364501093692502</span> …</span><br><span class="line">&gt;&gt; eval(s1)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">NaN</span><br></pre></td></tr></table></figure><h3 id="泰勒级数"><a class="header-anchor" href="#泰勒级数">¶</a>泰勒级数</h3><p>MATLAB提供了taylor()函数将函数展开为幂级数，其调用格式为：</p><p>taylor(f,v,a,Name,Value)</p><p>该函数将函数f按变量v在a点展开为泰勒级数，v的默认值 与diff函数相同，a的默认值是0。 Name和Value为选项设置，经常成对使用，前者为选项名，后者为该选项的值。</p><p>Name有3个可取字符串：</p><p>① ‘ExpansionPoint’：指定展开点，对应值可以是标量或向量。 未设置时，展开点为0。</p><p>② ‘Order’：指定截断参数，对应值为一个正整数。未设置时， 截断参数为6，即展开式的最高阶为5。</p><p>③ ‘OrderMode’：指定展开式采用绝对阶或相对阶，对应值为 ‘Absolute’ 或’Relative’。 未设置时取’Absolute’。</p><p>ex:求函数f在x=1处的5阶泰勒级数展开式。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829180353.png" alt="image-20200829180352257"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x;</span><br><span class="line">&gt;&gt; f=(<span class="number">1</span>+x+x^<span class="number">2</span>)/(<span class="number">1</span>-x+x^<span class="number">2</span>);</span><br><span class="line">&gt;&gt; taylor(f,x,<span class="number">1</span>,<span class="string">&#x27;Order&#x27;</span>,<span class="number">6</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>*(x - <span class="number">1</span>)^<span class="number">3</span> - <span class="number">2</span>*(x - <span class="number">1</span>)^<span class="number">2</span> - <span class="number">2</span>*(x - <span class="number">1</span>)^<span class="number">5</span> + <span class="number">3</span></span><br><span class="line"> </span><br><span class="line">&gt;&gt; expand(<span class="built_in">ans</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line">- <span class="number">2</span>*x^<span class="number">5</span> + <span class="number">10</span>*x^<span class="number">4</span> - <span class="number">18</span>*x^<span class="number">3</span> + <span class="number">12</span>*x^<span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>复杂函数的计算方法问题</p><p>除了四则运算以外，计算机对其他复杂函数怎么计算？ 是否存在一种方法，使得计算机只需要通过四则运算， 就能计算其他复杂函数？</p><p><font color='purple'>泰勒级数展开就是一种非常好的解决方案。</font></p><p>ex:利用泰勒展开式计算三角函数的值。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x;</span><br><span class="line">&gt;&gt; f=taylor(<span class="built_in">cos</span>(x),x,<span class="built_in">pi</span>)</span><br><span class="line"> </span><br><span class="line">f =</span><br><span class="line"> </span><br><span class="line">(x - <span class="built_in">pi</span>)^<span class="number">2</span>/<span class="number">2</span> - (x - <span class="built_in">pi</span>)^<span class="number">4</span>/<span class="number">24</span> - <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">&gt;&gt; x=<span class="number">3</span>;</span><br><span class="line">&gt;&gt; eval(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.9900</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">cos</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">-0.9900</span></span><br></pre></td></tr></table></figure><blockquote><p>通过泰勒级数展开的方法，成功地将三角函数的计算转换成了四则运算。</p></blockquote><h2 id="符号方程求解"><a class="header-anchor" href="#符号方程求解">¶</a>符号方程求解</h2><ul><li>代数方程符号求解</li><li>常微分方程符号求解</li></ul><h3 id="代数方程符号求解"><a class="header-anchor" href="#代数方程符号求解">¶</a>代数方程符号求解</h3><p>在MATLAB中，求解用符号表达式表示的代数方程可由函数 solve()实现，其调用格式为：</p><p>① solve(s)：求解符号表达式s的代数方程，求解变量为 默认变量。<br>② solve(s,v)：求解符号表达式s的代数方程，求解变量 为v。<br>③ solve(s1,s2,…,sn,v1,v2,…,vn)：求解符号表达式 s1，s2，…，sn组成的代数方程组，求解变量分别为v1， v2，…，vn。</p><p>ex:解方程 <code>a*x^2+b*x+c=0</code>。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x y a b c;</span><br><span class="line"><span class="comment">%①</span></span><br><span class="line">&gt;&gt; solve(a*x^<span class="number">2</span>+b*x+c==<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"> -(b + (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> -(b - (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> <span class="comment">%②</span></span><br><span class="line">&gt;&gt; f=a*x^<span class="number">2</span>+b*x+c==<span class="number">0</span>;</span><br><span class="line">&gt;&gt; solve(f)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"> -(b + (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> -(b - (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> <span class="comment">%③</span></span><br><span class="line">&gt;&gt; solve(a*x^<span class="number">2</span>+b*x+c)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"> -(b + (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> -(b - (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> <span class="comment">%④</span></span><br><span class="line">&gt;&gt; f=a*x^<span class="number">2</span>+b*x+c</span><br><span class="line"> </span><br><span class="line">f =</span><br><span class="line"> </span><br><span class="line">a*x^<span class="number">2</span> + b*x + c</span><br><span class="line"> </span><br><span class="line">&gt;&gt; solve(f)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line"> -(b + (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br><span class="line"> -(b - (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>))/(<span class="number">2</span>*a)</span><br></pre></td></tr></table></figure><blockquote><p>注意：solve()函数求解方程时，所得到的结果不一定准确。</p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829190446.png" alt="image-20200829190445337"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x y;</span><br><span class="line">&gt;&gt; [u,v]=solve(x+y==<span class="number">98</span>,x^(<span class="number">1</span>/<span class="number">3</span>)+y^(<span class="number">1</span>/<span class="number">3</span>)==<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">u =</span><br><span class="line"> </span><br><span class="line">Empty sym: <span class="number">0</span>-by<span class="number">-1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">v =</span><br><span class="line"> </span><br><span class="line">Empty sym: <span class="number">0</span>-by<span class="number">-1</span></span><br></pre></td></tr></table></figure><p><font color='purple'>转化过后，再解方程：</font></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x y;</span><br><span class="line">&gt;&gt; u=solve(x+(<span class="number">2</span>-x^(<span class="number">1</span>/<span class="number">3</span>))^<span class="number">3</span>==<span class="number">98</span>)</span><br><span class="line"> </span><br><span class="line">u =</span><br><span class="line"> </span><br><span class="line"><span class="number">125</span></span><br><span class="line"> </span><br><span class="line">&gt;&gt; v=<span class="number">98</span>-u</span><br><span class="line"> </span><br><span class="line">v =</span><br><span class="line"> </span><br><span class="line"><span class="number">-27</span></span><br></pre></td></tr></table></figure><h3 id="常微分方程符号求解"><a class="header-anchor" href="#常微分方程符号求解">¶</a>常微分方程符号求解</h3><ul><li><p>在MATLAB中，用大写字母D表示导数。例如，Dy表示y’，D2y表示y’’， Dy(0)=5表示y’(0)=5。D3y+D2y+Dy-x+5=0表示微分方程y’’’+y’’+y’-x+5=0。</p></li><li><p>符号常微分方程求解可以通过函数dsolve()函数来实现，其调用格式为：</p><p>dsolve(e,c,v)</p><p>用于求解常微分方程e在初值条件c下的特解。参数v是方程中的自变量，省 略时按默认原则处理，若没有给出初值条件c，则求方程的通解。</p></li><li><p>dsolve在求常微分方程组时的调用格式为：</p><p>dsolve(e1,e2,…,en,c1,c2,…,cn,v)</p><p>用于求解常微分方程组e1, e2, …, en在初值条件c1, c2, …, cn下的特解，若不 给出初值条件，则求方程组的通解。v给出求解变量，如果没有指定自变量， 则采用默认自变量t。</p></li></ul><p>ex:求下列微分方程或方程组的解。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829190847.png" alt="image-20200829190846323"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x y t;</span><br><span class="line">&gt;&gt; y=dsolve(<span class="string">&#x27;Dy-(x^2+y^2)/x^2/2&#x27;</span>,x)</span><br><span class="line">y =</span><br><span class="line">x</span><br><span class="line">-x*(<span class="number">1</span>/(C5 + <span class="built_in">log</span>(x)/<span class="number">2</span>) - <span class="number">1</span>)</span><br><span class="line">&gt;&gt; [x,y]=dsolve(<span class="string">&#x27;Dx=4*x-2*y&#x27;</span>,<span class="string">&#x27;Dy=2*x-y&#x27;</span>,t)</span><br><span class="line">x =</span><br><span class="line">C8/<span class="number">2</span> + <span class="number">2</span>*C7*<span class="built_in">exp</span>(<span class="number">3</span>*t)</span><br><span class="line">y =</span><br><span class="line">C8 + C7*<span class="built_in">exp</span>(<span class="number">3</span>*t)</span><br></pre></td></tr></table></figure><h1>MATLAB图形用户界面设计</h1><h2 id="图形窗口与坐标轴"><a class="header-anchor" href="#图形窗口与坐标轴">¶</a>图形窗口与坐标轴</h2><ul><li>图形对象的句柄</li><li>图形对象的属性</li><li>图形窗口的操作</li><li>坐标轴的操作</li></ul><h3 id="图形对象句柄"><a class="header-anchor" href="#图形对象句柄">¶</a>图形对象句柄</h3><h4 id="句柄的概念"><a class="header-anchor" href="#句柄的概念">¶</a>句柄的概念</h4><p>在MATLAB中，每一个具体的图形都是由若干个不同的图形对象组成的。</p><p>在MATLAB中，用句柄来标识对象，通过句柄来访问相应对象的属性。</p><p>ex:绘制多个图形，并保存图形句柄。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">10</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">h1=<span class="built_in">plot3</span>(t+<span class="built_in">pi</span>,t<span class="number">-2</span>*<span class="built_in">pi</span>,<span class="built_in">sin</span>(t),<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(t);</span><br><span class="line">z=<span class="built_in">sin</span>(x);</span><br><span class="line">h2=mesh(t<span class="number">-2</span>*<span class="built_in">pi</span>,t+<span class="built_in">pi</span>,z);</span><br><span class="line">[x3,y3,z3]=cylinder(t);</span><br><span class="line">h3=surf(x3,y3,z3);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829213442.png" alt="image-20200829213441217"></p><h4 id="访问图形对象"><a class="header-anchor" href="#访问图形对象">¶</a>访问图形对象</h4><p>访问图形对象是指获取或设置图形对象的属性。不同图形对象所具有的属性不同，但访问的方法是一样的。</p><p>对象句柄.属性名</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">10</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt; y=<span class="built_in">sin</span>(x);</span><br><span class="line">&gt;&gt; h0=<span class="built_in">plot</span>(x,y);</span><br><span class="line">&gt;&gt; h0.Color</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"><span class="number">0</span> <span class="number">0.4470</span> <span class="number">0.7410</span></span><br><span class="line">&gt;&gt; h0.LineWidth=<span class="number">2</span>;</span><br><span class="line">&gt;&gt; h0.LineStyle=<span class="string">&#x27;-.&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="获取特定图形对象句柄的函数"><a class="header-anchor" href="#获取特定图形对象句柄的函数">¶</a>获取特定图形对象句柄的函数</h4><ul><li>gcf:获取当前图形窗口的句柄。</li><li>gca:获取当前坐标轴的句柄。</li><li>gco:获取最近被选中的图形对象的句柄。</li><li>findobj:按照指定的属性来获取图形对象的句柄。</li></ul><h3 id="图形对象属性"><a class="header-anchor" href="#图形对象属性">¶</a>图形对象属性</h3><h4 id="图形对象的常用公共属性"><a class="header-anchor" href="#图形对象的常用公共属性">¶</a>图形对象的常用公共属性</h4><ul><li>Children属性:该对象的所有子对象的句柄组成的一个向量。</li><li>Parent属性:该对象的父对象的句柄。</li><li>Type属性:对象的类型，这是一个只读属性。</li><li>Tag属性:用于给对象定义一个标识符。</li></ul><p>ex:分别在两个子图中绘制曲线和曲面。然后设置子图1的背景色为黄 色，曲线线条颜色为红色，设置子图2的背景色为青色。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">h1=fplot(@(t)t.*<span class="built_in">sin</span>(t),@(t)t.*<span class="built_in">cos</span>(t),[<span class="number">0</span>,<span class="number">6</span>*<span class="built_in">pi</span>] );</span><br><span class="line">axis equal</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">[x,y,z]=peaks(<span class="number">20</span>);</span><br><span class="line">h2=mesh(x,y,z);</span><br><span class="line">h10=h1.Parent;</span><br><span class="line">h10.Color=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">h1.Color=<span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">h2.Parent.Color=<span class="string">&#x27;cyan&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829214455.png" alt="image-20200829214453961"></p><h4 id="图形对象的常用动态属性"><a class="header-anchor" href="#图形对象的常用动态属性">¶</a>图形对象的常用动态属性</h4><ul><li>KeyPressFcn属性:定义按下键盘按键事件的响应。</li><li>CreateFcn属性:定义创建图形对象时做出的响应。</li><li>DeleteFcn属性:定义取消图形对象时做出的响应。</li><li>WindowButtonDownFcn或ButtonDownFcn属性:定义鼠标键按下事件的响应。</li></ul><h3 id="图形窗口的操作"><a class="header-anchor" href="#图形窗口的操作">¶</a>图形窗口的操作</h3><h4 id="建立图形窗口对象"><a class="header-anchor" href="#建立图形窗口对象">¶</a>建立图形窗口对象</h4><p>MATLAB通过figure函数来创建窗口对象，其调用格式为：</p><ul><li>句柄变量=figure(属性1,属性值1,属性2,属性值2,…)</li></ul><blockquote><p>其中，属性用于设置图形窗口的特征。</p></blockquote><ul><li>句柄变量=figure</li></ul><blockquote><p>按MATLAB默认的属性值建立图形窗口。</p></blockquote><ul><li>figure(窗口句柄)</li></ul><blockquote><p>设定该句柄对应的窗口为当前窗口。</p></blockquote><h4 id="图形窗口属性"><a class="header-anchor" href="#图形窗口属性">¶</a>图形窗口属性</h4><ul><li><p>MenuBar属性:控制图形窗口是否具有菜单条，其取值为’none’或’figure’。</p></li><li><p>Name属性:指定图形窗口的标题。</p></li><li><p>NumberTitle属性:决定着在图形窗口的标题中是否以“Figure n:&quot;为标题前缀。</p></li><li><p>Color属性:设定图形窗口背景的颜色。</p></li><li><p>Position属性：定义图形窗口对象在屏幕上的位置和大小，值是一 个4元行向量：<br>[x，y，w，h]</p></li><li><p>Units属性：定义图形窗口使用的度量单位，将影响一切定义大小 的属性项。</p><ul><li>‘pixels’:指定度量单位为像素（默认值）。</li><li>‘inches’:指定度量单位为英寸。厘米、磅。</li><li>‘centimeters’:指定度量单位为厘米。</li><li>‘points’:指定度量单位为磅。</li><li>‘normalized’:指定用相对单位。</li></ul></li></ul><p>ex:建立一个图形窗口。该图形窗口没有菜单条，标题名称为“图 形窗口示例”，起始于屏幕左下角、宽度和高度分别为300像素点和 150像素点，背景颜色为青色，且当用户从键盘按下任意一个键时，然 后在窗口中单击鼠标左键，在鼠标指针所在位置将显示 “Hello,World!” 。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">hf=<span class="built_in">figure</span>;</span><br><span class="line">hf.Color=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">hf.Position=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">300</span>,<span class="number">150</span>];</span><br><span class="line">hf.Name=<span class="string">&#x27;图形窗口示例&#x27;</span>;</span><br><span class="line">hf.NumberTitle=<span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">hf.MenuBar=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">hf.ButtonDownFcn=<span class="string">&#x27;gtext(&#x27;&#x27;Hello,World!&#x27;&#x27;)&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829215020.png" alt="image-20200829215019375"></p><h3 id="坐标轴对象的操作"><a class="header-anchor" href="#坐标轴对象的操作">¶</a>坐标轴对象的操作</h3><h4 id="建立坐标轴对象"><a class="header-anchor" href="#建立坐标轴对象">¶</a>建立坐标轴对象</h4><p>使用axes函数，其调用格式为：</p><ul><li>句柄变量=axes(属性1,属性值1,属性2,属性值2,…)</li></ul><blockquote><p>其中，属性用于设置坐标轴的外观和行为。</p></blockquote><ul><li>句柄变量=axes</li></ul><blockquote><p>按MATLAB默认的属性值在当前图形窗口创建坐标轴。</p></blockquote><ul><li>axes(坐标轴句柄)</li></ul><blockquote><p>设定该句柄代表的坐标轴为当前坐标轴。</p></blockquote><h4 id="坐标轴对象的属性"><a class="header-anchor" href="#坐标轴对象的属性">¶</a>坐标轴对象的属性</h4><ul><li>Position属性:定义坐标轴在图形窗口中的位置和大小。</li><li>Units属性:定义坐标轴使用的度量单位，默认值是’normalized’。</li><li>Box属性:决定坐标轴是否带有边框，可取值是’on’或’off’（默认值）。</li><li>GridLineStyle属性:用于定义网格线的类型，可取值是’:’(默认值）、’’、’-. ‘、’–’、 ‘none’。</li><li>Title属性:用于对坐标轴标题对象进行操作，取值是通过title函数建立的标题对象的句柄。</li><li>XLabel、YLabel、ZLabel属性：取值分别是通过xlabel、ylabel、 zlabel函数建立的标签对象的句柄。</li><li>XLim、YLim、ZLim 属性：分别定义各坐标轴的下限和上限，取值 是2元向量[Lmin, Lmax]，默认值为[0，1]。</li><li>XScale、YScale、ZScale 属性：定义各坐标轴的刻度类型。可取 值是’linear’ 、 ‘log’。</li><li>View属性：定义视点，取值是2元向量[az, el]，az定义视点的方位角，el定义视点的仰角。坐标轴默认视点的方位角为0°，仰角为 90°。</li></ul><p>ex:利用坐标轴对象实现图形窗口的分割。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ha1=axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.7</span>,<span class="number">0.7</span>]);</span><br><span class="line">contour(peaks(<span class="number">20</span>))</span><br><span class="line">ha1.Title=title(<span class="string">&#x27;等高线&#x27;</span>);</span><br><span class="line">ha1.YLabel=ylabel(<span class="string">&#x27;南北向&#x27;</span>);</span><br><span class="line">ha1.XLabel=xlabel(<span class="string">&#x27;东西向&#x27;</span>);</span><br><span class="line">ha2=axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.65</span>,<span class="number">0.7</span>,<span class="number">0.28</span>,<span class="number">0.28</span>]);</span><br><span class="line">surf(peaks(<span class="number">20</span>))</span><br><span class="line">ha2.View=[<span class="number">-30</span>,<span class="number">45</span>];</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829215536.png" alt="image-20200829215535465"></p><ul><li>ColorOrder属性：用于设置多条曲线的颜色顺序，是一个n×3矩阵， 每行用RGB三元组表示一种颜色，默认n为7。</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; hc=gca;</span><br><span class="line">&gt;&gt; C=hc.ColorOrder</span><br><span class="line">C =</span><br><span class="line"><span class="number">0</span> <span class="number">0.4470</span> <span class="number">0.7410</span></span><br><span class="line"><span class="number">0.8500</span> <span class="number">0.3250</span> <span class="number">0.0980</span></span><br><span class="line"><span class="number">0.9290</span> <span class="number">0.6940</span> <span class="number">0.1250</span></span><br><span class="line"><span class="number">0.4940</span> <span class="number">0.1840</span> <span class="number">0.5560</span></span><br><span class="line"><span class="number">0.4660</span> <span class="number">0.6740</span> <span class="number">0.1880</span></span><br><span class="line"><span class="number">0.3010</span> <span class="number">0.7450</span> <span class="number">0.9330</span></span><br><span class="line"><span class="number">0.6350</span> <span class="number">0.0780</span> <span class="number">0.1840</span></span><br></pre></td></tr></table></figure><p>ex:定义包含4种颜色的ColorOrder属性，绘制6条曲线。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">0</span>,<span class="number">0</span>];y=[<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">ha=axes;</span><br><span class="line">ha.ColorOrder=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>; <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,y,x+<span class="number">0.5</span>,y,x+<span class="number">1</span>,y,x+<span class="number">1.5</span>,y,x+<span class="number">2</span>,y,x+<span class="number">2.5</span>,y);</span><br><span class="line">ha.XLim=[<span class="number">-0.2</span>,<span class="number">3</span>];</span><br><span class="line">ha.YLim=[<span class="number">-0.2</span>,<span class="number">1.2</span>];</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829220222.png" alt="image-20200829215647610"></p><h2 id="曲线与曲面对象"><a class="header-anchor" href="#曲线与曲面对象">¶</a>曲线与曲面对象</h2><ul><li>曲线对象</li><li>曲面对象</li><li>光照处理</li><li>图形对象的反射特性</li></ul><h3 id="曲线对象"><a class="header-anchor" href="#曲线对象">¶</a>曲线对象</h3><h4 id="建立曲线对象"><a class="header-anchor" href="#建立曲线对象">¶</a>建立曲线对象</h4><p>line函数的调用格式为：</p><p>句柄变量=line(x, y, z, 属性1, 属性值1, 属性2, 属性值2, …)</p><blockquote><p>其中，x、y、z存储数据点的坐标，与plot、plot3函数含义相同。</p></blockquote><h4 id="曲线对象常用属性"><a class="header-anchor" href="#曲线对象常用属性">¶</a>曲线对象常用属性</h4><ul><li>Color属性：定义曲线的颜色，默认值为[0 0 0]。</li><li>LineStyle属性：定义线型，默认值为’-’。</li><li>LineWidth属性：定义线宽，默认值为0.5磅。</li><li>Marker属性：定义数据点标记符号，默认值为’none’。</li><li>MarkerSize属性：定义数据点标记符号的大小，默认值为6磅。</li><li>XData、YData、ZData属性：用于设置3个坐标轴的数据源。</li></ul><p>ex:利用曲线对象绘制五环图案。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">-0.1</span> : <span class="number">0.1</span> : <span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=<span class="built_in">cos</span>(t); y=<span class="built_in">sin</span>(t);</span><br><span class="line">line(x,y,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">line(x+<span class="number">1.2</span>,y<span class="number">-1</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">line(x+<span class="number">2.4</span>,y,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">line(x+<span class="number">3.6</span>,y<span class="number">-1</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">line(x+<span class="number">4.8</span>,y,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ha=gca;</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">size</span>(ha.Children)</span><br><span class="line">ha.Children(n).LineWidth=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ha.XLim=[<span class="number">-2</span>,<span class="number">7</span>];</span><br><span class="line">ha.YLim=[<span class="number">-3</span>,<span class="number">2</span>];</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829220217.png" alt="image-20200829215946706"></p><h3 id="曲面对象"><a class="header-anchor" href="#曲面对象">¶</a>曲面对象</h3><h4 id="建立曲面对象"><a class="header-anchor" href="#建立曲面对象">¶</a>建立曲面对象</h4><p>建立曲面对象使用surface函数，其调用格式为：</p><p>句柄变量=surface(x,y,z,c,属性1,属性值1,属性2,属性值2,…)</p><blockquote><p>其中，x、y、z存储数据点的坐标，与mesh、surf函数含义相同；c用 于指定在不同高度下的曲面颜色。</p></blockquote><p>surf函数每调用一次，就会刷新坐标轴，清空原有图形，再绘制新的 图形。而surface函数生成的曲面则在已有图形上叠加显示。</p><p>利用surface函数建立的曲面对象，默认视点在图形正上方，即方位角 为0°，仰角为90°。</p><h4 id="与曲面形态有关的属性："><a class="header-anchor" href="#与曲面形态有关的属性：">¶</a>与曲面形态有关的属性：</h4><ul><li><p>FaceColor属性：定义曲面网格片的颜色，可取值：</p><ul><li>‘flat’：每一个网格片用单一颜色填充。</li><li>‘interp’：用渐变方式填充网格片。</li><li>‘none’：网格片无颜色。</li><li>‘texturemap’：用Cdata属性定义的颜色填充网格片。</li><li>RGB向量或代表颜色的字符</li></ul></li><li><p>EdgeColor属性：定义曲面网格线的颜色。</p></li></ul><p>ex:利用曲面对象绘制立体圆环，圆环方程为:</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829220206.png" alt="image-20200829220205761"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">60</span>);</span><br><span class="line">[u,v]=<span class="built_in">meshgrid</span>(r);</span><br><span class="line">x=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">cos</span>(u);</span><br><span class="line">y=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">sin</span>(u);</span><br><span class="line">z=<span class="number">3</span>*<span class="built_in">sin</span>(v);</span><br><span class="line">axes(<span class="string">&#x27;view&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>])</span><br><span class="line">hs=surface(x,y,z);</span><br><span class="line">axis equal;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829220340.png" alt="image-20200829220339527"></p><h3 id="光照处理"><a class="header-anchor" href="#光照处理">¶</a>光照处理</h3><h4 id="创建光源对象"><a class="header-anchor" href="#创建光源对象">¶</a>创建光源对象</h4><p>light函数的调用格式为：</p><p>对象句柄=light(属性1,属性值1,属性2,属性值2,…)</p><blockquote><p>其中，属性指定光源的特性。</p></blockquote><h4 id="光源对象的属性"><a class="header-anchor" href="#光源对象的属性">¶</a>光源对象的属性</h4><ul><li>Color属性:设置光的颜色。</li><li>Style属性:设置光源类型，其取值为’infinite’（默认值）或’local’.</li><li>Position属性:指定光源位置，值是一个3元向量。</li></ul><p>利用lighting命令可以设置光照模式，lighting命令格式为：</p><p>lighting 选项</p><blockquote><p>其中，选项可取值为</p><ul><li>flat:使得入射光均匀洒落在图形对象的每个面上（默认值）。</li><li>gouraud:先对顶点颜色插补，再对顶点勾画的面上颜色进行插补。</li><li>phong:对顶点处的法线插值，再计算各个像素的反光。</li><li>none:关闭所有光源。</li></ul></blockquote><p>ex:绘制光照处理后的圆环面并观察不同光照模式下的效果。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">60</span>); [u,v]=<span class="built_in">meshgrid</span>(r);</span><br><span class="line">x=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">cos</span>(u); y=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">sin</span>(u); z=<span class="number">3</span>*<span class="built_in">sin</span>(v);</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.05</span>,<span class="number">0.675</span>,<span class="number">1.0</span>,<span class="number">0.3</span>], <span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs1=surface(x,y,z); axis equal;</span><br><span class="line">hs1.EdgeColor=<span class="string">&#x27;none&#x27;</span>; hs1.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.05</span>,<span class="number">0.35</span>,<span class="number">1.0</span>,<span class="number">0.3</span>], <span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs2=surface(x,y,z); axis equal;</span><br><span class="line">hs2.EdgeColor=<span class="string">&#x27;none&#x27;</span>; hs2.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>])</span><br><span class="line">lighting flat</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.05</span>,<span class="number">0.025</span>,<span class="number">1.0</span>,<span class="number">0.3</span>], <span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs3=surface(x,y,z); axis equal;</span><br><span class="line">hs3.EdgeColor=<span class="string">&#x27;none&#x27;</span>; hs3.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>])</span><br><span class="line">lighting phong</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829220748.png" alt="image-20200829220746419"></p><h3 id="图形对象的反射特性"><a class="header-anchor" href="#图形对象的反射特性">¶</a>图形对象的反射特性</h3><ul><li>SpecularStrength属性：控制对象表面镜面反射的强度，属性值取 0~1之间的数，默认为0.9。</li><li>DiffuseStrength 属性：控制对象表面漫反射的强度，属性值取0~1 之间的数，默认为0.6。</li><li>AmbientStrength属性：确定环境光的强度，属性值取0~1之间的数 ，默认为0.3。  SpecularExponent属性：控制镜面反射指数，值大于等于1，大多设 置在[5 20]之间，默认为10。</li><li>BackFaceLighting属性：控制对象内表面和外表面的差别，取值为<ul><li>‘unlit’</li><li>‘lit’</li><li>‘reverselit’（默认值）</li></ul></li></ul><p>ex:绘制具有不同反射特性的圆环面并观察反射特性对图形效果的影响。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">60</span>); [u,v]=<span class="built_in">meshgrid</span>(r);</span><br><span class="line">x=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">cos</span>(u); y=(<span class="number">8</span>+<span class="number">3</span>*<span class="built_in">cos</span>(v)).*<span class="built_in">sin</span>(u); z=<span class="number">3</span>*<span class="built_in">sin</span>(v);</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.05</span>,<span class="number">0.675</span>,<span class="number">1.0</span>,<span class="number">0.3</span>],<span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs1=surface(x,y,z);axis equal;</span><br><span class="line">hs1.EdgeColor=<span class="string">&#x27;none&#x27;</span>;hs1.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>]) ;lighting phong</span><br><span class="line">hs1.SpecularStrength=<span class="number">0.1</span>;</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.05</span>,<span class="number">0.35</span>,<span class="number">1.0</span>,<span class="number">0.3</span>],<span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs2=surface(x,y,z);axis equal;</span><br><span class="line">hs2.EdgeColor=<span class="string">&#x27;none&#x27;</span>;hs2.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>]) ;lighting phong</span><br><span class="line">hs2.SpecularStrength=<span class="number">0.5</span>;</span><br><span class="line">axes(<span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.05</span>,<span class="number">0.025</span>,<span class="number">1.0</span>,<span class="number">0.3</span>],<span class="string">&#x27;View&#x27;</span>,[<span class="number">-37.5</span>,<span class="number">30</span>]);</span><br><span class="line">hs3=surface(x,y,z);axis equal;</span><br><span class="line">hs3.EdgeColor=<span class="string">&#x27;none&#x27;</span>;hs3.FaceColor=<span class="string">&#x27;interp&#x27;</span>;</span><br><span class="line">light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>]) ;lighting phong ;</span><br><span class="line">hs3.SpecularStrength=<span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829222132.png" alt="image-20200829220934946"></p><h2 id="图形用户界面设计方法"><a class="header-anchor" href="#图形用户界面设计方法">¶</a>图形用户界面设计方法</h2><ul><li>图形用户界面的组成</li><li>控件对象及其操作</li><li>菜单对象及其操作</li></ul><h3 id="图形用户界面的组成"><a class="header-anchor" href="#图形用户界面的组成">¶</a>图形用户界面的组成</h3><ul><li>图形用户界面（Graphical User Interface，GUI）：用户与计算 机进行信息交流的窗口。</li><li>设计图形用户界面的方法<ul><li>调用建立用户界面控件的函数</li><li>使用MATLAB提供的GUIDE工具进行可视化设计</li></ul></li></ul><h3 id="控件对象及其操作"><a class="header-anchor" href="#控件对象及其操作">¶</a>控件对象及其操作</h3><h4 id="常用控件"><a class="header-anchor" href="#常用控件">¶</a>常用控件</h4><ul><li>输入和输出类控件：编辑框、静态文本、列表框、滑动条等。</li><li>实施确认、选择操作类控件：按钮、双位按钮、单选按钮、复选框等。</li></ul><h4 id="建立控件对象"><a class="header-anchor" href="#建立控件对象">¶</a>建立控件对象</h4><p>函数uicontrol用于建立控件对象，其调用格式为：</p><p>句柄变量=uicontrol(图形窗口句柄,属性1,属性值1,属性2,属性值2,…)</p><blockquote><p>其中，属性及其取值决定了控件的特征。若省略图形窗口句柄，默认 在当前图形窗口建立控件对象。</p></blockquote><h4 id="控件对象的基本控制属性"><a class="header-anchor" href="#控件对象的基本控制属性">¶</a>控件对象的基本控制属性</h4><ul><li>Style属性：定义控件对象的类型，例如‘pushbutton’表示按钮对 象，'edit’表示编辑框，等等。</li><li>String属性：定义控件对象的说明文字。</li><li>Tag属性：标识控件对象。</li><li>Enable属性：控制控件对象是否可用。</li><li>Position属性：定义控件对象的位置，其取值形式为[x，y，w，h]。</li><li>Callback属性：其属性值是描述命令的字符串或函数句柄，当选中控 件时，系统将自动执行字符串描述的命令或调用句柄所代表的函数， 实施相关操作。</li></ul><p>ex1:在图形窗口中建立三个按钮对象，当单击按钮时分别绘制正弦曲 线、显示或隐藏坐标轴的网格、清除坐标轴的图形。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ha= axes(<span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;pixels&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">40</span>,<span class="number">40</span>,<span class="number">360</span>,<span class="number">360</span>]);</span><br><span class="line">ptgrid=uicontrol(<span class="string">&#x27;Style&#x27;</span>,<span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;网格&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">120</span>,<span class="number">48</span>,<span class="number">20</span>],<span class="string">&#x27;Callback&#x27;</span>,<span class="string">&#x27;grid&#x27;</span> );</span><br><span class="line">btncla = uicontrol(<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;清除&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">80</span>,<span class="number">48</span>,<span class="number">20</span>],<span class="string">&#x27;Callback&#x27;</span>,<span class="string">&#x27;cla&#x27;</span> );</span><br><span class="line">btnplot = uicontrol(<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;绘图&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">160</span>,<span class="number">48</span>,<span class="number">20</span>]);</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829222125.png" alt="image-20200829221851937"></p><p>回调函数定义对象怎样处理信息并响应某事件。回调函数的定义格式：</p><p>function 函数名(source, eventdata)</p><p>……</p><p>end</p><blockquote><p>其中，参数source是发生事件的源控件对象句柄，eventdata存储事件 数据。</p></blockquote><p>ex2:将上例的“绘图”按钮要实现的功能定义为回调函数plot_sin。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plot_sin</span><span class="params">(source, callbackdata)</span></span></span><br><span class="line">t=-<span class="built_in">pi</span>:<span class="built_in">pi</span>/<span class="number">20</span>:<span class="built_in">pi</span>;</span><br><span class="line"><span class="built_in">plot</span>(t,<span class="built_in">sin</span>(t));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ha= axes(<span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;pixels&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">40</span>,<span class="number">40</span>,<span class="number">360</span>,<span class="number">360</span>]);</span><br><span class="line">ptgrid=uicontrol(<span class="string">&#x27;Style&#x27;</span>,<span class="string">&#x27;pushbutton&#x27;</span>,...</span><br><span class="line"><span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;网格&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">120</span>,<span class="number">48</span>,<span class="number">20</span>],...</span><br><span class="line"><span class="string">&#x27;Callback&#x27;</span>,<span class="string">&#x27;grid&#x27;</span> );</span><br><span class="line">btncla = uicontrol(<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line"><span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;清除&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">80</span>,<span class="number">48</span>,<span class="number">20</span>],...</span><br><span class="line"><span class="string">&#x27;Callback&#x27;</span>,<span class="string">&#x27;cla&#x27;</span> );</span><br><span class="line">btnplot = uicontrol(<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line"><span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;绘图&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>, [<span class="number">450</span>,<span class="number">160</span>,<span class="number">48</span>,<span class="number">20</span>]);</span><br><span class="line"><span class="comment">%设置“绘图”按钮的Callback属性值是plot_sin函数句柄。</span></span><br><span class="line">btnplot.Callback=@plot_sin;</span><br></pre></td></tr></table></figure><h3 id="菜单对象"><a class="header-anchor" href="#菜单对象">¶</a>菜单对象</h3><h4 id="建立菜单对象"><a class="header-anchor" href="#建立菜单对象">¶</a>建立菜单对象</h4><p>uimenu函数用于创建、设置、修改菜单。</p><ul><li>建立一级菜单项的函数调用格式为：</li></ul><p>一级菜单项句柄=uimenu(图形窗口句柄,属性,属性值1,属性2,属性值2,…)</p><ul><li>建立子菜单项的函数调用格式为：</li></ul><p>子菜单项句柄=uimenu(上级菜单项句柄,属性1,属性值1,属性2,属性值2,…)</p><h4 id="菜单属性"><a class="header-anchor" href="#菜单属性">¶</a>菜单属性</h4><ul><li>Label属性：定义菜单项的名字。</li><li>Accelerator属性：定义菜单项的快捷键。</li><li>Checked属性：指示菜单项是否已选中。E</li><li>nable属性：控制菜单项的可选择性。</li><li>Separator属性：在菜单项上方添加一条分隔线。</li></ul><p>ex3:在ex1的界面中添加“图形选项”菜单项，其中包括一个二级菜 单项“线型”，其下又有3个子菜单项，分别为“实线”、“虚线”、 “双划线”。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">hopt=uimenu(gcf,<span class="string">&#x27;Label&#x27;</span>,<span class="string">&#x27;图形选项&#x27;</span>,<span class="string">&#x27;Accelerator&#x27;</span>,<span class="string">&#x27;L&#x27;</span>);</span><br><span class="line">hLStyle=uimenu(hopt,<span class="string">&#x27;Label&#x27;</span>,<span class="string">&#x27;线型&#x27;</span>,<span class="string">&#x27;Tag&#x27;</span>,<span class="string">&#x27;LStyle&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Enable&#x27;</span>,<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">hL_Solid=uimenu(hLStyle,<span class="string">&#x27;Label&#x27;</span>,<span class="string">&#x27;实线&#x27;</span>,...</span><br><span class="line"><span class="string">&#x27;Tag&#x27;</span>,<span class="string">&#x27;Solid&#x27;</span>,<span class="string">&#x27;Callback&#x27;</span>, @MLine_Type);</span><br><span class="line">hL_Dotted=uimenu(hLStyle,<span class="string">&#x27;Label&#x27;</span>,<span class="string">&#x27;虚线&#x27;</span>,...</span><br><span class="line"><span class="string">&#x27;Tag&#x27;</span>,<span class="string">&#x27;Dotted&#x27;</span>,<span class="string">&#x27;Callback&#x27;</span>, @MLine_Type);</span><br><span class="line">hL_Dashed=uimenu(hLStyle,<span class="string">&#x27;Label&#x27;</span>,<span class="string">&#x27;双划线&#x27;</span>,...</span><br><span class="line"><span class="string">&#x27;Tag&#x27;</span>,<span class="string">&#x27;Dashed&#x27;</span>,<span class="string">&#x27;Callback&#x27;</span>, @MLine_Type);</span><br></pre></td></tr></table></figure><p>新建函数文件MLine_Type.m，内容如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MLine_Type</span><span class="params">(source,callbackdata)</span></span></span><br><span class="line">hline=findobj(<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;line&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> strcmp(source.Tag,<span class="string">&#x27;Solid&#x27;</span> )==<span class="number">1</span></span><br><span class="line">hline.LineStyle=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">elseif</span> strcmp(source.Tag,<span class="string">&#x27;Dotted&#x27;</span> )==<span class="number">1</span></span><br><span class="line">hline.LineStyle=<span class="string">&#x27;:&#x27;</span>;</span><br><span class="line"><span class="keyword">elseif</span> strcmp(source.Tag,<span class="string">&#x27;Dashed&#x27;</span> )==<span class="number">1</span></span><br><span class="line">hline.LineStyle=<span class="string">&#x27;--&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>修改函数文件plot_sin.m，内容如下：</p><div class="note default">            <p>在运行时报错，source, callbackdata，未使用参数，换成了~</p>          </div><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plot_sin</span><span class="params">(~, ~)</span></span></span><br><span class="line">t=-<span class="built_in">pi</span>:<span class="built_in">pi</span>/<span class="number">20</span>:<span class="built_in">pi</span>;</span><br><span class="line"><span class="built_in">plot</span>(t,<span class="built_in">sin</span>(t));</span><br><span class="line">h1=findobj(<span class="string">&#x27;Tag&#x27;</span>,<span class="string">&#x27;LStyle&#x27;</span>);</span><br><span class="line">h1.Enable=<span class="string">&#x27;On&#x27;</span>; <span class="comment">%使得 “线型”菜单项可用</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>程序的运行结果。 首先运行ex1的程序生成图形界面，再 运行ex2程序，在界面中添加“图形选 项”菜单项，这时“线型”菜单项不 可用，单击“绘图”按钮绘制正弦函 数曲线后“线型”菜单项变为可用， 这时可以改变线型，例如双划线，这时界面如图所示。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829223223.png" alt="image-20200829223222692"></p><h2 id="用户界面设计工具"><a class="header-anchor" href="#用户界面设计工具">¶</a>用户界面设计工具</h2><ul><li>图形界面设计窗口</li><li>图形用户界面设计工具</li><li>定义回调函数</li></ul><h3 id="图形用户界面设计窗口"><a class="header-anchor" href="#图形用户界面设计窗口">¶</a>图形用户界面设计窗口</h3><h4 id="打开GUIDE"><a class="header-anchor" href="#打开GUIDE">¶</a>打开GUIDE</h4><ul><li>在MATLAB命令行窗口输入guide命令。</li><li>在MATLAB主窗口中选择“主页”选项卡，单击工具栏的“新建”命令按钮，再选择“应用程序”下的GUIDE命令。</li></ul><h4 id="图形用户界面设计模板"><a class="header-anchor" href="#图形用户界面设计模板">¶</a>图形用户界面设计模板</h4><ul><li>Blank GUI (Default)</li><li>GUI with Uicontrols</li><li>GUI with Axes and Menu</li><li>Modal Question Dialog</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829224022.png" alt="image-20200829224020745"></p><h4 id="图形用户界面设计窗口-v2"><a class="header-anchor" href="#图形用户界面设计窗口-v2">¶</a>图形用户界面设计窗口</h4><p>图形用户界面设计窗口由菜单栏、 工具栏、组件选项板、界面设计区、状 态栏等部分组成。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829224239.png" alt="image-20200829224237966"></p><p>ex:建立一个图形用户界面，该界面包括1个坐标轴，3个静态文本，3 个可编辑文本，2个按钮。还有1个按钮组，里面有两个单选按钮。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829224645.png" alt="image-20200829224644316"></p><h3 id="图形用户界面设计工具"><a class="header-anchor" href="#图形用户界面设计工具">¶</a>图形用户界面设计工具</h3><ul><li>对齐对象工具</li><li>菜单编辑器</li><li>Tab键顺序编辑器</li><li>工具栏编辑器</li><li>代码编辑器</li><li>对象属性检查器</li><li>对象浏览器</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829225044.png" alt="image-20200829224931549"></p><h4 id="对象属性检查器"><a class="header-anchor" href="#对象属性检查器">¶</a>对象属性检查器</h4><p>对象属性检查器是用于检查/修改对象属性的工具。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829225034.png" alt="image-20200829225033302"></p><p>ex2:利用属性检查器设置ex1界面对象上显示的文字和对象标识。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829225513.png" alt="image-20200829225512519"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829225854.png" alt="image-20200829225853500"></p><ul><li>设置控件的String属性</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829230320.png" alt="image-20200829230319345"></p><ul><li>设置控件的Tag 属性</li><li>设置按钮组的Title 属性</li></ul><h4 id="菜单编辑器"><a class="header-anchor" href="#菜单编辑器">¶</a>菜单编辑器</h4><ul><li><p>菜单编辑器构成</p><ul><li>工具栏</li><li>菜单列表</li><li>菜单属性面板</li></ul></li><li><p>图形窗口的MenuBar属性</p><ul><li>figure</li><li>none</li></ul></li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829231354.png" alt="image-20200829231353261"></p><p>ex3:在ex2的菜单栏添加一个一级菜单项“绘图选项” ，而且这个菜 单只有在画有曲线时才是可用的。其下有6项，前3项定义线型，后3项 定义曲线颜色。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829235227.png" alt="image-20200829235226564"></p><div class='tip error'><p>注意：出现错误，未解决<p></div><ul><li>添加自定义菜单<ul><li>新建菜单</li><li>新建菜单项</li><li>设置菜单项属性</li></ul></li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829235454.png" alt="image-20200829235453021"></p><h4 id="对象浏览器"><a class="header-anchor" href="#对象浏览器">¶</a>对象浏览器</h4><p>对象浏览器用于查看图形对象和展示界面的组织架构。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829235947.png" alt="image-20200829235543324"></p><h3 id="回调属性与回调函数"><a class="header-anchor" href="#回调属性与回调函数">¶</a>回调属性与回调函数</h3><h4 id="回调属性"><a class="header-anchor" href="#回调属性">¶</a>回调属性</h4><ul><li>Callback属性：按钮类控件和菜单项的单击事件的默认回调属性。</li><li>CreateFcn属性：定义创建图形对象的响应。</li><li>DeleteFcn属性：定义取消图形对象的响应。</li><li>ButtonDownFcn属性：定义单击鼠标键按下的响应。</li><li>KeyPressFcn属性：定义键盘键按下的响应。</li><li>SelectionChangeFcn属性：定义改变选项的响应。</li></ul><h4 id="回调函数框架"><a class="header-anchor" href="#回调函数框架">¶</a>回调函数框架</h4><p>function 对象标识_Callback(hObject, eventdata, handles)</p><blockquote><p>其中，hObject为发生事件的源控件，eventdata为事件数据，handles保 存图形界面中所有对象的句柄。</p></blockquote><h4 id="回调函数举例"><a class="header-anchor" href="#回调函数举例">¶</a>回调函数举例</h4><ul><li>“绘图”按钮的Callback函数</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushbutton1_Callback</span><span class="params">(hObject, eventdata, handles)</span></span></span><br><span class="line">A=eval(handles.editfz.String);</span><br><span class="line">f=eval(handles.editpl.String)/<span class="number">50</span>;</span><br><span class="line">theta=eval(handles.editxj.String)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">60</span>);</span><br><span class="line"><span class="keyword">if</span> handles.OpSin.Value==<span class="number">1</span></span><br><span class="line">y=A*<span class="built_in">sin</span>(f*x+theta);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">y=A*<span class="built_in">cos</span>(f*x+theta);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">handles.PStyle.Enable=<span class="string">&#x27;On&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200829235947.png" alt="image-20200829235812870"></p><ul><li>“实线”菜单项的回调函数</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Solid_Callback</span><span class="params">(hObject, eventdata, handles)</span></span></span><br><span class="line">hline=findobj(<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;line&#x27;</span>);</span><br><span class="line">hline.LineStyle=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">handles.Solid.Checked=<span class="string">&#x27;On&#x27;</span>;</span><br><span class="line">handles.Dotted.Checked=<span class="string">&#x27;Off&#x27;</span>;</span><br><span class="line">handles.Dashed.Checked=<span class="string">&#x27;Off&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>“红”菜单项的回调函数</li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r_Callback</span><span class="params">(hObject, eventdata, handles)</span></span></span><br><span class="line">hline=findobj(<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;line&#x27;</span>);</span><br><span class="line">hline.Color=<span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">handles.r.Checked=<span class="string">&#x27;On&#x27;</span>;</span><br><span class="line">handles.g.Checked=<span class="string">&#x27;Off&#x27;</span>;</span><br><span class="line">handles.b.Checked=<span class="string">&#x27;Off&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="运行图形用户界面的方法"><a class="header-anchor" href="#运行图形用户界面的方法">¶</a>运行图形用户界面的方法</h4><ul><li>在GUIDE窗口中单击工具栏上的“运行图形”命令按钮。</li><li>在GUIDE窗口中选择“工具”菜单中的“运行”命令。</li></ul><h1>Simulink系统仿真</h1><h2 id="Simulink仿真基础"><a class="header-anchor" href="#Simulink仿真基础">¶</a>Simulink仿真基础</h2><ul><li>Simulink的启动</li><li>系统仿真模型的创建</li><li>仿真参数的设置</li></ul><h3 id="Simulink的启动"><a class="header-anchor" href="#Simulink的启动">¶</a>Simulink的启动</h3><ul><li>在MATLAB主窗口选择“主页”选项卡，再单击“文件”命令组中的“新建”命令按钮，然后从下拉菜单中选择“Simulink Model”命令。</li><li>在MATLAB主窗口选择“主页”选项卡，再单击“SIMULINK”命令组中的 “Simulink”命令按钮。</li><li>在MATLAB的命令行窗口输入simulink命令。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830105132.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830104938.png" alt=""></p><ul><li>利用File→New命令，可以建立新的仿真模型；利用File→Open命令，可以打 开已经建立好的模型文件。</li><li>单击“Library Browser”按钮，将打开Simulink模块库浏览器窗口，此时， 可以通过鼠标将模块库中的模块拖动到模型编辑窗口，再将各个模块连接起来， 就构成了仿真模型。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830105425.png" alt=""></p><h3 id="系统仿真模型的创建"><a class="header-anchor" href="#系统仿真模型的创建">¶</a>系统仿真模型的创建</h3><h4 id="Simulink-Library-Browser窗口"><a class="header-anchor" href="#Simulink-Library-Browser窗口">¶</a>Simulink Library Browser窗口</h4><p>“Simulink模块库浏览器”窗口 包含两个窗格，左侧的窗格以树 状列表的形式列出了所有模块库。 单击某个模块库，即在右侧窗格 中列出该模块库的子模块库；再 双击其中的子模块库图标，即列 出该子模块库的所有模块。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830105739.png" alt=""></p><p>Simulink的模块库大体分为两类，一类是基本模块库,即Simulink 模块库，另一类是专业模块库,种类很多。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830105912.png" alt=""></p><p>如果双击连续系统子模块库图标，模块库浏览器窗口左侧展开了 Simulink基本模块库的全部子模块库，并且目前选中连续系统子模块库， 右侧显示了连续系统子模块库的各个模块，可供连续系统建模使用。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830110000.png" alt=""></p><h4 id="Simulink模块的操作"><a class="header-anchor" href="#Simulink模块的操作">¶</a>Simulink模块的操作</h4><ul><li><font color="red">模块的添加：</font>首先要在Simulink模块库浏览器窗口中找到该模块， 然后用鼠标将这个模块拖曳到模型编辑窗口中即可。</li><li><font color="red">模块的删除或复制：</font>需要先选定模块，再按删除键；或在模型编 辑窗口选择Edit菜单项中的Cut、Copy、Paste等剪贴板操作命令。</li><li><font color="red">两个模块的连接：</font>先将鼠标指针移动到一个模块的输出端，当鼠标 指针变成十字形光标时按住鼠标左键，移动鼠标指针到另一个模块 的输入端，当连接线由虚线变成实线时，释放鼠标左键就完成了两 个模块的连接。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830110548.png" alt=""></p><ul><li><font color='red'>连线的分支：</font>在先连好一条线之后，把鼠标指针移到分支点的 位置，先按下Ctrl键，然后按住鼠标拖曳到目标模块的输入端， 释放鼠标和Ctrl键。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830110502.png" alt=""></p><h4 id="模型存盘"><a class="header-anchor" href="#模型存盘">¶</a>模型存盘</h4><ul><li>在Simulink模型编辑窗口选择File→Save命令或Save as命令。</li><li>单击模型编辑窗口工具栏中的Save命令按钮。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830111023.png" alt=""></p><h4 id="模块参数的设置"><a class="header-anchor" href="#模块参数的设置">¶</a>模块参数的设置</h4><ul><li>双击要设置的模块。</li><li>选择要设置的模块，再选择Diagram→Block Parameters命令。</li><li>右击要设置的模块，从快捷菜单中选择Block Parameters命令。</li></ul><p>模块参数设置对话框分为两部分， 上面一部分是模块功能说明，下面 一部分用来进行模块参数设置。例 如，正弦波模块参数对话框，用户 可以设置它的幅值、偏移量、频率、 相位、采样时间等参数。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830111012.png" alt=""></p><h3 id="仿真参数的设置"><a class="header-anchor" href="#仿真参数的设置">¶</a>仿真参数的设置</h3><ul><li>选择Simulation→Model Configuration Paramerers命令。</li><li>二单击工具栏中的Model Configuration Paramerers命令按钮。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830111236.png" alt=""></p><p>在仿真参数设置对话框中，仿真参数分为7类，Solver参数用于设置仿 真起始和终止时间，选择微分方程求解算法并为其规定参数，以及选择某些输出选项。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830111940.png" alt=""></p><p>仿真算法的选择首先设定算法类别：固定步长或变步长算法，再选择具体算法。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830112116.png" alt="(a)固定步长"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830112237.png" alt="(b)变步长"></p><p>设置完仿真参数之后，单击模型编辑窗口工具栏中的Run按钮，或选择 Simulation菜单项中的Run命令，便可启动对当前模型的仿真。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830162723.png" alt=""></p><p>利用Simulink仿真，分别显示曲线y=sint和y=cost，同时显示sint对 cost的变化曲线。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830164041.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830170647.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830170702.png" alt=""></p><div class='tip success'><p>注意：scope默认是一个接口，可以在双击之后，左上角设置Number of input ports为2实现cosx可以相位延时pi/2。模块属性中直接设置，将Phase（rad）设置为-pi/2即可。        <p></div><p>Simulink系统仿真的步骤：</p><ul><li>建立系统仿真模型</li><li>设置仿真参数</li><li>启动仿真并分析仿真结果</li></ul><h2 id="子系统的创建与封装"><a class="header-anchor" href="#子系统的创建与封装">¶</a>子系统的创建与封装</h2><ul><li>子系统的创建</li><li>子系统的封装</li><li>子系统的条件执行</li></ul><h3 id="子系统的创建"><a class="header-anchor" href="#子系统的创建">¶</a>子系统的创建</h3><ul><li>通过Subsystem模块建立子系统</li><li>将已有的模块转换为子系统</li></ul><p>两者的区别是：前者先建立子系统，再为其添加功能模块；后者先 选择模块，再建立子系统。</p><p>下面以创建y=kx+b子系统为例，说明具体操作。</p><h4 id="通过Subsystem模块建立子系统"><a class="header-anchor" href="#通过Subsystem模块建立子系统">¶</a>通过Subsystem模块建立子系统</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830172151.png" alt=""></p><p>双击子系统模块打开子系统编辑窗口，窗口中已经自动添加了相互连接 的一个输入模块和输出模块，表示子系统的输入端口和输出端口。将要组合的模块插入到输入模块和输出模块中间，这里需要k和b两个常数模块，一个乘法模块和一个加法模块，将这些模块重新连接起来，一个子 系统就建好了。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830172140.png" alt=""></p><p>启动仿真后查看示波器的曲线，其中蓝色曲线是正弦曲线，黄色曲线 是经过y=kx+b变换之后的曲线，这里在MATLAB命令行窗口事先给k赋3， b赋2，即黄色曲线代表y=3sint+2。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830172938.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830172959.png" alt=""></p><h4 id="通过已有的模块建立子系统"><a class="header-anchor" href="#通过已有的模块建立子系统">¶</a>通过已有的模块建立子系统</h4><p>建立的系统模型如图所示，选中系统模型中的所有模块，在模型编辑窗 口选择Diagram菜单项中的相关命令（Diagram →Subsystem &amp; Model Reference→Create Subsystem from Selection命令），或按Ctrl+G组 合键建立子系统，所选模块将被一个子系统模块取代，如果想要查看子 系统的内部结构又可以双击子系统模块。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830173259.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830173322.png" alt=""></p><h3 id="子系统的封装"><a class="header-anchor" href="#子系统的封装">¶</a>子系统的封装</h3><p>先选中所要封装的子系统，再在模型编辑窗口选择Diagram菜单项中的 Create Mask命令，或按Ctrl+M组合键，这时将出现封装编辑器（Mask Editor）对话框。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830173723.png" alt=""></p><ul><li>第一个选项卡用于设置被封装模块的图标。</li><li>第二个选项卡用来设置子系统参数设置对话框。</li><li>第三个选项卡用于设置初始化命令。</li><li>第四个选项卡用于定义封装模 块的类型、描述和帮助文本。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830173934.png" alt=""></p><p>第二个选项卡由3部分组成：左侧为控件工具箱（Controls），中间 区域显示对话框中的控件，右侧区域用于显示和修改控件的属性。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830174050.png" alt=""></p><p>下面以y=kx+b子系统为例，说明子系统参数设置对话框的设置方法。 在第二个选项卡的左侧控件工具箱中，连续2次单击Edit按钮，为子系统的2个变量准备输入位置。在中间区域分别输入该控件的提示信息和控件名，最后单击OK按钮确认设置。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830175026.png" alt="">子系统参数设置对话框设置完成后，双击子系统图标将出现其参数对话 框。例如，双击仿真模型中的y=kx+b子系统图标，则弹出如图所示的参 数对话框，允许用户输入参数k和b的值。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830175020.png" alt=""></p><p>受控制信号控制的子系统称为条件执行子系统。在条件执行子系统 中，输出信号取决于输入信号和控制信号。</p><p>条件执行子系统：</p><ul><li>使能子系统</li><li>触发子系统</li><li>使能加触发子系统</li></ul><h3 id="子系统的条件执行"><a class="header-anchor" href="#子系统的条件执行">¶</a>子系统的条件执行</h3><h4 id="使能子系统"><a class="header-anchor" href="#使能子系统">¶</a>使能子系统</h4><p>使能子系统表示控制信号由负变正时子系统开始执行，直到控制信号 再次变为负时结束。控制信号可以是标量也可以是向量。如果控制信 号是标量，则当标量的值大于0时子系统开始执行。如果控制信号是 向量，则向量中任何一个元素大于0，子系统将执行。</p><p>使能子系统外观上有一个“使能”控制信号输入端口。“使能”是指当 且仅当“使能”输入信号为正时，该模块才接收输入端的信号。可直接 选择使能子系统模块来建立使能子系统，双击使能子系统模块，打开其 内部结构窗口。</p><p>也可以展开已有子系统，添加端口与子系统（Ports &amp; Subsystems）模块库中的使能（Enable）模块，将该子系统转换为使能子系统。</p><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830175739.png" alt=""></p>          </div><div class="justified-gallery"><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830175733.png" alt=""></p>          </div><p>ex:利用使能子系统构成一个正弦半波整流器。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830175723.png" alt=""></p><p>新建一个仿真模型，将正弦波（Sine Wave）、使能子系统（Enabled Subsystem）和示波器（Scope）三个模块拖至新打开的模型编辑窗口，连接各 模块、设置参数并存盘，创建一个使能子系统。其中使能信号端接正弦模块。 在示波器窗口设置输入端口数（Number of input ports）为2，并设置输出布 局（Layout）。</p><p>在模型编辑窗口单击工具栏的Run命令按钮，就可看到半波整流波形和正弦波形。这里正弦信号当控制信号，当控制信号为负值时子系统停止执行， 输出是零。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830180219.png" alt=""></p><h4 id="触发子系统"><a class="header-anchor" href="#触发子系统">¶</a>触发子系统</h4><p>触发子系统是指当触发事件发生时开始执行子系统。</p><p>与使能子系统相类似，触发子系统的建立可直接选择Triggered Subsystem模块，或者展开已有子系统，添加Ports &amp; Subsystems模块 库中的Trigger模块，将该子系统转换为触发子系统。</p><ul><li>rising（上跳沿触发）：控制信号从负值或0上升到正值时子系统开始执行。</li><li>falling（下跳沿触发）：控制信号从正值或0下降到负值时子系统开始执行。</li><li>either（上跳沿或下跳沿触发）：当控制信号满足上跳沿或下跳沿触发条 件时，子系统开始执行。</li><li>function-call（函数调用触发）：这种触发方式必须与S函数配合使用。</li></ul><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830180208.png" alt=""></p><p>ex:利用触发子系统将一锯齿波转换成方波。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830182316.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830182330.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830182401.png" alt=""></p><div class='tip error'><p>error:没出现，方波太长<p></div><h4 id="使能加触发子系统"><a class="header-anchor" href="#使能加触发子系统">¶</a>使能加触发子系统</h4><p>所谓使能加触发子系统就是当使能控制信号和触发控制信号共 同作用时执行子系统。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830183411.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830183441.png" alt=""></p><h2 id="S函数的设计与应用"><a class="header-anchor" href="#S函数的设计与应用">¶</a>S函数的设计与应用</h2><ul><li>什么叫S函数</li><li>用M文件编写S函数的方法</li><li>在仿真模型中使用S函数的方法</li></ul><h3 id="什么叫S函数"><a class="header-anchor" href="#什么叫S函数">¶</a>什么叫S函数</h3><ul><li>S函数是系统函数(System Function)的简称,是指采用一种程序设 计语言描述的一个功能模块。</li><li>用户可以采用MATLAB语言，也可以采用C、C++或FORTRAN等语言来编写S函数。</li><li>S函数有自己特定的语法构成规则,可以用来描述并实现连续系统、 离散系统以及复合系统。</li><li>S函数能够接收来自Simulink求解算法的相关信息,并对求解算法发出的命令做出适当的响应,这种交互作用类似于Simulink系统模块与求解算法的相互作用。</li></ul><h3 id="用MATLAB语言编写S函数"><a class="header-anchor" href="#用MATLAB语言编写S函数">¶</a>用MATLAB语言编写S函数</h3><p>在MATLAB命令行窗口输入命令，打开模板文件。</p><p><font color='purple'>&gt;&gt; edit sfuntmpl.m</font></p><p>模板文件sfuntmpl.m包括：</p><ul><li>1个主函数</li><li>6个子函数</li></ul><h4 id="主函数"><a class="header-anchor" href="#主函数">¶</a>主函数</h4><p>主函数的引导语句为：</p><p><font color='purple'>function [sys,x0,str,ts]=fname(t,x,u,flag)</font></p><ul><li>fname是S函数的函数名。</li><li>输入形参t、x、u、flag分别为仿真时间、状态向量、输入向量 和子函数调用标志。</li><li>输出形参sys代表一种返回参数；x0是初始状态值；对于M文件S 函数，str将被置成一个空阵；ts是一个两列矩阵。</li></ul><h4 id="子函数"><a class="header-anchor" href="#子函数">¶</a>子函数</h4><p>S函数共有6个子函数， 这些子函数的前辍为mdl，由flag的值来控 制在仿真的各阶段调用S函数的哪一个子函数。</p><ul><li><font color='purple'>flag取0：</font>调用初始化子函数mdlInitializeSizes。</li><li><font color='purple'>flag取1：</font>调用子函数mdlDerivatives实现连续状态的更新。</li><li><font color='purple'>flag取2：</font>调用子函数mdlUpdate实现离散状态的更新。</li><li><font color='purple'>flag取3：</font>调用输出子函数mdlOutputs。</li></ul><h3 id="S函数的应用"><a class="header-anchor" href="#S函数的应用">¶</a>S函数的应用</h3><p>采用S函数实现y=kx+b。</p><h4 id="定义S函数"><a class="header-anchor" href="#定义S函数">¶</a>定义S函数</h4><p>①主函数</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[sys,x0,str,ts]</span>=<span class="title">timekb</span><span class="params">(t,x,u,flag,k,b)</span></span></span><br><span class="line"><span class="keyword">switch</span> flag</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span></span><br><span class="line">[sys,x0,str,ts]=mdlInitializeSizes; <span class="comment">%初始化</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span></span><br><span class="line">sys=mdlOutputs(t,x,u,k,b); <span class="comment">%计算输出量</span></span><br><span class="line"><span class="keyword">case</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>&#125;</span><br><span class="line">sys=[];</span><br><span class="line"><span class="keyword">otherwise</span> <span class="comment">%出错处理</span></span><br><span class="line">error(num2str(flag))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>②初始化子函数</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[sys,x0,str,ts]</span>=<span class="title">mdlInitializeSizes</span><span class="params">()</span></span></span><br><span class="line">sizes=simsizes;</span><br><span class="line">sizes.NumContStates=<span class="number">0</span>; <span class="comment">%无连续状态</span></span><br><span class="line">sizes.NumDiscStates=<span class="number">0</span>; <span class="comment">%无离散状态</span></span><br><span class="line">sizes.NumOutputs=<span class="number">1</span>; <span class="comment">%有一个输出量</span></span><br><span class="line">sizes.NumInputs=<span class="number">1</span>; <span class="comment">%有一个输入信号</span></span><br><span class="line">sizes.DirFeedthrough=<span class="number">1</span>; <span class="comment">%输出量中含有输入量</span></span><br><span class="line">sizes.NumSampleTimes=<span class="number">1</span>; <span class="comment">%单个采样周期</span></span><br><span class="line">sys=simsizes(sizes);</span><br><span class="line"><span class="comment">%给其他返回参数赋值</span></span><br><span class="line">x0=[]; <span class="comment">%设置初始状态为零状态</span></span><br><span class="line">str=[]; <span class="comment">%将str变量设置为空字符串</span></span><br><span class="line">ts=[<span class="number">-1</span>,<span class="number">0</span>]; <span class="comment">%假定继承输入信号的采样周期</span></span><br></pre></td></tr></table></figure><p>③输出子函数</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sys</span>=<span class="title">mdlOutputs</span><span class="params">(t,x,u,k,b)</span></span></span><br><span class="line">sys=k*u+b;</span><br></pre></td></tr></table></figure><h4 id="在Simulink模型中使用S函数"><a class="header-anchor" href="#在Simulink模型中使用S函数">¶</a>在Simulink模型中使用S函数</h4><p>新建一个模型，向模型编辑窗口中添加S函数模块、Sine Wave模 块和Scope模块。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830184543.png" alt=""></p><p>在模型编辑窗口中双击S函数模块，打开其参数对话框，填入S函数名 timesn，填入外部参数k和b。如果有多个外部参数，参数之间用逗号分隔。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185558.png" alt=""></p><p>在模型编辑窗口选中S函数模块，选择Diagram→Mask→Create Mask命令， 打开封装编辑器，选择Parameters &amp; Dialog选项卡，在左侧控件工具箱 中单击Edit工具，往中间的Dialog box区域的控件列表中添加编辑框控 件#1，选中该控件后，在右侧的Property editor中，在Name栏填入k， Prompt栏填入“放大倍数”，再设置参数b，设置完成后单击OK按钮。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185551.png" alt=""></p><p>S函数模块被封装后，双击它，则得到模块参数对话框。当输入k的值为 3，b的值为2时，得到的仿真结果。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185545.png" alt=""></p><p>第一根曲线是经过S函数变化后的曲线2+3sinx，第二根曲线是sinx。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185539.png" alt=""></p><ul><li>利用S函数可以创建用户自己的Simulink模块，从而使得 Simulink可以应用于更复杂系统的建模与仿真。</li><li>Simulink提供了现成的S函数模板文件，用户可以通过直 接修改模板文件来编写S函数。</li></ul><h2 id="Simulink仿真应用举例"><a class="header-anchor" href="#Simulink仿真应用举例">¶</a>Simulink仿真应用举例</h2><ul><li>蹦极跳系统的Simulink仿真模型</li><li>蹦极跳系统的安全性</li></ul><h3 id="蹦极跳（Bungee-Jumping）系统的建模与仿真"><a class="header-anchor" href="#蹦极跳（Bungee-Jumping）系统的建模与仿真">¶</a>蹦极跳（Bungee Jumping）系统的建模与仿真</h3><p>采用Simulink对蹦极跳系统进行仿真研究。要求如下：</p><ul><li>建立蹦极跳系统的Simulink仿真模型。</li><li>分析蹦极跳系统的安全性，包括：<ul><li>当弹力绳弹性系数一定时，求蹦极者的安全体重。</li><li>当蹦极者体重一定时，求弹力绳的最小弹性系数。</li></ul></li></ul><h4 id="系统分析"><a class="header-anchor" href="#系统分析">¶</a>系统分析</h4><p>蹦极者从跳台自由下落，跳台距水面的高度为h，弹力绳的长 度为s。蹦极者受到的力包括自身的重力、弹力绳的张力和空 气的阻力。设k为弹力绳的弹性系数，同时我们定义人站在跳 台时弹力绳的下端为坐标原点O，y为蹦极者相对于坐标原点的 距离，b(y)表示弹力绳的张力，其数学表达式为：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185532.png" alt=""></p><p>又设m为蹦极者的质量，g为重力加速度，a1与a2为空气阻力系 数，则系统方程可表示为这样的方程：</p><p><code>mg+b(y)-a1y'-a2y'|y'|=my''</code></p><blockquote><p>其中第3项和第4项表示空气的阻力。方程的初始条件为 y(0)=-s, y’(0)=0，也就是初始速度为0。</p></blockquote><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185458.png" alt=""></p><h4 id="仿真模型"><a class="header-anchor" href="#仿真模型">¶</a>仿真模型</h4><p>启动Simulink，打开模型编辑窗口。因为该微分方程包含的导数最高为2 阶，所以在仿真模型中需要两个积分器，可以从Simulink的连续系统模 块库中，将积分模块添加到模型编辑窗口并实现连接，y的二阶导数经过 积分环节后得到y的一阶导数，y的一阶导数经过积分环节后得到y。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830185755.png" alt=""></p><p>空气阻力有两项，都与y的一阶导数，即速度有关。使用数学运算模块库（Math Operations）中的增益模块表示空气阻力比例系数，使用用户自定义函数模块库 （User-defined Functions）中函数（Fcn）模块表示空气阻力中的非线性部分， 同时将增益模块和函数模块翻转180度，并确定它们的参数。另外添加数学运算模 块库（Math Operations）中的加法模块，并设置好参数。还有个增益模块，其输 出是y的二阶导数。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830190906.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830191552.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830191533.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830191527.png" alt=""></p><p>再回到蹦极跳系统，进行弹力绳张力的模块连接。用Switch模块来实现弹 力绳的张力，同时需要增益模块和常数模块，设置好参数并进行模块连接后得到此时的仿真模型。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830192535.png" alt=""></p><p>最后添加重力模块和输出模块。添加信号源模块中的常数模块，表示蹦极者的重力， 添加输出模块库中的示波器模块，用于输出蹦极者弹出的距离，同时还输出蹦极者与 水面的距离，即坐标原点距水面的距离，也就是h-s，再减去蹦极者弹起的距离y，如 果该值小于零，即表示人将在蹦极过程中接触水面，这是不安全的。添加常数模块、 加法模块和示波器模块，设置模块参数并进行连接，这样系统仿真模型就建好了。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830214110.png" alt=""></p><h4 id="仿真结果及分析"><a class="header-anchor" href="#仿真结果及分析">¶</a>仿真结果及分析</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; m=<span class="number">75</span>;</span><br><span class="line">&gt;&gt; g=<span class="number">9.8</span>;</span><br><span class="line">&gt;&gt; k=<span class="number">20</span>;</span><br><span class="line">&gt;&gt; a1=<span class="number">1</span>;</span><br><span class="line">&gt;&gt; a2=<span class="number">1</span>;</span><br><span class="line">&gt;&gt; h=<span class="number">100</span>;</span><br><span class="line">&gt;&gt; s=<span class="number">40</span>;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830214103.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830214055.png" alt=""></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830213906.png" alt=""></p><div class="note info">            <p>注意设置步长为100，从Configuration Parameters修改默认步长！！！</p>          </div><p>&gt;&gt; m=65;</p><p>现在将蹦极者的体重改为65kg， 其他参数不变，查看此时的曲 线，人距离水面的距离大于0， 系统是安全的，因此在系统其 他参数确定之后，对蹦极者的 体重是有要求的。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830214037.png" alt=""></p><h3 id="蹦极跳系统的安全性"><a class="header-anchor" href="#蹦极跳系统的安全性">¶</a>蹦极跳系统的安全性</h3><h4 id="求最大安全体重"><a class="header-anchor" href="#求最大安全体重">¶</a>求最大安全体重</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> m=<span class="number">100</span>:<span class="number">-0.5</span>:<span class="number">20</span></span><br><span class="line">    [t,x,y_w]=sim(<span class="string">&#x27;bengji&#x27;</span>,<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">min</span>(y_w)&gt;<span class="number">1.5</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;最大安全体重是&#x27;</span>,num2str(m)])</span><br><span class="line">dis=<span class="built_in">min</span>(y_w);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;最小的安全距离是&#x27;</span>,num2str(dis)])</span><br><span class="line"><span class="built_in">plot</span>(t,y_w)</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><div class="note info">            <p>注意simulink仿真要保存为bengji的名称，与上述代码中保持一致。否则会报错！！</p>          </div><p>程序运行后，得到结果如下：</p><p><font color='purple'>最大安全体重是67.5</font><br><font color='purple'>最小的安全距离是1.6803</font></p><p>弹力绳的弹性系数是20时，安全体重是67.5kg，安全距离是1.68m。 人到水面距离的变化曲线如图所示。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830215544.png" alt=""></p><h4 id="求最小弹性系数"><a class="header-anchor" href="#求最小弹性系数">¶</a>求最小弹性系数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">m=<span class="number">65</span>;</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">10</span>:<span class="number">0.1</span>:<span class="number">50</span></span><br><span class="line">    [t,x,y_w]=sim(<span class="string">&#x27;bengji&#x27;</span>,<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">min</span>(y_w)&gt;<span class="number">1.5</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;最小弹性系数k是&#x27;</span>,num2str(k)])</span><br><span class="line">dis=<span class="built_in">min</span>(y_w);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;最小的安全距离是&#x27;</span>,num2str(dis)])</span><br><span class="line"><span class="built_in">plot</span>(t,y_w)</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p>程序运行后，得到结果如下：</p><p><font color='purple'>最小弹性系数k是18.9</font><br><font color='purple'>最小的安全距离是1.5521</font></p><p>最小安全弹性常数是18.9，蹦极者与地面之间的最小距离是1.55m， 最小安全弹性常数下系统的仿真结果如图所示。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/stardust14/picture/img/20200830220148.png" alt=""></p><h1>外部程序接口</h1><h2 id="在Excel中使用MATLAB"><a class="header-anchor" href="#在Excel中使用MATLAB">¶</a>在Excel中使用MATLAB</h2><ul><li>Spreadsheet Link程序</li><li>将Excel表格中的数据导出到MATLAB工作空间中</li><li>从MATLAB工作空间导入数据到Excel表格中</li><li>在Excel中调用MATLAB函数进行运算</li></ul><h3 id="Spreadsheet-Link程序"><a class="header-anchor" href="#Spreadsheet-Link程序">¶</a>Spreadsheet Link程序</h3><p>Spreadsheet Link程序是MATLAB提供的Excel与MATLAB的接口 ，通过 Spreadsheet Link，可以在Excel工作区和MATLAB工作区之间进行数据交换 ，也可以在Excel中调用MATLAB的函数。</p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo一些配置（不定期更新）</title>
      <link href="/stardust14.github.io/2020/08/10/hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/stardust14.github.io/2020/08/10/hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Front-matter</h1><p>这一部分是写博客时，档案最上方以<code>---</code>分隔的区域，用于指定个别参数。</p><h2 id="page-Front-matter"><a class="header-anchor" href="#page-Front-matter">¶</a>page Front-matter</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer：</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h2 id="Post-Front-matter"><a class="header-anchor" href="#Post-Front-matter">¶</a>Post Front-matter</h2><blockquote><p>这是基于Butterfly主题下的写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments：</span></span><br><span class="line"><span class="emphasis">cover:  </span></span><br><span class="line"><span class="emphasis">toc:  </span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">auto<span class="emphasis">_open:</span></span><br><span class="line"><span class="emphasis">copyright:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author:</span><br><span class="line">copyright<span class="emphasis">_author_</span>href:</span><br><span class="line">copyright<span class="emphasis">_url:</span></span><br><span class="line"><span class="emphasis">copyright_</span>info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer：</span><br><span class="line">highlight<span class="emphasis">_shrink：</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图 (如果没有设置  top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块 (默认  true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td></tr><tr><td>auto_open</td><td>【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置  katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h1>标签外挂</h1><h2 id="Note"><a class="header-anchor" href="#Note">¶</a>Note</h2><p>用法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><div class="note info">            <p>info 直接写在markdown下就可以</p><p>标籤外挂虽然能为主题带来一些额外的功能和 UI 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意。</p>          </div><p>例如：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><h3 id="渐变note"><a class="header-anchor" href="#渐变note">¶</a>渐变note</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tip&#x27;</span> &gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>默认情况<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tip success&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>success<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tip error&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>error<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tip warning&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>warning<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class='tip' ><p>默认情况<p></div><div class='tip success'><p>success<p></div><div class='tip error'><p>error<p></div><div class='tip warning'><p>warning<p></div><h2 id="Gallery-相册图库"><a class="header-anchor" href="#Gallery-相册图库">¶</a>Gallery(相册图库)</h2><p>写法：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>example：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;关于漫威的图片&#x27; &#x27;/Gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/stardust14.github.io/img/loading.gif" data-lazy-src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/stardust14.github.io/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/stardust14.github.io/img/loading.gif" data-lazy-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>关于漫威的图片</p>  <a href='/stardust14.github.io/Gallery/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/stardust14.github.io/img/loading.gif" data-lazy-src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg'>  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href='/stardust14.github.io/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div>### volantis 主题的 note 标签<h2 id="Gallery相册"><a class="header-anchor" href="#Gallery相册">¶</a>Gallery相册</h2><p>区别于旧版的 Gallery 相册，新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。</p><p>写法：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h2 id="tag-hide"><a class="header-anchor" href="#tag-hide">¶</a>tag-hide</h2><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个inline标签外挂。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><p>待续····</p><h2 id="Button"><a class="header-anchor" href="#Button">¶</a>Button</h2><blockquote><p>3.0以上适用</p></blockquote><p>使用方法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://stardust14.github.io/&#x27;,STAR %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://stardust14.github.io/&#x27;,STAR,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://stardust14.github.io/&#x27;,STAR,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://stardust14.github.io/&#x27;,STAR,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://stardust14.github.io/&#x27;,STAR,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated " href="https://stardust14.github.io/"   title="STAR"><span>STAR</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="https://stardust14.github.io/"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://stardust14.github.io/"   title="STAR"><span>STAR</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://stardust14.github.io/"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="https://stardust14.github.io/"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn &#x27;https://stardust14.github.io&#x27;,STAR,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://stardust14.github.io&#x27;,STAR,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://stardust14.github.io&#x27;,STAR,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="https://stardust14.github.io"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a><a class="btn-beautify button--animated block center larger" href="https://stardust14.github.io"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a><a class="btn-beautify button--animated block right outline larger" href="https://stardust14.github.io"   title="STAR"><i class="far fa-hand-point-right fa-fw"></i><span>STAR</span></a><h2 id="小标签及边框颜色"><a class="header-anchor" href="#小标签及边框颜色">¶</a>小标签及边框颜色</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag [red|green|blue|yellow|grey]&quot;</span>&gt;</span></span>语法<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag red&quot;</span>&gt;</span></span>红色小标签<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag green&quot;</span>&gt;</span></span>绿色小标签<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag blue&quot;</span>&gt;</span></span>蓝色小标签<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag yellow&quot;</span>&gt;</span></span>黄色小标签<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag grey&quot;</span>&gt;</span></span>灰色小标签<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><span class="inline-tag red">红色小标签</span><br><span class="inline-tag green">绿色小标签</span><br><span class="inline-tag blue">蓝色小标签</span><br><span class="inline-tag yellow">黄色小标签</span><br><span class="inline-tag grey">灰色小标签</span></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--Color:#881B12&quot;</span>&gt;</span>自定义颜色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span class="inline-tag" style="--Color:#881B12">自定义颜色小标签</span></p><h3 id="边框"><a class="header-anchor" href="#边框">¶</a>边框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border [left|right|top|bottom] [red|green|blue|yellow|grey]&quot;</span>&gt;</span></span><br><span class="line">  语法</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border top red&quot;</span>&gt;</span>上边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border right red&quot;</span>&gt;</span>右边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border bottom red&quot;</span>&gt;</span>下边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border left red&quot;</span>&gt;</span>左边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p class="div-border top red">上边框</p><p class="div-border right red">右边框</p><p class="div-border bottom red">下边框</p><p class="div-border left red">左边框</p><p>自定义颜色</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--Color:#881B12&quot;</span>&gt;</span>自定义颜色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span class="inline-tag" style="--Color:#881B12">自定义颜色小标签</span></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border top style=&quot;</span><span class="attr">--Color:</span>#<span class="attr">881B12</span>&quot;&quot;&gt;</span>上边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p class="div-border top style="--Color:#881B12"">上边框</p><p>全边框及自定义颜色</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;div-border&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;background-color: rgba(82,196,26,.1);border: 1px solid #52c41a;border-radius: 0.4rem;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  全边框</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">/* 或者如下写法 */</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;background-color: rgba(82,196,26,.1);border: 1px solid #52c41a;border-radius: 0.4rem;display: block;padding: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  全边框</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">/* 内置样式 */</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border green&quot;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border yellow&quot;</span>&gt;</span>黄色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border grey&quot;</span>&gt;</span>灰色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;div-border blue&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>音乐</h1><p>由于部署aplayer插件出现好几次错误，也不懂，所以换用明月浩空音乐播放器，直接在主题目录下配置inject。</p><h1>JS Deliver加速</h1><p>对PicGo设置域名<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><p>上传完毕后，我们就可以通过【<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</code>】加速访问我们的图片</p><p>例如<code>https://cdn.jsdelivr.net/gh/stardust14/picture/img/test01.jpg</code></p><p>或着使用：<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p><blockquote><p>注意：</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识</title>
      <link href="/stardust14.github.io/2020/07/28/Python%E5%AD%A6%E4%B9%A0/"/>
      <url>/stardust14.github.io/2020/07/28/Python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>前言</h1><p>Python是一种面向对象、 解释型、弱类型的脚本语言,它也是一种功能强大而完善的通用型语言。</p><p>Python的两大特色是<strong>清晰的语法</strong>和<strong>可扩展性</strong>:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Python的语法非常清晰,它甚至不是一 种格式自由的语言。例如,它要求if语句的下一-行必须向右缩进,否则不能通过编译。</span><br><span class="line">Python的可扩展性体现为它的模块, Python具有脚本语言中最丰富和强大的类库(这些类库被形象地称为&quot;batteries included , 内置电池”), 这些类库覆盖 了文件I/O、GUI、 网络编程、数据库访问、文本操作等绝大部分应用场景。</span><br></pre></td></tr></table></figure><blockquote><p>+“空格” 出现小圆点</p></blockquote><h1>基础语法</h1><h2 id="变量命名规则"><a class="header-anchor" href="#变量命名规则">¶</a>变量命名规则</h2><ul><li>变量必须以字母(a-Z,A-Z)或下划线(_)开头</li><li>其他字符可以是字母，数字或</li><li>变量<em><strong>区分大小写</strong></em></li><li>Python关键字不能用作变量名。</li><li>变量的命名不能以数字来开头</li></ul><p>命名规范：</p><ul><li>见名知意，尽量使用有语义的单词命名。如使用password用作密码，<code>username</code>用户名。</li><li>小驼峰式命名法:第一个单词首字母小写其他单词首字母大写，如<code>userName</code></li><li>大驼峰式命名法:全部单词首字母都用大写， 如<code>UserName</code></li><li>下划线命名法:每个单词用_下划线连接，如<code>user_name</code>.</li></ul><h2 id="python保留字"><a class="header-anchor" href="#python保留字">¶</a>python保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h2><p>Python中单行注释以 <strong>#</strong> 开头</p><p>多行注释可以用多个 <strong>#</strong> 号，还有 <code>'''</code> 和 <code>&quot;&quot;&quot;</code></p><h2 id="多行语句"><a class="header-anchor" href="#多行语句">¶</a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句。</p><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()</p><h2 id="等待用户输入"><a class="header-anchor" href="#等待用户输入">¶</a>等待用户输入</h2><p>执行下面的程序在按回车键后就会<strong>等待用户输入</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，&quot;\n\n&quot;在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h2 id="同一行显示多条语句"><a class="header-anchor" href="#同一行显示多条语句">¶</a>同一行显示多条语句</h2><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys;x = <span class="string">&#x27;hello&#x27;</span>;sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="多个语句构成代码组"><a class="header-anchor" href="#多个语句构成代码组">¶</a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><h2 id="Print-输出"><a class="header-anchor" href="#Print-输出">¶</a>Print 输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=&quot;&quot;</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line">print( x )</span><br><span class="line">print( y )</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line">print( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><h2 id="import-与-from…import"><a class="header-anchor" href="#import-与-from…import">¶</a>import 与 from…import</h2><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import </code></p><h2 id="多个变量赋值"><a class="header-anchor" href="#多个变量赋值">¶</a>多个变量赋值</h2><p>Python允许同时为多个变量进行赋值。</p><h2 id="行与缩进"><a class="header-anchor" href="#行与缩进">¶</a>行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p><h1>基本数据类型</h1><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h2 id="字符串"><a class="header-anchor" href="#字符串">¶</a>字符串</h2><ul><li><p>python中单引号和双引号使用完全相同。</p></li><li><p>使用三引号(’’'或&quot;&quot;&quot;)可以指定一个多行字符串。</p></li><li><p>转义符 ‘’</p></li><li><p>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r&quot;this is a line with \n&quot; 则\n会显示，并不是换行。</p></li><li><p>按字面意义级联字符串，如&quot;this &quot; &quot;is &quot; &quot;string&quot;会被自动转换为this is string。</p></li><li><p>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</p></li><li><p>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</p></li><li><p>Python中的字符串不能改变。</p></li><li><p>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</p></li><li><p>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></p></li></ul> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line">print(str)  <span class="comment"># 输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])  <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(str[<span class="number">0</span>])  <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(str[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(str[<span class="number">2</span>:])  <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(str * <span class="number">2</span>)  <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(str + <span class="string">&#x27;你好&#x27;</span>)  <span class="comment"># 连接字符串</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;hello\nrunoob&#x27;</span>)  <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)  <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>另外，反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“”&quot;…&quot;&quot;&quot;</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p><p><strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><h2 id="数字类型"><a class="header-anchor" href="#数字类型">¶</a>数字类型</h2><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><p><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p></li><li><p><strong>bool</strong> (布尔), 如 True。</p></li><li><p><strong>float</strong> (浮点数), 如 1.23、3E-2</p></li><li><p><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</p></li></ul><blockquote><p>删除了python2中的long类型</p></blockquote><h2 id="List（列表）"><a class="header-anchor" href="#List（列表）">¶</a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#变量[头下标:尾下标]</span></span><br></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从<strong>末尾</strong>的开始位置。</p><p>加号 <code>+</code> 是列表连接运算符，星号 <code>*</code> 是重复操作</p><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义list列表的元素,索引从0开始</span></span><br><span class="line">list1 = [<span class="string">&#x27;Friends&#x27;</span>,<span class="number">1314</span>]</span><br><span class="line">list = [<span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;hexo&#x27;</span>, <span class="string">&#x27;blog&#x27;</span>, <span class="string">&#x27;study&#x27;</span>,list1,<span class="number">112</span>]<span class="comment">#还可以进行列表的嵌套</span></span><br><span class="line"></span><br><span class="line">list[<span class="number">0</span>] =<span class="number">6</span></span><br><span class="line">list[<span class="number">1</span>] = <span class="string">&#x27;Hexo&#x27;</span></span><br><span class="line"></span><br><span class="line">print(list)  <span class="comment">#输出整个字符串</span></span><br><span class="line">print(list[<span class="number">3</span>]) <span class="comment">#输出第四个列表元素</span></span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">#输出第二个元素到第四个列表元素</span></span><br><span class="line">print(list * <span class="number">2</span>)  <span class="comment">#输出两边列表元素</span></span><br><span class="line">print(list + list1)  <span class="comment">#连接列表</span></span><br><span class="line">print(list[<span class="number">0</span>:<span class="number">-1</span>])  <span class="comment">#输出第一个到倒数第二个元素之间的元素/除最后一个元素不输出，其他元素都输出</span></span><br><span class="line">print(list[<span class="number">2</span>:])  <span class="comment">#输出从第三个元素的所有元素</span></span><br></pre></td></tr></table></figure><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长。如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><p><strong>///！！！！！！！！待定</strong></p><h2 id="Tuple（元组）"><a class="header-anchor" href="#Tuple（元组）">¶</a>Tuple（元组）</h2><p>元组（tuple）与列表类似，不同之处在于元组的元素<strong>不能修改</strong>。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple = (<span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;god&#x27;</span>, <span class="number">123</span>, <span class="number">6.66</span>) <span class="comment">#不能嵌套元组</span></span><br><span class="line">tinytuple = (<span class="string">&#x27;hello&#x27;</span>, <span class="number">3.415</span>)</span><br><span class="line"></span><br><span class="line">print(tuple)  <span class="comment">#输出整个元组</span></span><br><span class="line">print(tuple[<span class="number">2</span>])  <span class="comment">#输出第三个元素</span></span><br><span class="line">print(tuple[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment">#输出从第一个元素到第三个元素</span></span><br><span class="line">print(tuple[<span class="number">2</span>:])  <span class="comment">#输出第三个元素之后的元素</span></span><br><span class="line">print(tinytuple * <span class="number">2</span>) <span class="comment">#输出两遍元素</span></span><br><span class="line">print(tuple + tinytuple) <span class="comment">#连接元组</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><blockquote><p>string、list 和 tuple 都属于 sequence（序列）。</p></blockquote><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素<strong>不能修改</strong>。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><h2 id="Set（集合）"><a class="header-anchor" href="#Set（集合）">¶</a>Set（集合）</h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p><strong>基本功能</strong>是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合，注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123; &#125;</code>，因为 <code>&#123; &#125;</code> 是用来创建一个<strong>空字典</strong>。</p><p>创建格式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = &#123;<span class="string">&#x27;oh&#x27;</span>, <span class="string">&#x27;my&#x27;</span>,<span class="string">&#x27;god&#x27;</span>, <span class="string">&#x27;oh&#x27;</span>, <span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(sites)  <span class="comment">#输出集合，重复的元素被自动划去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;no&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    print(<span class="string">&#x27;no在sites集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;no不在sites集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;===================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">&#x27;anvkajvbakb&#x27;</span>)<span class="comment">#好像是随机单字符排列，去重复</span></span><br><span class="line">b = set(<span class="string">&#x27;anfwbakb23&#x27;</span>)<span class="comment">#好像不进行数字的比较</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(a - b)  <span class="comment">#a和b的差集</span></span><br><span class="line"></span><br><span class="line">print(a | b)  <span class="comment">#a和b的并集</span></span><br><span class="line"></span><br><span class="line">print(a &amp; b)  <span class="comment">#a和b的交集</span></span><br><span class="line"></span><br><span class="line">print(a ^ b)  <span class="comment">#a和b中不同是存在的元素</span></span><br></pre></td></tr></table></figure><h2 id="Dictionary（字典）"><a class="header-anchor" href="#Dictionary（字典）">¶</a>Dictionary（字典）</h2><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p><em>列表</em>是<strong>有序</strong>的对象集合，<em>字典</em>是<strong>无序</strong>的对象集合。两者之间的区别在于：字典当中的元素是通过<strong>键</strong>来存取的，而<strong>不是</strong>通过偏移存取。</p><p>字典是一种映射类型，字典用 <code>&#123; &#125;</code> 标识，它是<u>一个无序</u>的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict = &#123;&#125;<span class="comment">#空字典</span></span><br><span class="line">dict[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;hello&quot;</span></span><br><span class="line">dict[<span class="number">2</span>] = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;god&#x27;</span>,<span class="string">&#x27;site&#x27;</span>:<span class="string">&#x27;helloworld&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(dict[<span class="string">&#x27;one&#x27;</span>])      <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line">print(dict[<span class="number">2</span>])          <span class="comment"># 输出键为 2 的值</span></span><br><span class="line">print(tinydict)         <span class="comment"># 输出完整的字典</span></span><br><span class="line">print(tinydict.keys()) <span class="comment"># 输出所有键</span></span><br><span class="line">print(tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 <code>&#123; &#125;</code>。</li></ul><blockquote><p>字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p></blockquote><h2 id="Python数据类型转换"><a class="header-anchor" href="#Python数据类型转换">¶</a>Python数据类型转换</h2><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>[int(x [,base\])]</code></td><td style="text-align:left">将x转换为一个整数</td></tr><tr><td style="text-align:left"><code>[float(x)]</code></td><td style="text-align:left">将x转换到一个浮点数</td></tr><tr><td style="text-align:left"><code>[complex(real [,imag\])]</code></td><td style="text-align:left">创建一个复数</td></tr><tr><td style="text-align:left"><code>[str(x)]</code></td><td style="text-align:left">将对象 x 转换为字符串</td></tr><tr><td style="text-align:left"><code>[repr(x)]</code></td><td style="text-align:left">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:left"><code>[eval(str)]</code></td><td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td style="text-align:left"><code>[tuple(s)]</code></td><td style="text-align:left">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:left"><code>[list(s)]</code></td><td style="text-align:left">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:left"><code>[set(s)]</code></td><td style="text-align:left">转换为可变集合</td></tr><tr><td style="text-align:left"><code>[dict(d)]</code></td><td style="text-align:left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td style="text-align:left"><code>[frozenset(s)]</code></td><td style="text-align:left">转换为不可变集合</td></tr><tr><td style="text-align:left"><code>[chr(x)]</code></td><td style="text-align:left">将一个整数转换为一个字符</td></tr><tr><td style="text-align:left"><code>[ord(x)]</code></td><td style="text-align:left">将一个字符转换为它的整数值</td></tr><tr><td style="text-align:left"><code>[hex(x)]</code></td><td style="text-align:left">一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:left"><code>[oct(x)]</code></td><td style="text-align:left">将一个整数转换为一个八进制字符串</td></tr></tbody></table><h1>运算符</h1><h2 id="算术运算符"><a class="header-anchor" href="#算术运算符">¶</a>算术运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加 - 两个对象相加</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除 - x 除以 y</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模 - 返回除法的余数</td></tr><tr><td style="text-align:left">**</td><td style="text-align:left">幂 - 返回x的y次幂</td></tr><tr><td style="text-align:left">//</td><td style="text-align:left">取整除 - 向下取接近商的整数</td></tr></tbody></table><h2 id="比较运算符"><a class="header-anchor" href="#比较运算符">¶</a>比较运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">等于 - 比较对象是否相等</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">不等于 - 比较两个对象是否不相等</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于 - 返回x是否大于y</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于 - 返回x是否大于等于y。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于 - 返回x是否小于等于y。</td></tr></tbody></table><h2 id="赋值运算符"><a class="header-anchor" href="#赋值运算符">¶</a>赋值运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加法赋值运算符</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减法赋值运算符</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘法赋值运算符</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除法赋值运算符</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">取模赋值运算符</td></tr><tr><td style="text-align:left">**=</td><td style="text-align:left">幂赋值运算符</td></tr><tr><td style="text-align:left">//=</td><td style="text-align:left">取整除赋值运算符</td></tr><tr><td style="text-align:left">:=</td><td style="text-align:left">海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td></tr></tbody></table><h2 id="位运算符"><a class="header-anchor" href="#位运算符">¶</a>位运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或运算符：当两对应的二进位相异时，结果为1</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移动运算符：把&quot;&gt;&gt;“左边的运算数的各二进位全部右移若干位，”&gt;&gt;&quot;右边的数指定移动的位数</td></tr></tbody></table><h2 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符">¶</a>逻辑运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">逻辑表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">and</td><td style="text-align:left">x and y</td><td style="text-align:left">布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td></tr><tr><td style="text-align:left">or</td><td style="text-align:left">x or y</td><td style="text-align:left">布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td></tr><tr><td style="text-align:left">not</td><td style="text-align:left">not x</td><td style="text-align:left">布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td></tr></tbody></table><h2 id="成员运算符"><a class="header-anchor" href="#成员运算符">¶</a>成员运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">in</td><td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td></tr></tbody></table><h2 id="身份运算符"><a class="header-anchor" href="#身份运算符">¶</a>身份运算符</h2><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">is</td><td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td></tr><tr><td style="text-align:left">is not</td><td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td></tr></tbody></table><p>is 与 == 区别：</p><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><h2 id="运算符优先级"><a class="header-anchor" href="#运算符优先级">¶</a>运算符优先级</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">**</td><td style="text-align:left">指数 (最高优先级)</td></tr><tr><td style="text-align:left">~ + -</td><td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td style="text-align:left">* / % //</td><td style="text-align:left">乘，除，求余数和取整除</td></tr><tr><td style="text-align:left">+ -</td><td style="text-align:left">加法减法</td></tr><tr><td style="text-align:left">&gt;&gt; &lt;&lt;</td><td style="text-align:left">右移，左移运算符</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">位 ‘AND’</td></tr><tr><td style="text-align:left">^ |</td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left">&lt;= &lt; &gt; &gt;=</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left">== !=</td><td style="text-align:left">等于运算符</td></tr><tr><td style="text-align:left">= %= /= //= -= += *= **=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:left">is is not</td><td style="text-align:left">身份运算符</td></tr><tr><td style="text-align:left">in not in</td><td style="text-align:left">成员运算符</td></tr><tr><td style="text-align:left">not and or</td><td style="text-align:left">逻辑运算符</td></tr></tbody></table><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/WithoutLine.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识学习笔记</title>
      <link href="/stardust14.github.io/2020/07/08/java%E5%AD%A6%E4%B9%A0/"/>
      <url>/stardust14.github.io/2020/07/08/java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>定义方法</h1><h3 id="1、定义一个方法（函数）的格式："><a class="header-anchor" href="#1、定义一个方法（函数）的格式：">¶</a>1、定义一个方法（函数）的格式：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名称()&#123;</span><br><span class="line"></span><br><span class="line">方法体</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、调用方法（函数），格式："><a class="header-anchor" href="#2、调用方法（函数），格式：">¶</a>2、调用方法（函数），格式：</h3><p>方法名称();</p><p>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么Java编译器将会自动隐含的为我们补上一个（byte）（short）（char）<!--强制转换--></p><h1>循环</h1><p><strong>三种循环的区别。</strong></p><p>1、如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do-while循环会执行至少一次。</p><p>2、for循环的变量在小括号当中定义，只有循环内部才可以使用。while循环和do-while循环初始化语句本来就在外面，所以出来循环之后还可以继续使用。</p><p><strong>break关键字的用法有常见的两种:</strong><br>1.可以用在switch语句当中，一旦执行，整个switch语句立刻结束。<br>2.还可以用在循环语句当中，-一 旦执行，整个循环语句立刻结束。打断循环。<br>关于循环的选择，有一个小建议:<br>凡是次数确定的场景多用for循环;否则多用while循环。|</p><p><strong>另一种循环控制语句是continue关键字。</strong><br>一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环。</p><p>永远停不下来的循环，叫做<strong>死循环</strong>。<br>死循环的标准格式:<br>while (true) {<br>循环体</p><p>}</p><h1>IDEA的常用快捷键</h1><table><thead><tr><th>快捷键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td><code>Alt+Enter</code></td><td style="text-align:left">导入包，自动修正代码</td></tr><tr><td><code>Ctrl+Y</code></td><td style="text-align:left">删除光标所在行</td></tr><tr><td><code>Ctrl+D</code></td><td style="text-align:left">复制光标所在行的内容，插入光标位置下面</td></tr><tr><td><code>Ctrl+Alt+L</code></td><td style="text-align:left">格式化代码（使代码规整）</td></tr><tr><td><code>Ctrl+/</code></td><td style="text-align:left">单行注释，再按取消注释</td></tr><tr><td><code>Ctrl+Shift+/</code></td><td style="text-align:left">选中代码注释，多行注释，再按取消注释</td></tr><tr><td><code>Alt+Ins</code></td><td style="text-align:left">自动生成代码，toString, get, set等方法</td></tr><tr><td><code>Alt+Shift+上下箭头</code></td><td style="text-align:left">移动当前代码行</td></tr><tr><td><code>Alt+4</code></td><td style="text-align:left">控制台调出</td></tr><tr><td><code>Alt+/</code></td><td style="text-align:left">缩写提示</td></tr><tr><td><code>shift+F6</code></td><td style="text-align:left">对每个相同的变量一次性改变</td></tr><tr><td><code>数字.fori</code></td><td style="text-align:left">for循环的快捷方式,【正序】</td></tr><tr><td><code>数字.forr</code></td><td style="text-align:left">for循环的快捷方式,【逆序】</td></tr></tbody></table><p><strong>注意事项:</strong><br>对于有返回值的方法，可以使用单独调用、打印调用或者赋值调用。<br>但是对于无返回值的方法，只能使用单独调用，不能使用打印调用或者赋值调用。</p><h1>方法</h1><p><strong>使用方法的时候，注意事项:</strong><br>1、方法应该定义在类当中，但是不能在方法当中再定义方法。不能嵌套。<br>2、方法定义的前后顺序无所谓。<br>3、方法定义之后不会执行，如果希望执行，- -定要调用:单独调用、打印调用、赋值调用。<br>4、如果方法有返回值，那么必须写.上“return 返回值;”，不能没有。</p><p>5、return后面的返回值数据，必须和方法的返回值类型，对应起来。<br>6、对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己。</p><p>7、对于void方法，对于方法当中最后一行的return可以省略不写。</p><p>8、一个方法当中可以有多个return语句，但是必须保证同时只有一个会被执行到，两个return不能连写。</p><p>判断是否一般用Boolean值</p><h2 id="方法重载（overload）"><a class="header-anchor" href="#方法重载（overload）">¶</a><strong>方法重载（overload）</strong></h2><p>多个方法的名称一样，但是参数列表不一样</p><p>好处是只需要记住唯一一个方法名称，就可以实现类似的多个功能。</p><p>在调用输出语句的时候，println方法其实就是进行了多种数据类型的重载形式。</p><p><strong>方法重载与下列因素相关:</strong><br>1、参数个数不同<br>2、参数类型不同<br>3、参数的多类型顺序不同<br><strong>方法重载与下列因素无关:</strong><br>1、与参数的名称无关<br>2、与方法的返回值类型无关</p><h3 id="练习题（方法重载）"><a class="header-anchor" href="#练习题（方法重载）">¶</a>练习题（方法重载）</h3><p>1、这题也包括了Boolean的是否判断的方法<img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200711220604.png" alt="image-20200711220601237"></p><p>2、判断是否是重载</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//正确重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125; <span class="comment">//正确重载.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125; <span class="comment">//代码错误:和第8行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125; <span class="comment">//正确重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span>. a,<span class="keyword">double</span>. b)</span></span>&#123;&#125; <span class="comment">//代码错误:和第6行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">double</span> d)</span></span>&#123;&#125; <span class="comment">//代码错误:和第5行冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//代码正确不会报错，但是并不是有效重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>. open(<span class="keyword">int</span> i,<span class="keyword">int</span> j)&#123;&#125; <span class="comment">//代码错误:和第3行冲突</span></span><br></pre></td></tr></table></figure><h1>数组</h1><h2 id="数组的概念"><a class="header-anchor" href="#数组的概念">¶</a>数组的概念</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的初始化:在内存当中创建一个数组， 并且向其中赋予一些默认值。</span></span><br><span class="line"><span class="comment">两种常见的初始化方式:</span></span><br><span class="line"><span class="comment">1.动态初始化(指定长度)</span></span><br><span class="line"><span class="comment">2.静态初始化(指定内容)</span></span><br><span class="line"><span class="comment">动态初始化数组的格式:</span></span><br><span class="line"><span class="comment">数据类型[]数组名称= new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">解析含义:</span></span><br><span class="line"><span class="comment">左侧数据类型:也就是数组当中保存的数据，全都是统-的什么类型</span></span><br><span class="line"><span class="comment">左侧的中括号:代表我是一个数组</span></span><br><span class="line"><span class="comment">左侧数组名称:给数组取一个名字</span></span><br><span class="line"><span class="comment">右侧的new:代表创建数组的动作</span></span><br><span class="line"><span class="comment">右侧数据类型:必须和左边的数据类型保持-致</span></span><br><span class="line"><span class="comment">右侧中括号的长度:也就是数组当中，到底可以保存多少个数据，是一个int数字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态初始化(指定长度) :在创建数组的时候，直接指定数组当中的数据元素个数。</span></span><br><span class="line"><span class="comment">静态初始化(指定内容) :在创建数组的时候，不直接指定数据个数多少，而是直接将具体的数据内容进行指定。</span></span><br><span class="line"><span class="comment">静态初始化基本格式:</span></span><br><span class="line"><span class="comment">数据类型[]数组名称= new 数据类型[] &#123;元素1,元素2，... &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用静态初始化数组的时候，格式还可以省略一下。<br>标准格式:<br>数据类型[]数组名称= neW  数据类型[] {元素1,元素2，… };<br>省略格式:<br>数据类型[]数组名称= {元素1,元素2，… };</p><p><strong>注意事项:</strong><br>1.静态初始化没有直接指定长度，但是仍然会自动推算得到长度。<br>2.静态初始化标准格式可以拆分成为两个步骤。<br>3.动态初始化也可以拆分成为两个步骤。<br>4.静态初始化一 旦使用省略格式，就不能拆分成为两个步骤了。<br><strong>使用建议:</strong><br>如果不确定数组当中的具体内容，用动态初始化;否则，已经确定了具体的内容，用静态初始化。|</p><p>直接打印数组名称，得到的是数组对应的:内存地址哈希值<br>**访问数组元素的格式:**数组名称[索引值]<br>索引值:就是一个int数字，代表数组当中元素的编号。<br>[注意]索引值从开始，- -直到“数组的长度-1为止。</p><p>使用<strong>动态初始化数组</strong>的时候，其中的元素将会自动拥有一个默认值。规则如下:<br>如果是整数类型，那么默认为0;<br>如果是浮点类型，那么默认为0.0;<br>如果是字符类型，那么默认为’\u0000’;（看不见）<br>如果是布尔类型，那么默认为false;<br>如果是引用类型，那么默认为null。</p><p><strong>注意事项:</strong><br>静态初始化其实也有默认值的过程，只不过系统自动马.上将默认值替换成为了大括号当中的具体数值。</p><h2 id="内存划分"><a class="header-anchor" href="#内存划分">¶</a>内存划分</h2><p>Java的内存需要划分成为5个部分:<br>1.<strong>栈(Stack)</strong> :存放的都是方法中的局部变量。<br>局部变量:方法的参数，或者是方法{}内部的变量<br>作用域:一旦超出作用域，立刻从栈内存当中消失。<br>2.<strong>堆(Heap)</strong> :凡是new出来的东西,都在堆当中。<br>堆内存里面的东西都有一个地址值: 11 6进制<br>堆内存里面的数据，都有默认值。规则:<br>如果是整数默认为0<br>如果是浮点数默认为0.0<br>如果是字符默认为’\u0000’<br>如果是布尔默认为false<br>如果是引用类型默认为null<br>3.<strong>方法区(Method Area)</strong> :存储.class相关信息，包含方法的信息。<br>4.<strong>本地方法栈(Native Method Stack)</strong> :与操作系统相关。<br>5.**寄存器(**pc Register) :与CPU相关。</p><h2 id="数组的内存图"><a class="header-anchor" href="#数组的内存图">¶</a>数组的内存图</h2><p><strong>一个数组的内存图：</strong></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712164516.png" alt="image-20200712164514236"></p><p><strong>两个数组的内存图：</strong></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712165859.png" alt="image-20200712165123071"></p><p><strong>两个引用指向同一个数组的内存图</strong></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712165840.png" alt="image-20200712165838206"></p><h2 id="常见的问题"><a class="header-anchor" href="#常见的问题">¶</a>常见的问题</h2><h3 id="1、数组索引越界异常"><a class="header-anchor" href="#1、数组索引越界异常">¶</a><strong>1、数组索引越界异常</strong></h3><p>如果访问数组元素的时候，索引编号并不存在，那么将会发生数组索引越界异常<br><code>ArrayIndexOutOfBoundsException</code><br>原因:索引编号写错了。<br>解决:修改成为存在的正确索引编号。</p><h3 id="2、空指针异常"><a class="header-anchor" href="#2、空指针异常">¶</a>2、空指针异常</h3><p>所有的引用类型变量，都可以赋值为一-个null值。但是代表其中什么都没有。<br>数组必须进行new初始化才能使用其中的元素。<br>如果只是赋值了一个null，没有进行new创建，<br>那么将会发生:<br>空指针异常<code>NullPointerException</code><br><strong>原因</strong>:忘了new<br><strong>解决</strong>:补上new</p><h2 id="获取数组的长度"><a class="header-anchor" href="#获取数组的长度">¶</a>获取数组的长度</h2><p>如何获取数组的长度，格式:<br>数组名称. length<br>这将会得到一个int数字，代表数组的长度。<br>数组一旦创建，程序运行期间，<em><strong>长度不可改变</strong></em>。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200712171637.png" alt="image-20200712171219524"></p><p><strong>数组的遍历输出：使用for循环</strong></p><p><strong>数组的最值：使用for循环和if判断</strong></p><h2 id="数组元素反转"><a class="header-anchor" href="#数组元素反转">¶</a>数组元素反转</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713111225.png" alt="image-20200713111223768"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Demo07ArrayReverse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line"><span class="comment">//遍历打印数组本来的样子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">System.out. println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化语句: int min =日, max = array. length - 1</span></span><br><span class="line"><span class="comment">条件判断: min &lt; max</span></span><br><span class="line"><span class="comment">步进表达式: min+t, max--</span></span><br><span class="line"><span class="comment">循环体:用第三个变量倒手</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = array.<span class="number">1</span>ength - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = array[min] ;</span><br><span class="line">array[min] = array[max];</span><br><span class="line">array[max] = temp;</span><br><span class="line">&#125;</span><br><span class="line">I</span><br><span class="line"><span class="comment">//再次打印遍历输出数组后来的样子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组作为方法参数"><a class="header-anchor" href="#数组作为方法参数">¶</a>数组作为方法参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组可以作为方法的参数。</span></span><br><span class="line"><span class="comment">当调用方法的时候，向方法的小括号进行传参，传递进去的其实是数组的地址值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayParam</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[]array=&#123;_10，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>，<span class="number">50</span>&#125;;</span><br><span class="line">System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line">printArray(array); <span class="comment">//传递进去的就是array当中保存的地址值</span></span><br><span class="line">System . out. println(<span class="string">&quot;==========AAA==========&quot;</span>);</span><br><span class="line">printArray(array);</span><br><span class="line">System. out. println(<span class="string">&quot;==========BBB-=========&quot;</span>);</span><br><span class="line">printArray(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型:只是进行打印而已，不需要进行计算，也没有结果，用void</span></span><br><span class="line"><span class="comment">方法名称: printArray</span></span><br><span class="line"><span class="comment">参数列表:必须给我数组，我才能打印其中的元素。int[] array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">System . out. println(<span class="string">&quot;printArray方法收到的参数是: &quot;</span>);</span><br><span class="line">System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array. length; i++) &#123;</span><br><span class="line">System. out. println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713112817.png" alt="image-20200713112816224"></p><h2 id="数组作为方法返回值"><a class="header-anchor" href="#数组作为方法返回值">¶</a>数组作为方法返回值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个方法可以有0、1、多个参数;但是只能有0或者1个返回值，不能有多个返回值。</span></span><br><span class="line"><span class="comment">如果希望一个方法当中产生了多个结果数据进行返回，怎么办?</span></span><br><span class="line"><span class="comment">解决方案:使用一个数组作为返回值类型即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">任何数据类型都能作为方法的参数类型，或者返回值类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组作为方法的参数，传递进去的其实是数组的地址值。</span></span><br><span class="line"><span class="comment">数组作为方法的返回值，返回的其实也是数组的地址值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayReturn</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] result = calculate( a: <span class="number">10</span>，b: <span class="number">20</span>，C: <span class="number">30</span>);</span><br><span class="line">    System. out . println( <span class="string">&quot;main方法接收到的返回值数组是: &quot;</span>);</span><br><span class="line">System. out. println(result);</span><br><span class="line"></span><br><span class="line">System. out. println(<span class="string">&quot;总和: &quot;</span> + result[<span class="number">0</span>]);</span><br><span class="line">System. out. println(<span class="string">&quot;平均数:&quot;</span> + result[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] calculate(<span class="keyword">int</span> a, <span class="keyword">int</span> b，<span class="keyword">int</span> c) &#123;</span><br><span class="line">intsum=a+b+c;<span class="comment">//总和</span></span><br><span class="line">intavg=sum/<span class="number">3</span>;<span class="comment">//平均数</span></span><br><span class="line"><span class="comment">//两个结果都希望进行返回</span></span><br><span class="line"><span class="comment">//需要一个数组，也就是一个塑料兜，数组可以保存多个结果</span></span><br><span class="line"><span class="comment">/*这是一种方法</span></span><br><span class="line"><span class="comment">int[] array = new int[2];</span></span><br><span class="line"><span class="comment">array[0] = sum; //总和</span></span><br><span class="line"><span class="comment">array[1] = avg; //平均数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//这是另一种方法</span></span><br><span class="line"><span class="keyword">int</span>[ ] array = &#123; sum， avg &#125;;</span><br><span class="line">    System. out . println(<span class="string">&quot;calculate方法内部数组是: &quot;</span>); </span><br><span class="line">System. out . println(array); <span class="comment">//地址值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果：</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200713113840.png" alt="image-20200713113838924"></p><h1>面向对象思想</h1><h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">面向过程:当需要实现-个功能的时候，每一一个具体的步骤都要亲力亲为，详细处理每一个细节 。</span></span><br><span class="line"><span class="comment">面向对象:当需要实现一个功能的时候，不关心具体的步骤，而是找一个已经具有该功能的人，来帮我做事儿。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>， <span class="number">40</span>， <span class="number">50</span>， <span class="number">60</span> &#125;;</span><br><span class="line"><span class="comment">//要求打印格式为: [10, 20，30, 40, 50]</span></span><br><span class="line"><span class="comment">//使用面向过程，每一个步骤细节都要 亲力亲为。</span></span><br><span class="line">System. out. print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.<span class="number">1</span>ength; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == array. length - <span class="number">1</span>) &#123; <span class="comment">//如果是最后一个元素</span></span><br><span class="line">System. out . println(array[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不是最后一-个元素</span></span><br><span class="line">System. out . print(array[i] + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System. out . print1n(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"><span class="comment">//使用面向对象</span></span><br><span class="line">        <span class="comment">//找一个JDk给我们提供好的Arrays类,</span></span><br><span class="line"><span class="comment">//其中有一个toString方法，直接就能把数组变成想要的格式的字符串</span></span><br><span class="line">System. out . println(Arrays . toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●面向过程:强调步骤。<br>●面向对象:强调对象，这里的对象就是洗衣机。</p><p>特点：</p><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。<br>面向对象的语言中，包含了三大<strong>基本特征</strong>，即封装、继承和多态。</p><h2 id="类和对象"><a class="header-anchor" href="#类和对象">¶</a>类和对象</h2><h3 id="类"><a class="header-anchor" href="#类">¶</a>类</h3><p>●类:是一组相关属性和行为的集合。可以看成是一 类事物的模板,使用事物的属性特征和行为特征来描述该类<br>事物。<br>现实中，描述一类事物:<br>●属性:就是该事物的状态信息。<br>●行为:就是该事物能够做什么。</p><h3 id="对象"><a class="header-anchor" href="#对象">¶</a>对象</h3><p>●对象:是一类事物的具体体现。对象是类的一个实例(对象并不是找个女朋友) ,必然具备该类事物的属性和行为。</p><h3 id="类和对象的关系"><a class="header-anchor" href="#类和对象的关系">¶</a>类和对象的关系</h3><p>●类是对一类事物的描述,是抽象的。<br>●对象是一类事物的实例，是具体的。<br>●类是对象的模板，对象是类的实体。</p><h2 id="类的定义"><a class="header-anchor" href="#类的定义">¶</a>类的定义</h2><h3 id="事物与类的对比"><a class="header-anchor" href="#事物与类的对比">¶</a>事物与类的对比</h3><p>现实世界的一类事物:<br><strong>属性</strong>:事物的状态信息。<br><strong>行为</strong>:事物能够做什么。<br>Java中用class描述事物也是如此:<br><strong>成员变量</strong>:对应事物的属性<br><strong>成员方法</strong>:对应事物的行为</p><h3 id="类定义的格式"><a class="header-anchor" href="#类定义的格式">¶</a>类定义的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●<strong>定义类:<strong>就是定义类的成员，包括成员变量和成员方法。<br>●</strong>成员量:<strong>和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中，方法外。</strong><br>●</strong>成员方法:<strong>和以前定义方法几乎是一样的。只不过把</strong>static</strong>去掉， <strong>static</strong>的作用在面向对象后面课程中再详细讲解。</p><p><strong>注意事项:</strong><br>1.成员变量是直接定义在类当中的，在方法外边。<br>2.成员方法不要写static关键字。</p><h2 id="对象的创建及其使用"><a class="header-anchor" href="#对象的创建及其使用">¶</a>对象的创建及其使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通常情况下，一个类并不能直接使用，需要根据类创建一个对象， 才能使用。</span></span><br><span class="line"><span class="comment">1.导包:也就是指出需要使用的类，在什么位置。</span></span><br><span class="line"><span class="comment">import包名称.类名称;</span></span><br><span class="line"><span class="comment">import cn. itcast. day06. demo01. Student;</span></span><br><span class="line"><span class="comment">对于和当前类属于同一-个包的情况，可以省略导包语句不写。</span></span><br><span class="line"><span class="comment">2.创建,格式:</span></span><br><span class="line"><span class="comment">类名称对象名= new</span></span><br><span class="line"><span class="comment">类名称();</span></span><br><span class="line"><span class="comment">Student stu = new Student();</span></span><br><span class="line"><span class="comment">3.使用，分为两种情况:</span></span><br><span class="line"><span class="comment">使用成员变量:对象名.成员变量名</span></span><br><span class="line"><span class="comment">使用成员方法:对象名.成员方法名(参数)</span></span><br><span class="line"><span class="comment">(也就是，想用谁，就用对象名点儿谁。)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.导包。</span></span><br><span class="line"><span class="comment">//我需要使用的Student类,和我自己Demo02Student位于同一一个包下，所以省略导包语句不写</span></span><br><span class="line"><span class="comment">// 2.创建，格式:</span></span><br><span class="line"><span class="comment">//类名称对象名= new类名称();</span></span><br><span class="line"><span class="comment">//根据Student类，创建了一个名， 为stu的对象</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3.使用其中的成员变量，格式:</span></span><br><span class="line"><span class="comment">//对象名.成员变量名.</span></span><br><span class="line">System. out. println(stu. name); <span class="comment">// null</span></span><br><span class="line">System. out . println(stu.age); <span class="comment">//0</span></span><br><span class="line">System. out . print1n(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//改变对象当中的成员变量数值内容</span></span><br><span class="line"><span class="comment">//将右侧的字符串，赋值交给stu对象当中的name成员变量</span></span><br><span class="line">stu.name =“赵丽颖”;</span><br><span class="line">stu.age = <span class="number">18</span>;</span><br><span class="line">System. out . println(stu.name); <span class="comment">//赵丽颖</span></span><br><span class="line">System. out . println(stu.age); <span class="comment">// 18</span></span><br><span class="line">    System. out . print1n(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.使用对象的成员方法，格式:</span></span><br><span class="line"><span class="comment">//对象名.成员方法名()</span></span><br><span class="line">stu.eat();<span class="comment">//吃饭饭！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机类的练习题"><a class="header-anchor" href="#手机类的练习题">¶</a>手机类的练习题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是手机类</span></span><br><span class="line"><span class="comment">定义一个类，用来模拟“手机”事物。</span></span><br><span class="line"><span class="comment">属性:品牌、价格、颜色</span></span><br><span class="line"><span class="comment">行为:打电话、发短信</span></span><br><span class="line"><span class="comment">对应到类当中:</span></span><br><span class="line"><span class="comment">成员变量(属性) :</span></span><br><span class="line"><span class="comment">String brand; //品牌</span></span><br><span class="line"><span class="comment">double price; //价格.</span></span><br><span class="line"><span class="comment">String color; //颜色</span></span><br><span class="line"><span class="comment">成员方法(行为) :</span></span><br><span class="line"><span class="comment">public void call(String who) &#123;&#125; //打电话</span></span><br><span class="line"><span class="comment">public void sendMessage() &#123;&#125; //群发短信</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pub1ic <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">String brand; <span class="comment">//品牌</span></span><br><span class="line"><span class="keyword">double</span> price; <span class="comment">//价格</span></span><br><span class="line">String color; <span class="comment">//颜色</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String who)</span> </span>&#123;</span><br><span class="line">System. out. println(<span class="string">&quot;给&quot;</span> + who + <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System. out . println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用phone</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据Phone类，创建一个名为 one的对象</span></span><br><span class="line"><span class="comment">//格式:类名称对象名= new类名称();</span></span><br><span class="line">Phone one = <span class="keyword">new</span> Phone();</span><br><span class="line">System. out. println(one.brand); <span class="comment">// null</span></span><br><span class="line">System. out . println(one.price); <span class="comment">// 0.0</span></span><br><span class="line">System. out . println(one.co1or); <span class="comment">// null</span></span><br><span class="line">System. out. println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"></span><br><span class="line">one.brand = <span class="string">&quot;苹果&quot;</span>;</span><br><span class="line">one.price = <span class="number">8388.0</span>;</span><br><span class="line">one.color = <span class="string">&quot;黑色&quot;</span>;</span><br><span class="line">System. out . println(one . brand); <span class="comment">//苹果</span></span><br><span class="line">System. out. println(one.price); <span class="comment">// 8388.0</span></span><br><span class="line">System. out . println(one.color); <span class="comment">//黑色</span></span><br><span class="line">    System. out. println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    one.call( who:<span class="string">&quot;乔布斯&quot;</span>) ;</span><br><span class="line">one.sendMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个对象的内存图"><a class="header-anchor" href="#一个对象的内存图">¶</a>一个对象的内存图</h2><p>new的东西全在堆之中</p><p>压栈，先来的在底下，后进先出，先进后出</p><p>黑色的X代表出栈</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715185054.png" alt="image-20200715184735566"></p><h2 id="两个对象使用同一个方法的内存图"><a class="header-anchor" href="#两个对象使用同一个方法的内存图">¶</a>两个对象使用同一个方法的内存图</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715185842.png" alt="image-20200715185840625"></p><h2 id="两个引用指向同一个对象的内存图"><a class="header-anchor" href="#两个引用指向同一个对象的内存图">¶</a>两个引用指向同一个对象的内存图</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200715190554.png" alt="image-20200715190552009"></p><h2 id="使用对象类型作为方法的参数"><a class="header-anchor" href="#使用对象类型作为方法的参数">¶</a>使用对象类型作为方法的参数</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200716224605.png" alt="image-20200716223939500"></p><p><strong>注意：<strong>当一个对象作为参数，传递到方法当中时，实际上传递进去的是对象的</strong>地址值</strong>。</p><h2 id="使用对象类型作为方法的返回值"><a class="header-anchor" href="#使用对象类型作为方法的返回值">¶</a>使用对象类型作为方法的返回值</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="../../../picture/PicGo/copypicture/image-20200717164340634.png" alt="image-20200717164340634"></p><h2 id="成员变量和局部变量的区别"><a class="header-anchor" href="#成员变量和局部变量的区别">¶</a>成员变量和局部变量的区别</h2><p>局部变量和成员变量<br>1.定义的位置不一样[重点]<br>局部变量:在方法的内部<br>成员变量:在方法的外部，直接写在类当中<br>2.作用范围不一样[重点]<br>局部变量:只有方法当中才可以使用，出了方法就不能再用<br>成员变量:整个类全都可以通用,<br>3.默认值不一样[重点]<br>局部变量:没有默认值，如果要想使用，必须手动进行赋值<br>成员变量:如果没有赋值，会有默认值，规则和数组一样<br>方法的参数就是局部变量，参数在方法调用的时候，必然会被赋值的<br>4.内存的位置不一样(了解)<br>局部变量:位于栈内存<br>成员变量:位于堆内存<br>5.生命周期不一样(了解)<br>局部变量:随着方法进栈而诞生，随着方法出栈而消失<br>成员变量:随着对象创建而诞生，随着对象被垃圾回收而消失</p><h2 id="面向对象三大特征之封装性"><a class="header-anchor" href="#面向对象三大特征之封装性">¶</a>面向对象三大特征之封装性</h2><p>面向对象三大特征:封装、继承、多态。<br>封装性在Java当中的体现:<br>1.方法就是一种封装<br>2.关键字private也是一种封装<br>封装就是将一些细节信息隐藏起来， 对于外界不可见。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述:定义Person的年龄时，无法阻止不合理的数值被设置进来。</span></span><br><span class="line"><span class="comment">解决方案:用private关键字将需要保护的成员变量进行修饰。</span></span><br><span class="line"><span class="comment">一旦使用了private进行修饰，那么本类当中仍然可以随意访问。</span></span><br><span class="line"><span class="comment">但是!超出了本类范围之外就不能再直接访问了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">间接访问private成员变量，就是定义一对儿Getter/Setter方法</span></span><br><span class="line"><span class="comment">必须叫setXxx或者是getXxx命名规则。</span></span><br><span class="line"><span class="comment">对于Getter来说，不能有参数，返回值类型和成员变量对应;</span></span><br><span class="line"><span class="comment">对于Setter来说，不能有返回值，参数类型和成员变量对应。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">String name; <span class="comment">// 姓名.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"><span class="function">pub1ic <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System. out . println(<span class="string">&quot;我叫:&quot;</span>+ name + <span class="string">&quot;,年龄:&quot;</span> + age);</span><br><span class="line"><span class="comment">//这个成员方法，专门用于向age设置数据,往age里放</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//set必须有参数无返回值void</span></span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">100</span>&amp;&amp;num&gt;=<span class="number">0</span>)&#123;<span class="comment">//如果是合理情况</span></span><br><span class="line">age = num;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System. out. println( <span class="string">&quot;数据不合理! &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//这个成员方法，专门私语获取age的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="comment">//get必须没有参数，有返回值</span></span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person. show( ) ;</span><br><span class="line">person. name =“赵丽颖<span class="string">&quot;;</span></span><br><span class="line"><span class="string">//person. age= -20; //直接访问private内容，错误写法!</span></span><br><span class="line"><span class="string">person. setAge(20) ;|</span></span><br><span class="line"><span class="string">person. show();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="练习题"><a class="header-anchor" href="#练习题">¶</a>练习题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于基本类型当中的boolean值，Getter方法一 -定 要写成isXxx的形式，而setXxx规则不变。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> male; <span class="comment">//是不是爷们儿</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMale</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">male=b;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> male ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">name = str;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">age = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this关键字的作用"><a class="header-anchor" href="#this关键字的作用">¶</a>this关键字的作用</h2><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。<br>如果需要访问本类当中的成员变量，需要使用格式:<br>this.成员变量名<br>“通过谁调用的方法，谁就是this。”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publiC <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name; <span class="comment">//我自己的名字</span></span><br><span class="line"><span class="comment">//参数name是对方的名字</span></span><br><span class="line"><span class="comment">//成员变量name是自己的名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System. out . println(name + <span class="string">&quot;,你好。我是&quot;</span>+ <span class="keyword">this</span>. name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a class="header-anchor" href="#构造方法">¶</a>构造方法</h2><p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。<br>格式:<br>public类名称(参数类型参数名称) {<br>方法体<br>注意事项:<br>1.构造方法的名称必须和所在的类名称完全-样，就连大小写也要一样<br>2.构造方法不要写返回值类型，连void都不写<br>3.构造方法不能return一个具体的返回值<br>4.如果没有编写任何构造方法，那么编译器将会默认赠送一 个构造方法，没有参数、方法体什么事情都不做。<br>public Student() {}<br>5.一旦编写了至少一个构造方法，那么编译器将不再赠送。<br>6.构造方法也是可以进行重载的。<br>重载:方法名称相同，参数列表不同。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System. out . print1n(“无参构造方法执行啦! <span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">public Student(String name, int age) &#123;</span></span><br><span class="line"><span class="string">System. out . println(&quot;</span>全参构造方法执行啦! <span class="string">&quot;);</span></span><br><span class="line"><span class="string">this.name = name ;</span></span><br><span class="line"><span class="string">this.age = age;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    public void setName(String name) &#123;</span></span><br><span class="line"><span class="string">this.name = name;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">public String getName() &#123;</span></span><br><span class="line"><span class="string">return name ;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">public void setAge(int age) &#123;</span></span><br><span class="line"><span class="string">this.age = age;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">public int getAge() &#123;</span></span><br><span class="line"><span class="string">return age;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stul = <span class="keyword">new</span> Student(); <span class="comment">//无参构造</span></span><br><span class="line">System. out . println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student( name: “赵丽颖<span class="string">&quot;，age: 20); //全参构造</span></span><br><span class="line"><span class="string">System. out . println(&quot;</span>姓名:”+ stu2. getName() + <span class="string">&quot;，年龄:”+ stu2.getAge());</span></span><br><span class="line"><span class="string">        //如果需要改变对象当中的成员变量数据内容，仍然还需要使用setXxx方法</span></span><br><span class="line"><span class="string">stu2. setAge(21); //改变年龄</span></span><br><span class="line"><span class="string">System. out . println(&quot;</span>姓名:”+ stu2.getName() + <span class="string">&quot;，年龄:”+ stu2.getAge());               </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="定义一个标准的类"><a class="header-anchor" href="#定义一个标准的类">¶</a>定义一个标准的类</h2><p><strong>一个标准的类通常要拥有下面四个组成部分:</strong><br><strong>1.所有的成员变量都要使用private关键字修饰</strong><br><strong>2.为每一个成员变量编写一对儿Getter/Setter方法</strong><br><strong>3.编写一个无参数的构造方法</strong><br><strong>4.编写一个全参数的构造方法</strong><br><strong>这样标准的类也叫做Java Bean</strong></p><p><strong>自动生成</strong>*<u>Getter/Setter方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Getter and Setter------&gt;全部选中（shift）+ok</p><p><strong>自动生成</strong>*<u>无参数的构造方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Constructor-------&gt;Select None</p><p><strong>自动生成</strong>*<u>全参数的构造方法</u>*：Code----&gt;Generate(Alt+inset)-----&gt;Constructor-------&gt;全部选中（shift）+ok</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        stu1.setName(<span class="string">&quot;霉霉&quot;</span>);</span><br><span class="line">        stu1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu1.getName() +<span class="string">&quot;年龄：&quot;</span>+stu1.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;水果姐&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu2.getName() +<span class="string">&quot;年龄：&quot;</span>+stu2.getAge());</span><br><span class="line">        stu2.setAge(<span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+stu2.getName() +<span class="string">&quot;年龄：&quot;</span>+stu2.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>API</h1><h2 id="概述-v2"><a class="header-anchor" href="#概述-v2">¶</a>概述</h2><p>API(Application Programming Interface),应用程序编程接口。Java API是一本程序员的<code>字典</code>，是JDK中提供给我们使用的类的<strong>说明文档</strong>。这些类将底层的代码实现封装了起来，我们不需要关心这些类是如何实现的,只需要学习这些类如何使用即可。所以我们可以通过查询API的方式，来学习Java提供的类，并得知如何使用它们。</p><h2 id="API使用步骤"><a class="header-anchor" href="#API使用步骤">¶</a>API使用步骤</h2><p>1.打开帮助文档。<br>2.点击显示，找到索引，看到输入框。<br>3.你要找谁?在输入框里输入，然后回车。<br>4.看包。java.lang 下的类不需要导包，其他需要。<br>5.看类的解释和说明。<br>6.学习构造方法。<br>7.使用成员方法。</p><h2 id="Scanner类"><a class="header-anchor" href="#Scanner类">¶</a>Scanner类</h2><h3 id="概述-v3"><a class="header-anchor" href="#概述-v3">¶</a>概述</h3><p>一个可以解析基本类型和字符串的简单文本扫描器。<br>例如，以吓代码使用户能够从System.in中读取一个数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sC = <span class="keyword">new</span> Scanner(System. in);</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure><blockquote><p>备注: <a href="http://System.in">System.in</a> 系统输入指的是通过键盘录入数据。</p></blockquote><h3 id="使用步骤"><a class="header-anchor" href="#使用步骤">¶</a>使用步骤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java. util . Scanner;<span class="comment">// 1.导包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**Scanner类的功能:**可以实现键盘输入数据，到程序当中。</span></span><br><span class="line"><span class="comment">引用类型的一般使用步骤: </span></span><br><span class="line"><span class="comment">**1.导包**</span></span><br><span class="line"><span class="comment">import包路径.类名称;</span></span><br><span class="line"><span class="comment">如果需要使用的目标类，和当前类位于同- -个包下，则可以省略导包语句不写。</span></span><br><span class="line"><span class="comment">只有java. lang包下的内容不需要导包，其他的包都需要import语句。</span></span><br><span class="line"><span class="comment">**2.创建**</span></span><br><span class="line"><span class="comment">类名称对象名= new 类名称();</span></span><br><span class="line"><span class="comment">**3.使用**</span></span><br><span class="line"><span class="comment">对象名.成员方法名()</span></span><br><span class="line"><span class="comment">获取键盘输入的一个int数字: int num = sc. nextInt();</span></span><br><span class="line"><span class="comment">获取键盘输入的一个字符串: String str =sc.next();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Scanner</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2.创建</span></span><br><span class="line"><span class="comment">//备注: System. in代表从键盘进行输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System. in);</span><br><span class="line"><span class="comment">// 3.获取键盘输入的int数字</span></span><br><span class="line"><span class="keyword">int</span> num = sc.nextInt( );</span><br><span class="line">System. out. println( <span class="string">&quot;输入的int数字是:&quot;</span> + num);</span><br><span class="line">       <span class="comment">// 4.获取键盘输入的字符串</span></span><br><span class="line">String str = sc.next( );</span><br><span class="line">System. out . println( <span class="string">&quot;输入的字符串是:&quot;</span> + str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="练习题-v2"><a class="header-anchor" href="#练习题-v2">¶</a>练习题</h4><p>1、键盘输入两个int数字，并求出和值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ScannerSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = src.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = src.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = a + b ;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、键盘输入三个int数字，然后求出其中的最大值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">键盘输入三个int数字，然后求出其中的最大值。</span></span><br><span class="line"><span class="comment">思路，</span></span><br><span class="line"><span class="comment">芯岭:</span></span><br><span class="line"><span class="comment">1.既然是键盘输入，肯定需要用到Scanner</span></span><br><span class="line"><span class="comment">2. Scanner三个步骤:导包、创建、使用nextInt()方法</span></span><br><span class="line"><span class="comment">3. 既然是三个数字，那么调用三次nextInt()方法，得到三个int变量</span></span><br><span class="line"><span class="comment">4.无法同时判断三个数字谁最大，应该转换成为两个步骤:</span></span><br><span class="line"><span class="comment">    4.1首先判断前两个当中谁最大，拿到前两个的最大值</span></span><br><span class="line"><span class="comment">    4.2拿着前两个中的最大值，再和第三个数字比较，得到三个数字当中的最大值</span></span><br><span class="line"><span class="comment">5.打印最终结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ScannerMax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> [] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = src.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = src.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> c = src.nextInt();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> temp = a &gt; b ? a:b;</span><br><span class="line">       <span class="keyword">int</span> max = temp &gt; c ? temp:c;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果：&quot;</span>+max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名对象的说明"><a class="header-anchor" href="#匿名对象的说明">¶</a>匿名对象的说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建对象的标准格式:</span></span><br><span class="line"><span class="comment">类名称 对象名= new 类名称();</span></span><br><span class="line"><span class="comment">匿名对象就是只有右边的对象，没有左边的名字和赋值运算符。</span></span><br><span class="line"><span class="comment">new.类名称();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">匿名对象只能使用唯一-的一 次，下次再用不得不再创建一个新对 象。</span></span><br><span class="line"><span class="comment">使用建议:如果确定有一个对象只需要使用唯一 的一 次，就可以用匿名对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Anonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person one = <span class="keyword">new</span> Person();</span><br><span class="line">        one.name = <span class="string">&quot;泰勒斯威夫特&quot;</span>;<span class="comment">//我叫泰勒斯威夫特</span></span><br><span class="line">        one.ShowName();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Person().name=<span class="string">&quot;Rose&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> Person().ShowName();<span class="comment">//我叫null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名对象作为方法的参数和返回值"><a class="header-anchor" href="#匿名对象作为方法的参数和返回值">¶</a>匿名对象作为方法的参数和返回值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Anonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//普通使用方式</span></span><br><span class="line">        Scanner src = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数值：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = src.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的结果是：&quot;</span>+ num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名对象的方式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数值：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的结果是：&quot;</span>+ num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用一般方法传入参数</span></span><br><span class="line"><span class="comment">//        Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        methodParam(sc);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用匿名对象来进行传递参数</span></span><br><span class="line">        methodParam(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line"></span><br><span class="line">        Scanner sc = methodreturn();</span><br><span class="line">        <span class="keyword">int</span> num3=sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输出：&quot;</span>+num3);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodParam</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的是：&quot;</span>+ num);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">methodreturn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        return sc;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Random"><a class="header-anchor" href="#Random">¶</a>Random</h2><h3 id="概述和基本使用"><a class="header-anchor" href="#概述和基本使用">¶</a>概述和基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Random类用来生成随机数字。使用起来也是三个步骤:</span></span><br><span class="line"><span class="comment">1.导包</span></span><br><span class="line"><span class="comment">import java . util . Random;</span></span><br><span class="line"><span class="comment">2.创建</span></span><br><span class="line"><span class="comment">Random r = new Random(); //小括号当中留空即可</span></span><br><span class="line"><span class="comment">3.使用</span></span><br><span class="line"><span class="comment">获取一个随机的int数字(范围是int所有范围，有正负两种) : int num =r.nextInt()</span></span><br><span class="line"><span class="comment">获取一个随机的int数字(参数代表了范围，左闭右开区间) : int num = r. nextInt(3)</span></span><br><span class="line"><span class="comment">实际上代表的含义是: [0,3)， 也就是0~2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;随机数为：&quot;</span>+num);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = r.nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(num1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习题-v3"><a class="header-anchor" href="#练习题-v3">¶</a>练习题</h4><p>1、生成1-n之间的随机数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目要求:</span></span><br><span class="line"><span class="comment">根据int变量n的值，来获取随机数字，范围是[1,n]， 可以取到1也可以取到n。</span></span><br><span class="line"><span class="comment">思路</span></span><br><span class="line"><span class="comment">1.定义一个int变量n，随意赋值</span></span><br><span class="line"><span class="comment">2.要使用Random: 三个步骤，导包、创建、使用</span></span><br><span class="line"><span class="comment">3.如果写10，那么就是0~9，然而想要的是1~10，可以发现:整体+1即可。</span></span><br><span class="line"><span class="comment">4.打印随机数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(n);</span><br><span class="line">            System.out.println(num + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        <span class="keyword">int</span> result = r.nextInt(n) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(result);<span class="comment">//本来范围是[0,1)，整体+1之后变成了[1,n+1)， 也就是[1,n]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、猜数字小游戏</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">用代码模拟猜数字的小游戏。</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.首先需要产生一个随机数字，并且- - 旦产生不再变化。用Random的nextInt方法</span></span><br><span class="line"><span class="comment">2.需要键盘输入，所以用到了Scanner</span></span><br><span class="line"><span class="comment">3.获取键盘输入的数字，用Scanner当中的nextInt方法</span></span><br><span class="line"><span class="comment">4.已经得到了两个数字，判断(if) -下:</span></span><br><span class="line"><span class="comment">    如果太大了，提示太大，并且重试;</span></span><br><span class="line"><span class="comment">    如果太小了，提示太小，并且重试:</span></span><br><span class="line"><span class="comment">    如果猜中了，游戏结束。</span></span><br><span class="line"><span class="comment">5.重试就是再来一次， 循环次数不确定，用while(true)。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03RandomGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;<span class="comment">//范围是在[1，100]区间</span></span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你猜测的数字：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> num1 = sc.nextInt();<span class="comment">//读取键盘输入的数字</span></span><br><span class="line">            <span class="keyword">if</span> (num1 &lt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜测的数字偏小，请重新输入！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &gt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜测的数字偏大，请重新输入！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你猜对了！！！！！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//Game over 退出游戏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象数组"><a class="header-anchor" href="#对象数组">¶</a>对象数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义一个数组，用来存储3个Person对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组有一个缺点：一旦创建，程序运行期间长度不可以发生改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先创建一个长度为3的数组，里面用来存放Person类型的对象</span></span><br><span class="line">        Person [] array = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        Person one = <span class="keyword">new</span> Person(<span class="string">&quot;霉霉&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Person two = <span class="keyword">new</span> Person(<span class="string">&quot;水果姐&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Person three = <span class="keyword">new</span> Person(<span class="string">&quot;Rechel&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        array[<span class="number">0</span>] = one;  <span class="comment">//将one当中的地址值赋值到数组的0号元素位置</span></span><br><span class="line">        array[<span class="number">1</span>] = two;<span class="comment">//将two当中的地址值赋值到数组的1号元素位置</span></span><br><span class="line">        array[<span class="number">2</span>] = three;<span class="comment">//将three当中的地址值赋值到数组的2号元素位置</span></span><br><span class="line"></span><br><span class="line">        System.out.println(array[<span class="number">0</span>].getName() + <span class="string">&quot;  &quot;</span>+ array[<span class="number">0</span>].getAge());</span><br><span class="line">        System.out.println(array[<span class="number">1</span>].getName() + <span class="string">&quot;  &quot;</span> + array[<span class="number">1</span>].getAge());</span><br><span class="line">        System.out.println(array[<span class="number">2</span>].getName() + <span class="string">&quot;  &quot;</span> + array[<span class="number">2</span>].getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList类"><a class="header-anchor" href="#ArrayList类">¶</a>ArrayList类</h2><p><code>java.util. Arraylist</code> 是<strong>大小可变的数组</strong>的实现，存储在内的数据称为元素。此类提供一 些方法来操作内部存储的元素。<code>ArrayList</code> 中可不断添加元素，其大小也自动增长。</p><blockquote><p>和数组的区别：<br>数组的长度不可以发生改变。<br>但是ArrayList集合的长度是可以随意变化的。</p></blockquote><h3 id="基本使用和概述"><a class="header-anchor" href="#基本使用和概述">¶</a>基本使用和概述</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于ArrayList来说，有一个尖括号&lt;E&gt;代表泛型。</span></span><br><span class="line"><span class="comment">泛型:也就是装在集合当中的所有元素，全都是统- -的什么类型。</span></span><br><span class="line"><span class="comment">注意:泛型只能是引用类型，不能是基本类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。</span></span><br><span class="line"><span class="comment">如果内容是空，得到的是空的中括号: []</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建了一个ArrayList集合，集合的名称是list， 里面装的全都是String字符串类型的数据</span></span><br><span class="line">        <span class="comment">//备注:从JDK 1.7+开始，右侧的尖括号内部可以不写内容，但是&lt;&gt;本身还是要写的。</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中放一些数据，需要用到add方法</span></span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Manica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Jeoy&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Phobe&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Bing&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list.add(100);//错误写法!因为创建的时候尖括号泛型已经说了是字符串，</span></span><br><span class="line">                         <span class="comment">// 添加进去的元素就必须都是字符串才行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用方法和遍历"><a class="header-anchor" href="#常用方法和遍历">¶</a>常用方法和遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayL ist当中的常用方法有:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public boolean add(E e): 向集合当中添加元素，参数的类型和泛型一致。</span></span><br><span class="line"><span class="comment">备注:对于ArrayL ist集合来说，add添加动作一定是成功的，所以返回值可用可不用。</span></span><br><span class="line"><span class="comment">但是对于其他集合(今后学习)来说，add添加动作不一定成功。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public E get(int index): 从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public E remove(int index): 从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public int size(): 获取集合的尺寸长度，返回值是集合中包含的元素个数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素：add</span></span><br><span class="line">        <span class="keyword">boolean</span> success = list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加的动作是否成功&quot;</span> + success);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Bing&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Jeoy&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[柳岩, Rose, Rechel, Bing, Jeoy]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合中获取元素: get。 索引值从开始0开始</span></span><br><span class="line">        String name = list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二号位索引值为：&quot;</span> + name);<span class="comment">//Rechel</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合中删除元素：remove。索引值从0开始</span></span><br><span class="line">        String whoRemove = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的是：&quot;</span> + whoRemove);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取集合的长度，也就是集合中的元素数</span></span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;集合的长度是：&quot;</span> + size);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rechel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Manica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Chandler&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Pheebs&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Joey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合存储基本数据类型"><a class="header-anchor" href="#集合存储基本数据类型">¶</a>集合存储基本数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从JDK 1.5+开始， 支持自动装箱、自动拆箱。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自动装箱:基本类型--&gt; 包装类型（引用类型）</span></span><br><span class="line"><span class="comment">自动拆箱:包装类型--&gt;基本类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ArrayListBasic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//错误写法!泛型只能是引用类型，不能是基本类型</span></span><br><span class="line">       <span class="comment">//ArrayList&lt;int&gt; listB = new ArrayList&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; listC = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listC.add(<span class="number">1000</span>);</span><br><span class="line">        listC.add(<span class="number">18888</span>);</span><br><span class="line">        listC.add(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">int</span> num = listC.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一号元素是：&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>基本类型</th><th>包装类(引用类型，包装类都位于<code>java. lang</code>包下)</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer          <strong>[特殊]</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character      <strong>[特殊]</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="练习题-v4"><a class="header-anchor" href="#练习题-v4">¶</a>练习题</h3><h4 id="1、存储随机数字"><a class="header-anchor" href="#1、存储随机数字">¶</a>1、存储随机数字</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">生成6个1~33之间的随机整数，添加到集合，并遍历集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.需要存储6个数字，创建一个集合， &lt;Integer&gt;</span></span><br><span class="line"><span class="comment">2.产生随机数，需要用到Random</span></span><br><span class="line"><span class="comment">3.用循环6次，来产生6个随机数字: for循环</span></span><br><span class="line"><span class="comment">4.循环内调用r. nextInt(int n)，参数是33，0~32，整体+1才是1~33</span></span><br><span class="line"><span class="comment">5.把数字添加到集合中: add</span></span><br><span class="line"><span class="comment">6.遍历集合: for、size、 get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ArrayListRandom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(<span class="number">33</span>);</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> +j+ <span class="string">&quot;号元素为：&quot;</span> + list.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、存储自定义对象"><a class="header-anchor" href="#2、存储自定义对象">¶</a>2、存储自定义对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">自定义4个学生对象，添加到集合，并遍历。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.自定义Student学生类， 四个部分。</span></span><br><span class="line"><span class="comment">2.创建一个集合，用来存储学生对象。泛型: &lt;Student&gt;</span></span><br><span class="line"><span class="comment">3.根据类，创建4个学生对象。</span></span><br><span class="line"><span class="comment">4.将4个学生对象添加到集合中: add</span></span><br><span class="line"><span class="comment">5.遍历集合: for、size、 get</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03ArrayListStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;Pheebs&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">&quot;Manica&quot;</span>,<span class="number">26</span>);</span><br><span class="line">        Student stu4 = <span class="keyword">new</span> Student(<span class="string">&quot;Rayray&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        list.add(stu1);</span><br><span class="line">        list.add(stu2);</span><br><span class="line">        list.add(stu3);</span><br><span class="line">        list.add(stu4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Student one = list.get(i);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;名学生是：&quot;</span> + one.getName() + <span class="string">&quot;，年龄是：&quot;</span> + one.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">#### 3、按指定格式遍历集合</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义以指定格式打印集合的方法(ArrayList类型作为参数)，使用&#123;&#125;扩起集合，使用@分隔每个元素。</span></span><br><span class="line"><span class="comment">格式参照&#123;元素@元素@元素&#125;。</span></span><br><span class="line"><span class="comment">System. out. println(list);     [10, 20, 30]</span></span><br><span class="line"><span class="comment">printArrayList(list);           &#123;10@20@30&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04ArrayListPrint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rachel&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Monica&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Chandler&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Pheebs&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Joey&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        printArraylist(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义方法的三要素</span></span><br><span class="line"><span class="comment">    返回值类型:只是进行打印而已，没有运算，没有结果，所以用void</span></span><br><span class="line"><span class="comment">    方法名称: printArraylist</span></span><br><span class="line"><span class="comment">    参数列表: Arraylist</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArraylist</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            String name = list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(name + <span class="string">&quot;@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、筛选集合中的随机数"><a class="header-anchor" href="#4、筛选集合中的随机数">¶</a>4、筛选集合中的随机数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">用一个大集合存入20个随机数字，然后筛选其中的偶数元素，放到小集合当中。</span></span><br><span class="line"><span class="comment">要求使用自定义的方法来实现筛选。</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.需要创建一个大集合，用来存储int数字: &lt;Integer&gt;</span></span><br><span class="line"><span class="comment">2.随机数字就用Random nextInt</span></span><br><span class="line"><span class="comment">3.循环20次，把随机数字放入大集合: for循环、add方法</span></span><br><span class="line"><span class="comment">4.定义一个方法，用来进行筛选。</span></span><br><span class="line"><span class="comment">筛选:根据大集合，筛选符合要求的元素，得到小集合。</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型: ArrayLlist小集合(里面元素个数不确定)</span></span><br><span class="line"><span class="comment">方法名称: getSmalllist</span></span><br><span class="line"><span class="comment">参数列表: ArrayList大集合(装着20个随机数字)</span></span><br><span class="line"><span class="comment">5.判断(if)是偶数:num%2==0</span></span><br><span class="line"><span class="comment">6.如果是偶数，就放到小集合当中，否则不放。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05ArrayListReturn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; biglist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">//1~100</span></span><br><span class="line">            biglist.add(num1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大集合是：&quot;</span> + biglist);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，me</span></span><br><span class="line">        selectMethod(biglist);</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//teacher</span></span><br><span class="line">        ArrayList&lt;Integer&gt; SmallList = getsmallList(biglist);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SmallList.size(); i++) &#123;</span><br><span class="line">            System.out.println(SmallList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        System.out.println(SmallList);</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数一共&quot;</span>+ SmallList.size() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义筛选方法，me</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectMethod</span><span class="params">(ArrayList&lt;Integer&gt; biglist)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; smallList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; biglist.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (biglist.get(i) % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> num2 = biglist.get(i);</span><br><span class="line">                smallList.add(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;小集合是：&quot;</span> + smallList);</span><br><span class="line">            System.out.println(<span class="string">&quot;偶数一共&quot;</span> + smallList.size() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收大集合参数，返回小集合结果,teacher</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">getsmallList</span><span class="params">(ArrayList&lt;Integer&gt; biglist)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个小集合，用来装偶数结果</span></span><br><span class="line">        ArrayList&lt;Integer&gt; SmallList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; biglist.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num3 = biglist.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num3%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                SmallList.add(num3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SmallList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串（String）"><a class="header-anchor" href="#字符串（String）">¶</a>字符串（String）</h2><h3 id="概述和特点"><a class="header-anchor" href="#概述和特点">¶</a>概述和特点</h3><p><code>java. lang. String</code>类代表字符串。<br>API当中说: Java程序中的所有字符串字面值(如&quot;abc&quot; )都作为此类的实例实现。<br>其实就是说:程序当中所有的双引号字符串，都是String类的对象。(就算没有new， 也照样是。)<br>字符串的特点:<br>1.字符串的内容<strong>永不可变</strong>。[重点]<br>2.正是因为字符串不可改变，所以字符串是可以共享使用的。<br>3.字符串效果上相当于是char[ ]字符数组， 但是底层原理是byte[]字节数组。</p><h3 id="构造方法和直接创建"><a class="header-anchor" href="#构造方法和直接创建">¶</a>构造方法和直接创建</h3><p>创建字符串的常见3+1种方式。<br>三种构造方法:<br>public String(): 创建一个空白字符串， 不含有任何内容。<br>public String(char[] array): 根据字符数组的内容，来创建对应的字符串。<br>public String(byte[] array): 根据字节数组的内容，来创建对应的字符串。<br>一种直接创建:<br><code>String str = &quot;Hello&quot;; //右边直接用双引号</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用空参构造</span></span><br><span class="line">        String str1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个字符串：&quot;</span> + str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据字符数组创建字符串</span></span><br><span class="line">        <span class="keyword">char</span>[] charArry = &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span> ,<span class="string">&#x27;6&#x27;</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(charArry);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个字符串：&quot;</span> + str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据字节数组创建字符串</span></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个字符串：&quot;</span> + str3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接创建字符串</span></span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四个字符串：&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的常量池"><a class="header-anchor" href="#字符串的常量池">¶</a>字符串的常量池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(charArray);</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(str1 == str3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(str2 == str3);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200726121234.png" alt="image-20200726121231535"></p><h3 id="字符串的比较方法"><a class="header-anchor" href="#字符串的比较方法">¶</a>字符串的比较方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">==是进行对象的地址值比较，如果确买需要子符串的内容比较，可以使用两个方法:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public. boolean equals(Object. obj): 参数可以是任何对象，只有参数是一个字符串并 且内容相同的才会给true;否则返回false。</span></span><br><span class="line"><span class="comment">备注:任何对象都能用object进行接收。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.任何对象都能用object进行接收。</span></span><br><span class="line"><span class="comment">2. equals方法具有 对称性，也就是a. equals(b)和b. equals(a)效果-样。</span></span><br><span class="line"><span class="comment">3.如果比较双方一个常量-一个变量，推荐把常量字符串写在前面。</span></span><br><span class="line"><span class="comment">推荐: &quot;abc&quot;. equals(str)不推荐: str. equals(&quot;abc&quot;)</span></span><br><span class="line"><span class="comment">public boolean equalsIgnoreCase(String str): 忽略大小写，进行内容比较。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringEquals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(charArray);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str3.equals(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>.equals(str3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(str1.equals(str4));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str5 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equals(str5));<span class="comment">//推荐：false</span></span><br><span class="line">        <span class="comment">//System.out.println(str5.equals(&quot;abc&quot;));//不推荐，报错，空指针异常NullPointerException</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str4));<span class="comment">//true,忽略大小写</span></span><br><span class="line">        <span class="comment">//注意：只有英文字母区分大小写，汉字不区分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串获取相关方法"><a class="header-anchor" href="#字符串获取相关方法">¶</a>字符串获取相关方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String当中与获取相关的常用方法有:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public int length(); 获取字符串当中含有的字符个数，拿到字符串长度。</span></span><br><span class="line"><span class="comment">public String concat(String str): 将当前字符串和参数字符串拼接成为返回值新的字符串。</span></span><br><span class="line"><span class="comment">public char charAt(int index): 获取指定索引位置的单个字符。( 索引从开始。)</span></span><br><span class="line"><span class="comment">public int index0f(String str): 查找参数字符串在本字符串当中首次出现的索引位置，如果没有返回-1值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="string">&quot;askkjfbakjkjdbajhvbajbvn&quot;</span>.length();</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串的个数：&quot;</span> + length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接字符串</span></span><br><span class="line">        String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        String str3 = str1.concat(str2);</span><br><span class="line">        System.out.println(str1);<span class="comment">//Hello</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//World</span></span><br><span class="line">        System.out.println(str3);<span class="comment">//HelloWorld,新的字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定索引位置的单个字符</span></span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">&quot;Hello&quot;</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第零号索引位置的字符是：&quot;</span> + ch);<span class="comment">//H</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找参数字符串在本来字符串当中出现的第一次索引的位置</span></span><br><span class="line">        <span class="comment">//如果没有，返回-1值</span></span><br><span class="line">        String original = <span class="string">&quot;HelloWorldHelloWorld&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> index = original.indexOf(<span class="string">&quot;llo&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次索引值：&quot;</span> + index);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>.indexOf(<span class="string">&quot;abc&quot;</span>));<span class="comment">//-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的截取方法"><a class="header-anchor" href="#字符串的截取方法">¶</a>字符串的截取方法</h3><blockquote><p>字符串的截取方法: .<br>public String substring(int index): 截取从参数位置- -直到字符串末尾，返回新字符串。<br>public String substring(int begin, int end): 截取从begin开始， 一直到end结束，中间的字符串。<br>备注: [begin,end)， 包含左边，不包含右边。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01SubString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String str2 = str1.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(str1);<span class="comment">//原封不动</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//World,新字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str3 = str1.substring(<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line">        System.out.println(str3);<span class="comment">//oWo</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面这种写法，字符串的内容仍然是没有改变的</span></span><br><span class="line">        <span class="comment">//下面有两个字符串: &quot;Hello&quot;，&quot;Java&quot;</span></span><br><span class="line">        <span class="comment">//strA当中保存的是地址值。</span></span><br><span class="line">        <span class="comment">//本来地址值是Hello的0x666,</span></span><br><span class="line">        <span class="comment">//后来地址值变成了Java的0x999</span></span><br><span class="line">        String strA = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(strA);<span class="comment">//Hello</span></span><br><span class="line">        strA = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(strA);<span class="comment">//Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的转换相关方法"><a class="header-anchor" href="#字符串的转换相关方法">¶</a>字符串的转换相关方法</h3><blockquote><p>String当中与转换相关的常用方法有:</p><p>public char[] toCharArray(): 将当前字符串拆分成为字符数组作为返回值。<br>public byte[] getBytes(): 获得当前字符串底层的字节数组。<br>public String replace(CharSequence oldString, CharSequence newString):<br>将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串。<br>备注: CharSequence意思就是说可以接受字符串类型。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringConvert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转换成字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">&quot;Hello&quot;</span>.toCharArray();</span><br><span class="line">        System.out.println(chars[<span class="number">0</span>]);<span class="comment">//H</span></span><br><span class="line">        System.out.println(chars.length);<span class="comment">//5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="string">&quot;abc&quot;</span>.getBytes();</span><br><span class="line">        System.out.println(bytes);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.println(bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串的内容替换</span></span><br><span class="line">        String str1 = <span class="string">&quot;How you doing?&quot;</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;(·——·)&quot;</span>);</span><br><span class="line">        System.out.println(str1);<span class="comment">//How you doing?</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//How you doing(·——·)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String lang1 = <span class="string">&quot;你他妈的会不会玩，我操,我操！！！&quot;</span>;</span><br><span class="line">        String lang2 = lang1.replace(<span class="string">&quot;我操&quot;</span>, <span class="string">&quot;我*&quot;</span>);</span><br><span class="line">        String lang3 = lang2.replace(<span class="string">&quot;他妈的&quot;</span>, <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(lang3);<span class="comment">//你***会不会玩，我*,我*！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的分割方法"><a class="header-anchor" href="#字符串的分割方法">¶</a>字符串的分割方法</h3><p>分割字符串的方法: .<br>public String[] split(String regex): 按照参数的规则，将字符串切分成为若干部分。</p><p><strong>注意事项</strong>:<br>split方法的参数其实是一个“<strong>正则表达式</strong>”，今后学习。<br>今天要注意:如果按照英文句点**“.”**进行切分，必须写<code>&quot;\\.&quot;</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StringSplit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;a,bb,ccc,dddd,eeeee&quot;</span>;</span><br><span class="line">        String[] str2 = str1.split(<span class="string">&quot;,&quot;</span>);<span class="comment">//以逗号为规则进行切割</span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span><br><span class="line">            System.out.println(str2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        String str3 = <span class="string">&quot;A BB CCC DDDD EEEEE FFFFFF&quot;</span>;</span><br><span class="line">        String[] str4 = str3.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为规则进行切割</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str4.length; i++) &#123;</span><br><span class="line">            System.out.println(str4[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以“.”必须用“\\.”表示，比较特殊的切割</span></span><br><span class="line">        String str5 = <span class="string">&quot;XXXX.YYYY.ZZZZ&quot;</span>;</span><br><span class="line">        String[] str6 = str5.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str6.length; i++) &#123;</span><br><span class="line">            System.out.println(str6[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习题-v5"><a class="header-anchor" href="#练习题-v5">¶</a>练习题</h3><h4 id="1、按指定格式拼接字符串"><a class="header-anchor" href="#1、按指定格式拼接字符串">¶</a>1、按指定格式拼接字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">定义一个方法，把数组&#123;1, 2, 3&#125;按照指定格式拼接成一个字符串 。格式参照如下: [word1#word2#word3]。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.首先准备一个int[]数组，内容是: 1、2、3</span></span><br><span class="line"><span class="comment">2.定义一个方法，用来将数组变成字符串</span></span><br><span class="line"><span class="comment">三要素</span></span><br><span class="line"><span class="comment">返回值类型: String</span></span><br><span class="line"><span class="comment">方法名称: fromArrayToString</span></span><br><span class="line"><span class="comment">参数列表: int[]</span></span><br><span class="line"><span class="comment">3.格式: [word1 #word2#word3]</span></span><br><span class="line"><span class="comment">用到: for循环、字符串拼接、每个数组元素之前都有-个word字样、分隔使用的是#、区分- -下是不是最后-一个</span></span><br><span class="line"><span class="comment">4.调用方法，得到返回值，并打印结果字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StringPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] Array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String result = fromArrayToString(Array);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fromArrayToString</span><span class="params">(<span class="keyword">int</span>[] Array)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i ==Array.length - <span class="number">1</span> )&#123;</span><br><span class="line">                str += <span class="string">&quot;word&quot;</span> + Array[i] + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">&quot;word&quot;</span> + Array[i] + <span class="string">&quot;#&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、统计输入的字符串中各种字符的个数"><a class="header-anchor" href="#2、统计输入的字符串中各种字符的个数">¶</a>2、统计输入的字符串中各种字符的个数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">键盘输入一个字符串，并且统计其中各种字符出现的次数。</span></span><br><span class="line"><span class="comment">种类有:大写字母、小写字母、数字、其他</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.既然用到键盘输入，肯定是Scanner</span></span><br><span class="line"><span class="comment">2.键盘输入的是字符串，那么: String str = sc.next();</span></span><br><span class="line"><span class="comment">3.定义四个变量，分别代表四种字符各自的出现次数。</span></span><br><span class="line"><span class="comment">4.需要对字符串一个字、一个字检查，String--&gt;char[],方法就是toCharArray()</span></span><br><span class="line"><span class="comment">5.遍历char[ ]字符数组，对当前字符的种类进行判断，并且用四个变量进行++动作。</span></span><br><span class="line"><span class="comment">6.打印输出四个变量，分别代表四种字符出现次数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StringCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String input = sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> countUpper = <span class="number">0</span>;<span class="comment">//大写字母</span></span><br><span class="line">        <span class="keyword">int</span> countLower = <span class="number">0</span>;<span class="comment">//小写字母</span></span><br><span class="line">        <span class="keyword">int</span> countNumber = <span class="number">0</span>;<span class="comment">//数字</span></span><br><span class="line">        <span class="keyword">int</span> countOther = <span class="number">0</span>;<span class="comment">//其他字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] Array = input.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = Array[i];<span class="comment">//当前单个字符</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;A&#x27;</span> &lt;= ch &amp;&amp; ch &lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                countUpper++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;a&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                countLower++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;=ch &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                countNumber++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                countOther++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母的个数：&quot;</span> + countUpper);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母的个数：&quot;</span> + countLower);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字的个数：&quot;</span> + countNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他字符的个数：&quot;</span> + countOther);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入的字符串不能有空格存在</p></blockquote><h2 id="静态static关键字"><a class="header-anchor" href="#静态static关键字">¶</a>静态static关键字</h2><h3 id="概述-v4"><a class="header-anchor" href="#概述-v4">¶</a>概述</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727143324.png" alt="image-20200726215716336"></p><h3 id="修饰成员变量"><a class="header-anchor" href="#修饰成员变量">¶</a>修饰成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个成员变量使用了static关键字， 那么这个变量不再属于对象自己，而是属于所在的类。多个对象共享同一-份数据。.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01StaticField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student one = <span class="keyword">new</span> Student(<span class="string">&quot;霉霉&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        one.room = <span class="string">&quot;101教室&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + one.getName() + <span class="string">&quot;,年龄：&quot;</span></span><br><span class="line">                + one.getAge() + <span class="string">&quot;,教室：&quot;</span> + one.room</span><br><span class="line">        +<span class="string">&quot;，学号：&quot;</span> + one.getId());</span><br><span class="line"></span><br><span class="line">        Student two = <span class="keyword">new</span> Student(<span class="string">&quot;水果姐&quot;</span> ,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + two.getName() + <span class="string">&quot;,年龄：&quot;</span></span><br><span class="line">                + two.getAge()+ <span class="string">&quot;,教室：&quot;</span> + two.room</span><br><span class="line">                +<span class="string">&quot;，学号：&quot;</span> + two.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">static</span> String room;<span class="comment">//教室</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idcounter = <span class="number">0</span>;<span class="comment">//学号计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idcounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idcounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰成员方法"><a class="header-anchor" href="#修饰成员方法">¶</a>修饰成员方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numStatic;<span class="comment">//静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个成员方法&quot;</span>);</span><br><span class="line">        <span class="comment">//成员方法可以访问成员变量</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//成员方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个静态方法&quot;</span>);</span><br><span class="line">        <span class="comment">//静态方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">        <span class="comment">//静态方法不可以访问成员变量</span></span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line"><span class="comment">//        System.out.println(this);静态方法不能用this（当前方法调用）关键字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">无论是成员变量，还是成员方法。如果有了static,都推荐使用类名称进行调用。</span></span><br><span class="line"><span class="comment">静态变量:类名称.静态变量</span></span><br><span class="line"><span class="comment">静态方法:类名称.静态方法()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.静态不能直接访问非静态。</span></span><br><span class="line"><span class="comment">原因:因为在内存当中是[先]有的静态内容，[后] 有的非静态内容。</span></span><br><span class="line"><span class="comment">“先人不知道后人，但是后人知道先人。”</span></span><br><span class="line"><span class="comment">2.静态方法当中不能用this。</span></span><br><span class="line"><span class="comment">原因: this代表当前对象，通过谁调用的方法，谁就是当前对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02StaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass();<span class="comment">//首先创建对象</span></span><br><span class="line">        <span class="comment">//然后才能用没有static关键字的内容</span></span><br><span class="line">        obj.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。</span></span><br><span class="line">        obj.methodStatic();<span class="comment">//正确，不推荐；这种写法在编译之后也会被javac翻译成为“类名称.静态方法名”</span></span><br><span class="line">        MyClass.methodStatic();<span class="comment">//正确，推荐</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于本来当中的静态方法，可以省略类名称</span></span><br><span class="line">        Memethod();</span><br><span class="line">        Dome02StaticMethod.Memethod();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Memethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自己的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存图"><a class="header-anchor" href="#内存图">¶</a>内存图</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727143255.png" alt="image-20200727143244285"></p><h3 id="静态代码块"><a class="header-anchor" href="#静态代码块">¶</a>静态代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态代码块的格式是:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class 类名称&#123;</span></span><br><span class="line"><span class="comment">static &#123;</span></span><br><span class="line"><span class="comment">//静态代码块的内容</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">特点:当第一次用到本类时，静态代码块执行唯一的一 次。</span></span><br><span class="line"><span class="comment">静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">静态代码块的典型用途:</span></span><br><span class="line"><span class="comment">用来一次性地对静态成员变量进行赋值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数组工具类Arrays"><a class="header-anchor" href="#数组工具类Arrays">¶</a>数组工具类Arrays</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java. util.Arrays是一个与 数组相天的工具类，里面提供I大重静念万法，用来头现数组常见的操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static String toString(数组): 将参数数组变成字符串(按照默认格式: [元素1, 元素2,元素3...]) .</span></span><br><span class="line"><span class="comment">public static void sort(数组):按照默认升序(从小到大)对数组的元素进行排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:</span></span><br><span class="line"><span class="comment">1.如果是数值，sort默认按照升序从小到大</span></span><br><span class="line"><span class="comment">29如果是字符串，sort默认按照字母升序</span></span><br><span class="line"><span class="comment">3.如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。 (今后学习)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Arrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] intArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        <span class="comment">//将int[]数组按照默认格式变成字符串</span></span><br><span class="line">        String intStr = Arrays.toString(intArray);</span><br><span class="line">        System.out.println(intStr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] array1 =&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Arrays.sort(array1);</span><br><span class="line">        System.out.println(Arrays.toString(array1));</span><br><span class="line"></span><br><span class="line">        String[] str = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;z&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;x&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;c&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;b&quot;</span></span><br><span class="line">                ,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;j&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;p&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        System.out.println(Arrays.toString(str));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习题-v6"><a class="header-anchor" href="#练习题-v6">¶</a>练习题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">请使用Arrays相关的API, 将一个随机字符串中的所有字符升序排列，并倒序打印。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ArraysPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//升级：用键盘读取输入的字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何进行升序排列: sort</span></span><br><span class="line">        <span class="comment">//必须是一个数组，才能用Arrays. sort方法</span></span><br><span class="line">        <span class="comment">// String --&gt;数组，用toCharArray</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        System.out.println(Arrays.toString(chars));<span class="comment">//这是顺序排列</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接下来需要逆序排列，倒序遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学工具类"><a class="header-anchor" href="#数学工具类">¶</a>数学工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.lang.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static double abs(double num): 获取绝对值。</span></span><br><span class="line"><span class="comment">public static double ceil(double num): 向.上取整。</span></span><br><span class="line"><span class="comment">public static double floor(double num):向下取整。</span></span><br><span class="line"><span class="comment">public static long round(double num): 四舍五入。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Math. PI代表近似的圆周率常量(double)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Math</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取绝对值</span></span><br><span class="line">        System.out.println(Math.abs(<span class="number">3.14</span>));<span class="comment">//3.14</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">8</span>));<span class="comment">//8</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">5.1</span>));<span class="comment">//5.1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上取整</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.9</span>));<span class="comment">//4.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.0</span>));<span class="comment">//3.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.00000001</span>));<span class="comment">//4.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.0000000000000000001</span>));<span class="comment">//3.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下取整，抹零</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.666</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.00</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">6.999</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//四舍五入</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.5</span>));<span class="comment">//6.0</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.40000001</span>));<span class="comment">//5.0</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">5.3</span>));<span class="comment">//5.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//pi</span></span><br><span class="line">        System.out.println(Math.PI);<span class="comment">//3.141592653589793</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习题-v7"><a class="header-anchor" href="#练习题-v7">¶</a>练习题</h4><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200727155149.png" alt="image-20200727155147074"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目:</span></span><br><span class="line"><span class="comment">计算在-10.8到5.9之间，绝对值大于6或者小于2.1的整数有多少个?</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">1.既然已经确定了范围，for循环</span></span><br><span class="line"><span class="comment">2.起点位置-10.8应该转换成为-10， 两种办法:</span></span><br><span class="line"><span class="comment">    2.1可以使用Math.ceil方法，向上(向正方向)取整</span></span><br><span class="line"><span class="comment">    2.2强转成为int，自动舍弃所有小数位</span></span><br><span class="line"><span class="comment">3.每一个数字都是整数，所以步进表达式应该是num++， 这样每次都是+1的。</span></span><br><span class="line"><span class="comment">4.如何拿到绝对值: Math. abs方法。.</span></span><br><span class="line"><span class="comment">5.一旦发现了一个数字，需要让计数器+ +进行统计。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04MathPractise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> min = -<span class="number">10.9</span>;</span><br><span class="line">        <span class="keyword">double</span> max = <span class="number">5.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) min; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> abs = Math.abs(i);</span><br><span class="line">            <span class="keyword">if</span> (abs &gt; <span class="number">6</span> || abs &lt; <span class="number">2.1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;符合要求的数字为：&quot;</span> + i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;符合要求的个数为：&quot;</span> + count + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>继承性</h1><h2 id="概述-v5"><a class="header-anchor" href="#概述-v5">¶</a>概述</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728102030.png" alt="image-20200728102028290"></p><h2 id="格式"><a class="header-anchor" href="#格式">¶</a>格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在继承的关系中，“子类就是一一个父类”。也就是说，子类可以被当做父类看待。</span></span><br><span class="line"><span class="comment">例如父类是员工，子类是讲师，那么“讲师就是一个员工”。 关系: is-a。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义父类的格式: (一个普通的类定义)</span></span><br><span class="line"><span class="comment">public class 父类名称&#123;</span></span><br><span class="line"><span class="comment">    //...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">定义子类的格式:</span></span><br><span class="line"><span class="comment">public class 子类名称extends 父类名称&#123;</span></span><br><span class="line"><span class="comment">    //....</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="成员变量的访问特点"><a class="header-anchor" href="#成员变量的访问特点">¶</a>成员变量的访问特点</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numFu = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用本类之中，不会向下找子类的</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numZi = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//因为本类之中有num，所以优先使用本类中的num</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">直接通过子类对象访问成员变量:</span></span><br><span class="line"><span class="comment">    等号左边是谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment">间接通过成员方法访问成员变量:</span></span><br><span class="line"><span class="comment">该方法属于谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01ExtendsField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu =<span class="keyword">new</span> Fu();<span class="comment">//创建父类对象</span></span><br><span class="line">        System.out.println(fu.numFu);<span class="comment">//10，只能使用父类的东西，没有任何子类内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Zi zi=<span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(zi.numZi);<span class="comment">//20</span></span><br><span class="line">        System.out.println(zi.numFu);<span class="comment">//10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等号左边是谁，就优先用谁</span></span><br><span class="line">        System.out.println(zi.num);<span class="comment">//优先子类，2000</span></span><br><span class="line"><span class="comment">//        System.out.println(zi.aba);//到处都没有，编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(fu.num);<span class="comment">//100</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个方法是子类的，优先子类的，没有再向上找</span></span><br><span class="line">        zi.methodZi();<span class="comment">//2000</span></span><br><span class="line">        <span class="comment">//这个方法是在父类当中定义的</span></span><br><span class="line">        zi.methodFu();<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分子类方法中重名的三种方法"><a class="header-anchor" href="#区分子类方法中重名的三种方法">¶</a>区分子类方法中重名的三种方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num);<span class="comment">//30,局部变量</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);<span class="comment">//20，本类中的成员变量</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//10,父类中的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部变量:           直接写成员变量名</span></span><br><span class="line"><span class="comment">本类的成员变量:      this.成员变量名</span></span><br><span class="line"><span class="comment">父类的成员变量:      super.成员变量名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02ExtendsField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员方法的访问特点"><a class="header-anchor" href="#成员方法的访问特点">¶</a>成员方法的访问特点</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法执行！！！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类重名方法执行！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi01</span> <span class="keyword">extends</span> <span class="title">Fu01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法执行！！！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类重名方法执行！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类的继承关系当中，创建子类对象，访问成员方法的规则:</span></span><br><span class="line"><span class="comment">    创建的对象是谁，就优先用谁，如果没有则向上找。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   注意事项:</span></span><br><span class="line"><span class="comment">无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03ExtendsField01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi01 zi = <span class="keyword">new</span> Zi01();</span><br><span class="line"></span><br><span class="line">        zi.methodFu01();<span class="comment">//父类方法执行！！！！！</span></span><br><span class="line">        zi.methodZi01();<span class="comment">//子类方法执行！！！！！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建的是new了子类对象，所以优先用子类方法</span></span><br><span class="line">        zi.method();<span class="comment">//子类重名方法执行！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的覆盖重写"><a class="header-anchor" href="#方法的覆盖重写">¶</a>方法的覆盖重写</h2><h3 id="概念与特点"><a class="header-anchor" href="#概念与特点">¶</a>概念与特点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重写(Override)</span></span><br><span class="line"><span class="comment">概念:在继承关系当中，方法的名称一样，参数列表也一样。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重写(Override):方法的名称一样，参数列表[也一样]。覆盖、覆写。</span></span><br><span class="line"><span class="comment">重载(Overload) :方法的名称一样，参数列表[不一样]。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的覆盖重写特点:创建的是子类对象，则优先用子类方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法覆盖重写的注意事项:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.必须保证父子类之间方法的名称相同，参数列表也相同。</span></span><br><span class="line"><span class="comment">@Override:写在方法前面，用来检测是不是有效的正确覆盖重写。</span></span><br><span class="line"><span class="comment">这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.子类方法的返回值必须[小于等于]父类方法的返回值范围。</span></span><br><span class="line"><span class="comment">小扩展提示: java. lang . object类是所有类的公共最高父类(祖宗类)，java. lang. String就是object的子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.子类方法的权限必须[大于等于]父类方法的权限修饰符。</span></span><br><span class="line"><span class="comment">小扩展提示: public &gt; protected &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">备注: (default)不是关键字default， 而是什么都不写，留空。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="应用场景"><a class="header-anchor" href="#应用场景">¶</a>应用场景</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728145141.png" alt="image-20200728143931983"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本来的老款手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示号码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个新手机，使用老手机作为父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();<span class="comment">//把父类中的show方法拿过来重复使用</span></span><br><span class="line">        <span class="comment">//自己子类再添加新的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;显示姓名&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;显示头像&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome04Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.call();</span><br><span class="line">        phone.send();</span><br><span class="line">        phone.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        NewPhone newPhone = <span class="keyword">new</span> NewPhone();</span><br><span class="line">        newPhone.call();</span><br><span class="line">        newPhone.send();</span><br><span class="line">        newPhone.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法的访问特点"><a class="header-anchor" href="#构造方法的访问特点">¶</a>构造方法的访问特点</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承关系中，父子类构造方法的访问特点:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.子类构造方法当中有一一个默认隐含的“super()&quot;调用，所以一-定是先调用的父类构造，后执行的子类构造。</span></span><br><span class="line"><span class="comment">2.子类构造可以通过super关键字来调用父类重载构造。</span></span><br><span class="line"><span class="comment">3. super的父类构造调用，必须是子类构造方法的第一个语句。 不能一个子类构造调用多次super构造。</span></span><br><span class="line"><span class="comment">总结:</span></span><br><span class="line"><span class="comment">子类必须调，用父类构造方法，不写则赠送super();写了则用写的指定的super调用，super只能有一个，还必须是第一个。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="super关键字的三种用法"><a class="header-anchor" href="#super关键字的三种用法">¶</a>super关键字的三种用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">super关键字的用法有三种:</span></span><br><span class="line"><span class="comment">1.在子类的成员方法中，访问父类的成员变量。</span></span><br><span class="line"><span class="comment">2.在子类的成员方法中，访问父类的成员方法。</span></span><br><span class="line"><span class="comment">3.在子类的构造方法中，访问父类的构造方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi02</span> <span class="keyword">extends</span> <span class="title">Fu02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//父类中的num</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.method();<span class="comment">//访问父类中的method方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this关键字的三种用法"><a class="header-anchor" href="#this关键字的三种用法">¶</a>this关键字的三种用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.在本类的成员方法中，访问本类的成员变量。</span></span><br><span class="line"><span class="comment">2.在本类的成员方法中，访问本类的另一个成员方法。</span></span><br><span class="line"><span class="comment">3.在本类的构造方法中，访问本类的另- -个构造方法。</span></span><br><span class="line"><span class="comment">在第三种用法当中要注意:</span></span><br><span class="line"><span class="comment">    A. this(... )调用也必须是构造方法的第一个语句， 唯一-个。</span></span><br><span class="line"><span class="comment">    B. super和thi s两种构造调用，不能同时使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi03</span> <span class="keyword">extends</span> <span class="title">Fu03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        super();//这一行不再赠送</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">100</span>);<span class="comment">//本类的无参构造，调用本类的有参构造</span></span><br><span class="line"><span class="comment">//        this(1,3);//错误写法/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi03</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num);<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);<span class="comment">//本类中的成员变量</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);<span class="comment">//父类中的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你最帅！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodA();</span><br><span class="line">        System.out.println(<span class="string">&quot;我最帅！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super和this关键字图解"><a class="header-anchor" href="#super和this关键字图解">¶</a>super和this关键字图解</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728205348.png" alt="image-20200728205347121"></p><h2 id="Java继承的三个特点"><a class="header-anchor" href="#Java继承的三个特点">¶</a>Java继承的三个特点</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728210954.png" alt="image-20200728210017817"></p><h2 id="抽象"><a class="header-anchor" href="#抽象">¶</a>抽象</h2><h3 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728210946.png" alt="image-20200728210458257"></p><h3 id="抽象方法和抽象类的格式和使用"><a class="header-anchor" href="#抽象方法和抽象类的格式和使用">¶</a>抽象方法和抽象类的格式和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象方法:就是加上abstract关键字，然后去掉大括号，直接分号结束。</span></span><br><span class="line"><span class="comment">抽象类:抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用抽象类和抽象方法:</span></span><br><span class="line"><span class="comment">19不能直接创建new抽象类对象。</span></span><br><span class="line"><span class="comment">2.必须用一个子类来继承抽象父类。</span></span><br><span class="line"><span class="comment">3.子类必须覆盖重写抽象父类当中所有的抽象方法。</span></span><br><span class="line"><span class="comment">覆盖重写(实现) :子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</span></span><br><span class="line"><span class="comment">4.创建子类对象进行使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个抽象方法，代表吃东西，但是具体吃什么(大括号的内容)不确定。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个普通的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome05Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项-v2"><a class="header-anchor" href="#注意事项-v2">¶</a>注意事项</h3><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多,但若理解了抽象的本质，无需死记硬背。<br>1.抽象类<strong>不能创建对象</strong>，如果创建,编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解: 假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote><p>2.抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解: 子类的构造方法中，有默认的super(),需要访问父类构造方法。</p></blockquote><p>3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解:未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote><p>4.抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</p><blockquote><p>理解:假设不重写所有抽象方法,则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote><h2 id="练习题-v8"><a class="header-anchor" href="#练习题-v8">¶</a>练习题</h2><h3 id="综合案例-群主发普通红包"><a class="header-anchor" href="#综合案例-群主发普通红包">¶</a>综合案例:群主发普通红包</h3><p>群主发普通红包。某群有多名成员，群主给成员发普通红包。普通红包的规则:<br>1.群主的一笔金额，从群主余额中扣除，平均分成n等份，让成员领取。<br>2.成员领取红包后，保存到成员余额中。<br>请根据描述,完成案例中所有类的定义以及指定类之间的继承关系，并完成发红包的操作。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200728214035.png" alt="image-20200728214033747"></p><h4 id="实现："><a class="header-anchor" href="#实现：">¶</a>实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;<span class="comment">//余额，也就是当前的所拥有的钱数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示一下用户有多少钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫：&quot;</span> + name + <span class="string">&quot;,我有&quot;</span> + money + <span class="string">&quot;钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//群主的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">send</span><span class="params">(<span class="keyword">int</span> totalMoney,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先需要一个集合，用来存储若干个红包的余额</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先看一下群主自己的余额</span></span><br><span class="line">        <span class="keyword">int</span> leftMoney = <span class="keyword">super</span>.getMoney();<span class="comment">//群主当前余额</span></span><br><span class="line">        <span class="keyword">if</span> (totalMoney &gt;leftMoney)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的余额不足，请及时充值！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> redList;<span class="comment">//返回空集合</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扣钱，就是重新设置余额</span></span><br><span class="line">        <span class="keyword">super</span>.setMoney(leftMoney - totalMoney);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发红包需要平均拆分成count份</span></span><br><span class="line">        <span class="keyword">int</span> avg = totalMoney/count;</span><br><span class="line">        <span class="keyword">int</span> mod  = totalMoney % count;<span class="comment">//余数，也就是剩下的零头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//除不开的零头放在最后一个红包里</span></span><br><span class="line">        <span class="comment">//下面把红包一个一个放在集合里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            redList.add(avg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一个红包</span></span><br><span class="line">        <span class="keyword">int</span> last = avg + mod;</span><br><span class="line">        redList.add(last);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//群员的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从多个红包当中随便抽取一个，给我自己。</span></span><br><span class="line">        <span class="comment">//随机获取一一个集合当中的索引编号</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line">        <span class="comment">//根据索引，从集合当中删除，并且得到被删除的红包，给我自己</span></span><br><span class="line">        <span class="keyword">int</span> delta = list.remove(index);</span><br><span class="line">        <span class="comment">//当前成员有多少钱</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="keyword">super</span>.getMoney();</span><br><span class="line">        <span class="comment">//加法，并重新设置回去</span></span><br><span class="line">        <span class="keyword">super</span>.setMoney(delta + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainRedPacket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager(<span class="string">&quot;乔布斯&quot;</span>,<span class="number">1000000000</span>);</span><br><span class="line"></span><br><span class="line">        Member one = <span class="keyword">new</span> Member(<span class="string">&quot;比尔·盖茨&quot;</span>,<span class="number">999999</span>);</span><br><span class="line">        Member two = <span class="keyword">new</span> Member(<span class="string">&quot;巴菲特&quot;</span>,<span class="number">8888888</span>);</span><br><span class="line">        Member three = <span class="keyword">new</span> Member(<span class="string">&quot;库克&quot;</span>,<span class="number">666666</span>);</span><br><span class="line">        Member four = <span class="keyword">new</span> Member(<span class="string">&quot;川普&quot;</span>,<span class="number">222222</span>);</span><br><span class="line"></span><br><span class="line">        manager.show();</span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">        four.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//群主总共发66666块钱，分成四个红包</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = manager.send(<span class="number">66666</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//四个普通成员收红包</span></span><br><span class="line">        one.receive(redList);</span><br><span class="line">        two.receive(redList);</span><br><span class="line">        three.receive(redList);</span><br><span class="line">        four.receive(redList);</span><br><span class="line"></span><br><span class="line">        manager.show();<span class="comment">//随机分排</span></span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">        four.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>接口</h1><h2 id="概述与生活例举"><a class="header-anchor" href="#概述与生活例举">¶</a>概述与生活例举</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200729214057.png" alt="image-20200729214055457"></p><h2 id="定义的基本格式"><a class="header-anchor" href="#定义的基本格式">¶</a>定义的基本格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在任何放本的Java中，接口都能正义抽象万法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public abstract返回值类型方法名称(参数列表);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">主意事项:</span></span><br><span class="line"><span class="comment">1.接口当中的抽象方法，修饰符必须是两个固定的关键字: public abstract</span></span><br><span class="line"><span class="comment">2.这两个关键字修饰符，可以选择性地省略。(今天刚学， 所以不推荐。)</span></span><br><span class="line"><span class="comment">3.方法的三要素，可以随意定义。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>与类名相同才是构造方法</p><p>接口主要是做一些规范</p></blockquote><h2 id="接口的抽象方法的使用"><a class="header-anchor" href="#接口的抽象方法的使用">¶</a>接口的抽象方法的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口使用步骤:</span></span><br><span class="line"><span class="comment">1.接口不能直接使用，必须有一个“实现类&quot;来“实现&quot;该接口。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public class 实现类名称implements 接口名称&#123;</span></span><br><span class="line"><span class="comment">    //.....</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.接口的实现类必须覆盖重写(实现)接口中所有的抽象方法。</span></span><br><span class="line"><span class="comment">实现:去掉abstract关键字，加上方法体大括号。</span></span><br><span class="line"><span class="comment">3.创建实现类的对象，进行使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//错误写法！不能直接new接口对象使用。</span></span><br><span class="line"><span class="comment">//        MyInterfaceAbstract inter = new MyInterfaceAbstract();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建实现类的对象使用</span></span><br><span class="line">        MyInterfaceAbstractImpl impl = <span class="keyword">new</span> MyInterfaceAbstractImpl();</span><br><span class="line">        impl.methodAbs();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;<span class="comment">//public和abstract可以省略其一，或着全部省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceAbstractImpl</span>  <span class="keyword">implements</span> <span class="title">MyInterfaceAbstract</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//辨识重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;implements方法执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的默认方法定义与使用"><a class="header-anchor" href="#接口的默认方法定义与使用">¶</a>接口的默认方法定义与使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口里允许定义默认方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public default 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:接口当中的默认方法，可以解决接口升级的问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新添加一个抽象方法</span></span><br><span class="line"><span class="comment">//    public abstract void methodAbsB();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新添加的方法，改写为默认方法</span></span><br><span class="line">    <span class="comment">//新添加的这个方法，不需要去修改AorB</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是新添加的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultA</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个抽象方法执行了：AAAAAAAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDefaultB</span> <span class="keyword">implements</span> <span class="title">MyInterfaceDefault</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbsA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个抽象方法执行了：BBBBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现B类覆盖重写了接口的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyInterfaceDefaultA a = <span class="keyword">new</span> MyInterfaceDefaultA();</span><br><span class="line"></span><br><span class="line">        a.methodAbsA();<span class="comment">//调用抽象方法，实际运行的是右侧实现类。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用默认方法，如果实现类当中没有，会向上找接口</span></span><br><span class="line">        a.methodDefault();<span class="comment">//这是新添加的默认方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyInterfaceDefaultB b = <span class="keyword">new</span> MyInterfaceDefaultB();</span><br><span class="line">        b.methodAbsA();<span class="comment">//这个抽象方法执行了：BBBBBBBB</span></span><br><span class="line">        b.methodDefault();<span class="comment">//实现B类覆盖重写了接口的默认方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>抽象类利于代码的复写，接口利于代码的维护</p><p>接口可以看成一种特殊的抽象类</p></blockquote><h2 id="接口的静态方法定义与使用"><a class="header-anchor" href="#接口的静态方法定义与使用">¶</a>接口的静态方法定义与使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从Java 8开始，接口当中允许定义静态方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public static 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">提示:就是将abstract或者default换成static即可，带上方法体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是接口的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意事项:不能通过接口实现类的对象来调用接口当中的静态方法。</span></span><br><span class="line"><span class="comment">正确用法:通过接口名称，直接调用其中的静态方法。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">接口名称.静态方法名(参数);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome03Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//直接通过接口名称调用静态方法</span></span><br><span class="line">        MyInterfaceStatic.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的私有方法定义与使用"><a class="header-anchor" href="#接口的私有方法定义与使用">¶</a>接口的私有方法定义与使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述:</span></span><br><span class="line"><span class="comment">我们需要抽取一个共有方法，用来解快两个默认方法之间重复代码的问题。</span></span><br><span class="line"><span class="comment">但是这个共有方法不应该让实现类使用，应该是私有化的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决方案:</span></span><br><span class="line"><span class="comment">从Java 9开始，接口当中允许定义私有方法。</span></span><br><span class="line"><span class="comment">1. 普通私有方法，解决多个默认方法之间重复代码问题</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">private 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.静态私有方法，解决多个静态方法之间重复代码问题</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">private static 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfacePrivateA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefacult1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法1&quot;</span>);</span><br><span class="line">        methodCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefacult2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法2&quot;</span>);</span><br><span class="line">        methodCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodCommon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfacePrivateB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法1&quot;</span>);</span><br><span class="line">        methodStaticCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法2&quot;</span>);</span><br><span class="line">        methodStaticCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStaticCommon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的常量定义和使用"><a class="header-anchor" href="#接口的常量定义和使用">¶</a>接口的常量定义和使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口:当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。</span></span><br><span class="line"><span class="comment">从效果上看，这其实就是接口的【常量】。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public static final 数据类型常量名称=数据值;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:</span></span><br><span class="line"><span class="comment">一旦使用final关键字进行修饰，说明不可改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1.接口当中的常量，可以省略public static final, 注意:不写也照样是这样。</span></span><br><span class="line"><span class="comment">2.接口当中的常量，必须进行赋值;不能不赋值。</span></span><br><span class="line"><span class="comment">3.接口中常量的名称，使用完全大写的字母，用下划线进行分隔。(推荐命名规则)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MYCLASS= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h2><p>在Java 9+版本中，接口的内容可以有:<br>1.成员变量其实是常量，格式:[public] [static] [final] 数据类型常量名称=数据值;</p><blockquote><p>注意:<br>常量必须进行赋值，而且一旦赋值不能改变。<br>常量名称完全大写，用下划线进行分隔。</p></blockquote><p>2.接口中最重要的就是抽象方法，格式:<br>[public] [abstract] 返回值类型方法名称(参数列表);</p><blockquote><p>注意:实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。</p></blockquote><p>3.从Java 8开始，接口里允许定义默认方法，格式:<br>[public] default 返回值类型方法名称(参数列表) {方法体}</p><blockquote><p>注意:默认方法也可以被覆盖重写</p></blockquote><p>4.从Java 8开始，接口里允许定义静态方法，格式:<br>[public] static 返回值类型方法名称(参数列表) {方法体}</p><blockquote><p>注意:应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</p></blockquote><p>5.从Java 9开始，接口里允许定义私有很乏，格式:<br>普通私有方法: private 返回值类型方法名称(参数列表) {方法体}<br>静态私有方法: private static 返回值类型方法名称(参数列表) {方法体}</p><blockquote><p>注意:private的方法只有接口自己才能调用，不能被实现类或别人使用。</p></blockquote><h2 id="继承父类并实现多种接口"><a class="header-anchor" href="#继承父类并实现多种接口">¶</a>继承父类并实现多种接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用接口的时候，需要注意:</span></span><br><span class="line"><span class="comment">1.接口是没有静态代码块或者构造方法的。</span></span><br><span class="line"><span class="comment">2.一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">public class MyInterfaceImpl impl ements MyInterfaceA, MyInterfaceB &#123;</span></span><br><span class="line"><span class="comment">//覆盖重写所有抽象方法</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3.如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</span></span><br><span class="line"><span class="comment">4.如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</span></span><br><span class="line"><span class="comment">5.如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</span></span><br><span class="line"><span class="comment">6.一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="接口之间的多继承"><a class="header-anchor" href="#接口之间的多继承">¶</a>接口之间的多继承</h2><p>1.类与类之间是单继承的。直接父类只有一个 。<br>2.类与接口之间是多实现的。一个类可以实现多个接口。<br>3.接口与接口之间是多继承的。</p><p>注意事项:<br>1.多个父接口当中的抽象方法如果重复，没关系。<br>2.多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写， <strong>【而且带着default关键字】</strong>。</p><h1>多态性</h1><h2 id="概述-v6"><a class="header-anchor" href="#概述-v6">¶</a>概述</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200802215932.png" alt="image-20200802215928812"></p><h2 id="格式与使用"><a class="header-anchor" href="#格式与使用">¶</a>格式与使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码当中体现多态性，其实就是一句话: 父类引用指向子类对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">父类名称对象名= new 子类名称();</span></span><br><span class="line"><span class="comment">或者:</span></span><br><span class="line"><span class="comment">接口名称对象名= new 实现类名称();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>左父右子</p></blockquote><h2 id="成员变量的使用特点"><a class="header-anchor" href="#成员变量的使用特点">¶</a>成员变量的使用特点</h2><p>访问成员变量的两种方式:<br>1.直接通过对象名称访问成员变量:看等号左边是谁，优先用谁，没有则向上找。<br>2.间接通过成员方法访问成员变量:看该方法属于谁，优先用谁，没有则向上找。</p><blockquote><p>访问成员变量不能覆盖重写，访问成员方法可以覆盖重写</p><p>永远不会向下找</p></blockquote><h2 id="成员方法的使用特点"><a class="header-anchor" href="#成员方法的使用特点">¶</a>成员方法的使用特点</h2><p>在多态的代码当中，成员方法的访问规则是:<br>看new的是谁，就优先用谁，没有则向上找。</p><blockquote><p>口诀:编译看左边，运行看右边。成员变量不在此列，规则不同</p></blockquote><p><em>对比一下:</em><br>成员变量:编译看左边，运行还看左边。<br>成员方法:编译看左边，运行看右边。</p><h2 id="使用多态的好处"><a class="header-anchor" href="#使用多态的好处">¶</a>使用多态的好处</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200802223437.png" alt="image-20200802223149584"></p><h2 id="对象的向上转型和向下转型"><a class="header-anchor" href="#对象的向上转型和向下转型">¶</a>对象的向上转型和向下转型</h2><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200803144143.png" alt="image-20200803144141656"></p><h2 id="用instanceof关键字进行判断"><a class="header-anchor" href="#用instanceof关键字进行判断">¶</a>用instanceof关键字进行判断</h2><p>如何才能知道-个父类引用的对象，本来是什么子类?<br><strong>格式:</strong><br>对象<code>instanceof</code> 类名称<br>这将会得到一个<strong>boolean值</strong>结果， 也就是判断前面的对象能不能当做后面类型的实例。</p><blockquote><p>这样的好处：向下转型防止发生异常</p></blockquote><h2 id="笔记本USB接口案例"><a class="header-anchor" href="#笔记本USB接口案例">¶</a>笔记本USB接口案例</h2><h3 id="笔记本电脑"><a class="header-anchor" href="#笔记本电脑">¶</a>笔记本电脑</h3><p>笔记本电脑(laptop) 通常具备使用USB设备的功能。在生产时，笔记本都预留了可以插入USB设备的USB接口,<br>但具体是什么USB设备，笔记本厂商并不关心，只要符合USB规格的设备都可以。</p><p>定义USB接口，具备最基本的开启功能和关闭功能。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守<br>USB规范，实现USB接口，否则鼠标和键盘的生产出来也无法使用。</p><h3 id="案例分析"><a class="header-anchor" href="#案例分析">¶</a>案例分析</h3><p>进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘<br>●USB接口，包含打开设备功能、关闭设备功能<br>●笔记本类，包含开机功能、关机功能、使用USB设备功能<br>●鼠标类，要实现USB接口,并具备点击的方法<br>●键盘类，要实现USB接口，具备敲击的方法</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200803232808.png" alt="image-20200803145842708"></p><h3 id="案例实现"><a class="header-anchor" href="#案例实现">¶</a>案例实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">//打开设备</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">//关闭设备</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poweron</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;笔记本电脑开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poweroff</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;笔记本电脑关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDevice</span><span class="params">(USB usb)</span></span>&#123;</span><br><span class="line">        usb.open();<span class="comment">//打开设备</span></span><br><span class="line">        <span class="keyword">if</span> (usb <span class="keyword">instanceof</span> Mouse)&#123;<span class="comment">//一定要先进行判断</span></span><br><span class="line">            Mouse mouse = (Mouse) usb;<span class="comment">//向下转型</span></span><br><span class="line">            mouse.click();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (usb <span class="keyword">instanceof</span> Keyboard)&#123;</span><br><span class="line">            Keyboard keyboard =(Keyboard) usb;<span class="comment">//向下转型</span></span><br><span class="line">            keyboard.type();</span><br><span class="line">        &#125;</span><br><span class="line">        usb.close();<span class="comment">//关闭设备</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标就是一个USB设备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开鼠标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭鼠标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;点击鼠标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键盘就是一个USB设备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">type</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘输入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomeMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先创建一个笔记本电脑</span></span><br><span class="line">        Computer compuer = <span class="keyword">new</span> Computer();</span><br><span class="line">        compuer.poweron();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一个竖标，供电脑使用</span></span><br><span class="line"><span class="comment">//        Mouse mouse = new Mouse();//这是一种方法</span></span><br><span class="line">        <span class="comment">//首先准备向上转型</span></span><br><span class="line">        USB usbMouse = <span class="keyword">new</span> Mouse();<span class="comment">//这是另一种方法,多态写法</span></span><br><span class="line">        <span class="comment">//参数是USB类型，我正好传递进去的就是USB鼠标</span></span><br><span class="line">        compuer.useDevice(usbMouse);</span><br><span class="line"></span><br><span class="line">        Keyboard keyboard = <span class="keyword">new</span> Keyboard();<span class="comment">//没有使用多态写法</span></span><br><span class="line">        <span class="comment">//方法参数是USB类型，传递进去的是实现类对象</span></span><br><span class="line">        compuer.useDevice(keyboard);<span class="comment">//正确写法!也发生了向上转型</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        compuer.useDevice(new Keyboard());//这也是正确写法</span></span><br><span class="line">        compuer.poweroff();</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于没有使用多态写法的解释</span></span><br><span class="line">        method(<span class="number">10.0</span>);<span class="comment">//正确写法，double --&gt; double</span></span><br><span class="line">        method(<span class="number">20</span>);<span class="comment">//正确写法，int--&gt;double</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">30</span>;</span><br><span class="line">        method(a);<span class="comment">//正确写法，int--&gt;double</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>final关键字</h1><h2 id="概念及用法"><a class="header-anchor" href="#概念及用法">¶</a>概念及用法</h2><p>final关键字代表最终、不可改变的。<br>常见四种用法:<br>1.可以用来修饰一个类<br>2.可以用来修饰一个方法<br>3.可以用来修饰一个局部变量<br>4.还可以用来修饰一一个成员变量</p><h2 id="用于修饰类"><a class="header-anchor" href="#用于修饰类">¶</a>用于修饰类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当final天键字用来修饰一个类的时候，格式:</span></span><br><span class="line"><span class="comment">public final class类名称&#123;</span></span><br><span class="line"><span class="comment">    //...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含义:当前这个类不能有任何的子类。(太监类)</span></span><br><span class="line"><span class="comment">注意:一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写(因为没儿子。)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;final方法类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用于修饰成员方法"><a class="header-anchor" href="#用于修饰成员方法">¶</a>用于修饰成员方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当final关键字用来修饰一一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。</span></span><br><span class="line"><span class="comment">格式:</span></span><br><span class="line"><span class="comment">修饰符final 返回值类型方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">    //方法体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="comment">/*final*/</span> <span class="function"><span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用于修饰局部变量"><a class="header-anchor" href="#用于修饰局部变量">¶</a>用于修饰局部变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Final</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1);<span class="comment">//10</span></span><br><span class="line">        num1 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num1);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line">        <span class="comment">//“一次赋值，终生不变</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        num2 = 250;//错误写法，不能改变</span></span><br><span class="line"><span class="comment">//        num2 = 100;//错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//正确写法，只要保证有唯一一次赋值即可</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num3;</span><br><span class="line">        num3 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于基本类型来说， 不可变说的是变量当中的数据不 可改变</span></span><br><span class="line">        <span class="comment">//对于引用类型来说，不可变说的是变量当中的地址值不可改变</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        System.out.println(stu1.getName());<span class="comment">//Rose</span></span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;Rechal&quot;</span>);</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu1.getName());<span class="comment">//Rechal</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;Jeoy&quot;</span>);<span class="comment">//Jeoy</span></span><br><span class="line">        <span class="comment">//错误写法！final的引用类型变量，其中的地址不可改变</span></span><br><span class="line"><span class="comment">//        stu2 = new Student(&quot;Pheebs&quot;);</span></span><br><span class="line">        stu2.setName(<span class="string">&quot;Chandler&quot;</span>);<span class="comment">//Chandler</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用于修饰成员变量"><a class="header-anchor" href="#用于修饰成员变量">¶</a>用于修饰成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</span></span><br><span class="line"><span class="comment">2.对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一</span></span><br><span class="line"><span class="comment">3.必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String name<span class="comment">/* = &quot;Mon&quot;*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name =<span class="string">&quot;Chandler&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四种权限修饰符"><a class="header-anchor" href="#四种权限修饰符">¶</a>四种权限修饰符</h2><p><strong>Java中有四种权限修饰符:</strong></p><table><thead><tr><th></th><th>public &gt;</th><th>protected &gt;</th><th>(default) &gt;</th><th style="text-align:center">private</th></tr></thead><tbody><tr><td>同一个类(我自己)</td><td>YES</td><td>YES</td><td>YES</td><td style="text-align:center">YES</td></tr><tr><td>同一个包(我邻居)</td><td>YES</td><td>YES</td><td>YES</td><td style="text-align:center">NO</td></tr><tr><td>不同包子类(我儿子)</td><td>YES</td><td>YES</td><td>NO</td><td style="text-align:center">NO</td></tr><tr><td>不同包非子类(陌生人)</td><td>YES</td><td>NO</td><td>NO</td><td style="text-align:center">NO</td></tr></tbody></table><blockquote><p>注意事项: (default)并不是关键字“default&quot;， 而是根本不写。</p></blockquote><h1>内部类</h1><h2 id="概念与分类"><a class="header-anchor" href="#概念与分类">¶</a>概念与分类</h2><p>如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。<br>例如:身体和心脏的关系。又如:汽车和发动机的关系。</p><p>分类:<br>1.成员内部类<br>2.局部内部类(包含匿名内部类)</p><h2 id="成员内部类的定义"><a class="header-anchor" href="#成员内部类的定义">¶</a>成员内部类的定义</h2><p>成员内部类的定义格式:<br>修饰符class 外部类名称{<br>修饰符class 内部类名称{<br>//…<br>}<br>//…<br>}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="comment">//内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;心脏跳动：咚咚咚~~~&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我叫&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:内用外，随意访问;外用内，需要内部类对象。需要命令Recompile命令Ctrl+Shift+F9</p></blockquote><h2 id="成员内部类的使用"><a class="header-anchor" href="#成员内部类的使用">¶</a>成员内部类的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="comment">//内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;心脏跳动：咚咚咚~~~&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我叫&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的方法&quot;</span>);</span><br><span class="line">        <span class="comment">//新添加的调用内部类的一种方法</span></span><br><span class="line">        <span class="comment">/*Heart heart = new Heart();</span></span><br><span class="line"><span class="comment">        heart.beat();*/</span></span><br><span class="line">        <span class="keyword">new</span> Heart().beat();<span class="comment">//这是另一种方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何使用成员内部类?有两种方式:</span></span><br><span class="line"><span class="comment">1.间接方式:在外部类的方法当中，使用内部类;然后main只是调用外部类的方法。</span></span><br><span class="line"><span class="comment">2.直接方式，公式:</span></span><br><span class="line"><span class="comment">类名称对象名= new类名称();</span></span><br><span class="line"><span class="comment">【外部类名称.内部类名称对象名= new 外部类名称().new内部类名称();】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body();<span class="comment">//外部类的对象</span></span><br><span class="line">        <span class="comment">//通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照公式写</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().<span class="function">new <span class="title">Heart</span><span class="params">()</span></span>;</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的同名变量访问"><a class="header-anchor" href="#内部类的同名变量访问">¶</a>内部类的同名变量访问</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果出现了重名现象，那么格式是:外部类名称. this .外部类成员变量名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//外部类的成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>;<span class="comment">//内部类方法的局部变量</span></span><br><span class="line">            System.out.println(num);<span class="comment">//局部变量，就近原则</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num);<span class="comment">//内部类的成员变量</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num);<span class="comment">//外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();</span></span><br><span class="line">        Outer.Inner obj = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        obj.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类定义"><a class="header-anchor" href="#局部内部类定义">¶</a>局部内部类定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个类是定义在一 个方法内部的，那么这就是一个局部内部类。</span></span><br><span class="line"><span class="comment">“局部”:只有当前所属的方法才能使用它，出了这个方法外面就不能用了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义格式:</span></span><br><span class="line"><span class="comment">修饰符class外部类名称&#123;</span></span><br><span class="line"><span class="comment">    修饰符返回值类型外部类方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment">        class局部内部类名称&#123;</span></span><br><span class="line"><span class="comment">            // ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">小节一下类的权限修饰符:</span></span><br><span class="line"><span class="comment">public &gt; protected &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">定义一个类的时候，权限修饰符规则:</span></span><br><span class="line"><span class="comment">1.外部类: public / (default)</span></span><br><span class="line"><span class="comment">2.成员内部类: public / protected / (default) / private</span></span><br><span class="line"><span class="comment">3.局部内部类:什么都不能写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mothodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);<span class="comment">//10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用局部类，除了当前方法，谁用都不行</span></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.mothodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomeMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer01 obj = <span class="keyword">new</span> Outer01();</span><br><span class="line">        obj.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类的final问题"><a class="header-anchor" href="#局部内部类的final问题">¶</a>局部内部类的final问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">备注:从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原因:</span></span><br><span class="line"><span class="comment">1. new出来的对象在堆内存当中。</span></span><br><span class="line"><span class="comment">2.局部变量是跟着方法走的，在栈内存当中。</span></span><br><span class="line"><span class="comment">3.方法运行结束之后，立刻出栈，局部变量就会立刻消失。</span></span><br><span class="line"><span class="comment">4.但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//所在方法的局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInnner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类及其注意事项"><a class="header-anchor" href="#匿名内部类及其注意事项">¶</a>匿名内部类及其注意事项</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果接口的实现类(或者是父类的子类)只需要使用唯一的一次，</span></span><br><span class="line"><span class="comment">那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">匿名内部类的定义格式:</span></span><br><span class="line"><span class="comment">接口名称对象名= new 接口名称() &#123;</span></span><br><span class="line"><span class="comment">    // 覆盖重写所有抽象方法</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对格式“new接口名称() &#123;... &#125;进行解析:</span></span><br><span class="line"><span class="comment">1. new代表创建对象的动作</span></span><br><span class="line"><span class="comment">2.接口名称就是匿名内部类需要实现哪个接口</span></span><br><span class="line"><span class="comment">3. &#123;... &#125;这才是匿名内部类的内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">另外还要注意几点问题:</span></span><br><span class="line"><span class="comment">1.匿名内部类，在【创建对象】的时候，只能使用唯一次。</span></span><br><span class="line"><span class="comment">如果希望多次创建对象，而且类的内容一样的话， 那么就必须使用单独定义的实现类了。</span></span><br><span class="line"><span class="comment">2.匿名对象，在【调用方法】的时候，只能调用唯一次。</span></span><br><span class="line"><span class="comment">如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</span></span><br><span class="line"><span class="comment">3.匿名内部类是省略了【实现类子类名称】，但是匿名对象是省略了【对象名称】</span></span><br><span class="line"><span class="comment">强调:匿名内部类和匿名对象不是一回事！！！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome01Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类,但不是匿名对象，对象名称就叫objA</span></span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法!111-A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        objA.method1();</span><br><span class="line">        objA.method2();</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用了匿名对象类，而且省略了对象名称，也是匿名对象</span></span><br><span class="line">    <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匿名内部类实现了方法!111-B&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-B&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.method1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为匿名对象无法调用第二次方法，所以需要在创建一个匿名内部类的匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法!111-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法！222-B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类作为成员变量类型"><a class="header-anchor" href="#类作为成员变量类型">¶</a>类作为成员变量类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//游戏当中的英雄角色类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//英雄的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//英雄的年龄</span></span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;<span class="comment">//英雄的武器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">int</span> age, Weapon weapon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;的&quot;</span> + name + <span class="string">&quot;用&quot;</span> +weapon.getCode() + <span class="string">&quot;击败了敌方英雄&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weapon <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄的武器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//英雄的武器代号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome02Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个英雄角色</span></span><br><span class="line">        Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">        <span class="comment">//为英雄起一个名字，并设置年龄</span></span><br><span class="line">        hero.setName(<span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">        hero.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个英雄武器</span></span><br><span class="line">        Weapon weapon = <span class="keyword">new</span> Weapon(<span class="string">&quot;多兰剑&quot;</span>);</span><br><span class="line">        hero.setWeapon(weapon);</span><br><span class="line"></span><br><span class="line">        hero.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口作为成员变量类型"><a class="header-anchor" href="#接口作为成员变量类型">¶</a>接口作为成员变量类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//英雄的名字</span></span><br><span class="line">    <span class="keyword">private</span> Skill skill;<span class="comment">//英雄的技能</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero01</span><span class="params">(String name, Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;,开始释放技能：&quot;</span>);</span><br><span class="line">        skill.use();<span class="comment">//调用接口中的抽象方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;释放技能完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Skill <span class="title">getSkill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkill</span><span class="params">(Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;<span class="comment">//释放技能的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkillImpl</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Biu~Biu~Biu~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomeGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero01 hero01 = <span class="keyword">new</span> Hero01();</span><br><span class="line">        hero01.setName(<span class="string">&quot;艾希&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置英雄技能</span></span><br><span class="line"><span class="comment">//        hero01.setSkill(new SkillImpl());//使用单独定义的实现类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//还可以改成使用匿名内部类</span></span><br><span class="line">        <span class="comment">/*Skill skill = new Skill() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void use() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;Pia~Pia~Pia~&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        hero01.setSkill(skill);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//进一步简化</span></span><br><span class="line">        hero01.setSkill(<span class="keyword">new</span> Skill() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Biu~Pia~Biu~Pia~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        hero01.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口作为方法的参数或返回值"><a class="header-anchor" href="#接口作为方法的参数或返回值">¶</a>接口作为方法的参数或返回值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.List正是ArrayList所实现的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomeInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//左边是接口名称，右边是实现类名称，这就是多态写法</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = addNames(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line">            System.out.println(result.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//给了一个空集合，进来之后添加了，出去之后就有新东西了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">addNames</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        list.add(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Rechal&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;霉霉&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发红包案例"><a class="header-anchor" href="#发红包案例">¶</a>发红包案例</h2><h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.day.demo01.red.OpenMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">场景说明:</span></span><br><span class="line"><span class="comment">    红包发出去之后，所有人都有红包，大家抢完了之后，最后一个红包给群主自己。</span></span><br><span class="line"><span class="comment">大多数代码都是现成的，我们需要做的就是填空题。</span></span><br><span class="line"><span class="comment">我们自己要做的事情有:</span></span><br><span class="line"><span class="comment">    1.设置一下程序的标题，通过构造方法的字符串参数</span></span><br><span class="line"><span class="comment">    2.设置群主名称I</span></span><br><span class="line"><span class="comment">    3.设置分发策略:平均，还是随机? |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">红包分发的策略:</span></span><br><span class="line"><span class="comment">    1.普通红包(平均) : totalMoney / totalCount, 余数放在最后一个红包当 中。</span></span><br><span class="line"><span class="comment">    2.手气红包(随机);最少1分钱，最多不超过平均数的2倍。应该越发越少。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRed red = <span class="keyword">new</span> MyRed(<span class="string">&quot;红包发发发&quot;</span>);</span><br><span class="line">        <span class="comment">//设置群主名称</span></span><br><span class="line">        red.setOwnerName(<span class="string">&quot;乔布斯&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*//普通红包</span></span><br><span class="line"><span class="comment">        OpenMode normal = new NormalMode();</span></span><br><span class="line"><span class="comment">        red.setOpenWay(normal);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//手气红包</span></span><br><span class="line">        OpenMode random = <span class="keyword">new</span> RandomMode();</span><br><span class="line">        red.setOpenWay(random);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通红包平均分发"><a class="header-anchor" href="#普通红包平均分发">¶</a>普通红包平均分发</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804215918.png" alt="image-20200804215912112"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804215944.png" alt="image-20200804215943078"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804220210.png" alt="image-20200804220009753"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.day.demo01.red.OpenMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalMode</span> <span class="keyword">implements</span> <span class="title">OpenMode</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">divide</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> totalMoney, <span class="keyword">final</span> <span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> avg = totalMoney / totalCount;<span class="comment">//平均值</span></span><br><span class="line">        <span class="keyword">int</span> mod = totalMoney % totalCount;<span class="comment">//余数，模，零头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意totallCount - 1代表，最后一个先留着</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            list.add(avg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有零头，需要先放在最后一个红包里</span></span><br><span class="line">        list.add(avg + mod);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手气红包随机分发"><a class="header-anchor" href="#手气红包随机分发">¶</a>手气红包随机分发</h3><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804222622.png" alt="image-20200804222621272"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804222641.png" alt="image-20200804222639346"></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200804222835.png" alt="image-20200804222655186"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.day.demo01.red.OpenMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomMode</span> <span class="keyword">implements</span> <span class="title">OpenMode</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">divide</span><span class="params">(<span class="keyword">int</span> totalMoney, <span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机分配，有可能多，有可能少</span></span><br><span class="line">        <span class="comment">//最少一分钱，最多不超过“剩下金额平均数的2倍”</span></span><br><span class="line">        <span class="comment">// 第一次友红包，随札范围是0. 01元~6.66元</span></span><br><span class="line">        <span class="comment">//第一次发完之后，剩下的至少是3.34元。</span></span><br><span class="line">        <span class="comment">//此时还需要再发2个红包</span></span><br><span class="line">        <span class="comment">//此时的再发范围应该是0.01元~3.34元(取不到右边，剩下0. 01)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//总结一下，范围的[公式]是: 1 + random. nextInt(leftMoney / leftCount * 2);</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();<span class="comment">//首先创建一个随机数生成器</span></span><br><span class="line">        <span class="comment">// totalMoney是 总金额，totalCount是总份数，不变</span></span><br><span class="line">        <span class="comment">//额外定义两个变量，分别代表剩下多少钱，剩下多少份</span></span><br><span class="line">        <span class="keyword">int</span> leftMoney = totalMoney;</span><br><span class="line">        <span class="keyword">int</span> leftCount = totalCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机发n - 1个，最后一个不需要随机</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//按照公式生成随机金额</span></span><br><span class="line">            <span class="keyword">int</span> money = r.nextInt(leftMoney / leftCount * <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(money);<span class="comment">//将一个随机红包包好放入集合</span></span><br><span class="line">            leftMoney -=money;<span class="comment">//剩下的金额越发越少</span></span><br><span class="line">            leftCount--;<span class="comment">//剩下还应该再发的红包个数，递减</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一个不需要随机，直接放进去就行了</span></span><br><span class="line">        list.add(leftMoney);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo出现的问题</title>
      <link href="/stardust14.github.io/2020/07/06/hexo%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/stardust14.github.io/2020/07/06/hexo%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>在进行博客编写过程中，出现了一些问题。</h1><h2 id="1-出现hexo无法识别"><a class="header-anchor" href="#1-出现hexo无法识别">¶</a>1.出现hexo无法识别</h2><p>‘hexo’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。<br>或着是<code>bash: hexo: command not found</code></p><p>参考网上的经验贴,修改环境变量</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707174137.png" alt="image-20200707174134036"></p><h2 id="2-出现cnpm不能识别"><a class="header-anchor" href="#2-出现cnpm不能识别">¶</a>2.出现cnpm不能识别</h2><p>‘cnpm’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。</p><p>把C盘的一些文件复制到博客安装的目录中去</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707174434.png" alt="image-20200707174432439"></p><h2 id="3-图片无法加载"><a class="header-anchor" href="#3-图片无法加载">¶</a>3.图片无法加载</h2><p>使用<strong>typora+picgo</strong>插入图片，部署到github上去。</p><p>出现了好多错误，直接剪切上传后正常，保存后在上传加载不出，但是下面也有加载出来的。。。</p><p>参考网上的解决方案，修改了hosts文件，配置了一些picgo的设置。</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707175357.png" alt="image-20200707175355687"></p><h2 id="4-出现本地4000端口占用问题"><a class="header-anchor" href="#4-出现本地4000端口占用问题">¶</a>4. 出现本地4000端口占用问题</h2><p>打开cmd输入 <code>netstat -nao | findstr 4000</code>查询4000端口占用的程序</p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707171831.png" alt="Image"></p><p>可以看到 PID为 24016 的进程占用了4000端口，如果进一步你想知道它的进程名称，你可以使用如下命令： <code>tasklist | findstr 24016</code> 执行终止程序</p><h2 id="5-git-bush中ctrl-c退出不了（bug）"><a class="header-anchor" href="#5-git-bush中ctrl-c退出不了（bug）">¶</a>5.git bush中ctrl+c退出不了（bug）</h2><p>打开cmd，输入：<code>taskkill /F /IM node.exe</code></p><p><img src= "/stardust14.github.io/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/stardust14/picture/master/img/20200707171737.png" alt="Image"></p><p>搞定~~~~</p><h2 id="6-部署到GitHub上电脑无法访问的问题"><a class="header-anchor" href="#6-部署到GitHub上电脑无法访问的问题">¶</a>6.部署到GitHub上电脑无法访问的问题</h2><p>这是由于<code>https：//</code>这个格式</p><h1>7.hexo s之后页面不显示，页面出现以下代码：</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><p>在博客根目录下git bush以下代码：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><h2 id="8-部署到GitHub上出现错误"><a class="header-anchor" href="#8-部署到GitHub上出现错误">¶</a>8.部署到GitHub上出现错误</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改blog</title>
      <link href="/stardust14.github.io/2020/01/05/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9blog/"/>
      <url>/stardust14.github.io/2020/01/05/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>学习怎么进行主题设置</h1><h2 id="参考网上的教程，进行学习"><a class="header-anchor" href="#参考网上的教程，进行学习">¶</a>参考网上的教程，进行学习</h2><p>基本的使用:</p><h1>一级标题（# ）</h1><h2 id="二级标题（-）"><a class="header-anchor" href="#二级标题（-）">¶</a>二级标题（## ）</h2><h3 id="三级标题（-）"><a class="header-anchor" href="#三级标题（-）">¶</a>三级标题（### ）</h3><blockquote><p>以此类推（引用&gt;）</p></blockquote><p>虚线（—、***）</p><ul><li>列表1<br>a 字列表<br><a href="https://www.baidu.com/?tn=98012088_5_dg&amp;ch=12">百度</a></li></ul><blockquote><p>超链接</p></blockquote><p><em>斜体</em><br><strong>粗体</strong></p><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">&lt;title&gt;代码引用，直接敲&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first blog</title>
      <link href="/stardust14.github.io/2020/01/04/first-blog/"/>
      <url>/stardust14.github.io/2020/01/04/first-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>first blog</p><p>内容：又重新来了一遍！</p><hr><p>second</p><p>内容：太不容易了。</p><hr><p>参考：</p><p>来自B站codecheeep</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/stardust14.github.io/2020/01/04/hello-world/"/>
      <url>/stardust14.github.io/2020/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\stardust14.github.io\assets\css\APlayer.min.css"><script src="\stardust14.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
